<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Pype.dev</title><link>https://pype.dev</link><description>my mental data-lake</description><pubDate>Mon, 06 May 2024 11:57:07 GMT</pubDate><lastBuildDate>Sat, 25 Jan 2025 19:52:49 GMT</lastBuildDate><generator>marmite</generator><image><url>https://pype.dev/media/og-02.png</url><title></title><link></link></image><item><title>Customize K9s</title><link>https://pype.dev/customize-k9s.html</link><author>nicpayne</author><category>cli</category><category>homelab</category><category>tech</category><guid>https://pype.dev/customize-k9s.html</guid><pubDate>Mon, 06 May 2024 11:57:07 GMT</pubDate><source url="https://pype.dev">tag-cli</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>To customize k9s use the skins from catppuccin or the ones k9s supplies</p>
<pre><code class="language-bash">OUT=&quot;${XDG_CONFIG_HOME:-$HOME/.config}/k9s/skins&quot;
mkdir -p &quot;$OUT&quot;
curl -L https://github.com/catppuccin/k9s/archive/main.tar.gz | tar xz -C &quot;$OUT&quot; --strip-components=2 k9s-main/dist
</code></pre>
<p>Then edit your k9s config</p>
<pre><code># ~/.config/k9s/config.yml
k9s:
  ui:
    skin: catppuccin-mocha
    # ...or another flavor:
    # skin: catppuccin-macchiato
    # skin: catppuccin-frappe
    # skin: catppuccin-latte

    # ...or the transparent variants:
    # skin: catppuccin-mocha-transparent
    # skin: catppuccin-macchiato-transparent
    # skin: catppuccin-frappe-transparent
    # skin: catppuccin-latte-transparent
</code></pre>
<p>Other k9s skins are available <a href="https://github.com/derailed/k9s/tree/master/skins">here</a></p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Git fetch failing - check your config</title><link>https://pype.dev/git-fetch-failing-check-your-config.html</link><author>nicpayne</author><category>cli</category><category>data</category><category>tech</category><guid>https://pype.dev/git-fetch-failing-check-your-config.html</guid><pubDate>Thu, 18 Apr 2024 08:32:33 GMT</pubDate><source url="https://pype.dev">tag-cli</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>I started deploying a website to Cloudflare on a branch called <code>pages</code>. Similar to one of the GH Pages deployment patterns. But when my CI was pushing the branch I couldn't see it locally...</p>
<p><code>git fetch -a</code> wasn't pulling any new branches, and <code>git branch -a</code> was only showing my development and main branches at the remote... so what gives?</p>
<p>I checked my git config, and to this moment I have no idea how this happened but check out my fetch config:</p>
<pre><code>git config --get remote.origin.fetch
+refs/tags/*:refs/tags/*
</code></pre>
<p>So to fix this:</p>
<pre><code>git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'
</code></pre>
<p>Now <code>git fetch -a</code> works again</p>
<pre><code>&gt; git fetch -a

From github.com:DigitalHarbor7/DigitalHarbor
   357a28a..969b027  develop    -&gt; origin/develop
   c052ac9..6d40210  main       -&gt; origin/main
 * [new branch]      pages      -&gt; origin/pages
</code></pre>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Git repo specific SSH Key!</title><link>https://pype.dev/git-repo-specific-ssh-key.html</link><author>nicpayne</author><category>cli</category><category>homelab</category><category>tech</category><guid>https://pype.dev/git-repo-specific-ssh-key.html</guid><pubDate>Thu, 04 Jan 2024 15:42:15 GMT</pubDate><source url="https://pype.dev">tag-cli</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>git config --add --local core.sshCommand 'ssh -i &lt;&lt;&lt;PATH_TO_SSH_KEY&gt;&gt;&gt;'</p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Convert Word Doc to PDF with Headless Libreoffice</title><link>https://pype.dev/convert-word-doc-to-pdf-with-headless-libreoffice.html</link><author>nicpayne</author><category>linux</category><category>cli</category><category>tech</category><guid>https://pype.dev/convert-word-doc-to-pdf-with-headless-libreoffice.html</guid><pubDate>Thu, 09 Mar 2023 06:48:38 GMT</pubDate><source url="https://pype.dev">tag-cli</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>I've been using paperless-ngx to manage all my documents, but every once in a while I'll get a <code>.docx</code> file to deal with...</p>
<p>Turns out Libreoffice has a headless mode a <code>pdf</code> converter built-in!</p>
<pre><code class="language-Bash">libreoffice --headless --convert-to pdf /path/to/file.docx --outdir /path/to/output/directory
</code></pre>
<blockquote>
<p>Note that <code>--outdir</code> is in fact a directory, not the path to a file</p>
</blockquote>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>FFMPEG 10-bit videos to 8-bit</title><link>https://pype.dev/ffmpeg-10-bit-videos-to-8-bit.html</link><author>nicpayne</author><category>cli</category><category>homelab</category><category>tech</category><guid>https://pype.dev/ffmpeg-10-bit-videos-to-8-bit.html</guid><pubDate>Mon, 16 Jan 2023 13:15:53 GMT</pubDate><source url="https://pype.dev">tag-cli</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p><code>ffmpeg -i input.mp4 -map 0 -c:v libx264 -vf format=yuv420p -c:a copy output.mp4</code></p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Use non-standard named ssh keys with github</title><link>https://pype.dev/use-non-standard-named-ssh-keys-with-github.html</link><author>nicpayne</author><category>linux</category><category>cli</category><category>tech</category><guid>https://pype.dev/use-non-standard-named-ssh-keys-with-github.html</guid><pubDate>Tue, 03 Jan 2023 08:34:50 GMT</pubDate><source url="https://pype.dev">tag-cli</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>I was getting <code>(publickey denied)</code> when trying to push to GH using ssh. When I
tested the connection I saw that a bunch of keys in ``~/.ssh/ were being
attempted</p>
<pre><code class="language-console">✗ ssh git@github.com -vv

...

debug1: Will attempt key: /home/nic/.ssh/id_rsa 
debug1: Will attempt key: /home/nic/.ssh/id_ecdsa 
debug1: Will attempt key: /home/nic/.ssh/id_ecdsa_sk 
debug1: Will attempt key: /home/nic/.ssh/id_ed25519 
debug1: Will attempt key: /home/nic/.ssh/id_ed25519_sk 
debug1: Will attempt key: /home/nic/.ssh/id_xmss 
debug1: Will attempt key: /home/nic/.ssh/id_dsa 

...

debug1: No more authentication methods to try.
git@github.com: Permission denied (publickey).

</code></pre>
<p>None of those were the key I setup with GH. So I added an entry
into <code>~/.ssh/config</code>:</p>
<pre><code class="language-text">Host
github.com
User git
Port 22
Hostname github.com
IdentityFile ~/.ssh/my_custom_github_key
TCPKeepAlive yes
IdentitiesOnly yes 

</code></pre>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Modal Labs</title><link>https://pype.dev/modal-labs.html</link><author>nicpayne</author><category>python</category><category>cli</category><category>tech</category><guid>https://pype.dev/modal-labs.html</guid><pubDate>Wed, 28 Dec 2022 21:01:52 GMT</pubDate><source url="https://pype.dev">tag-cli</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>Playing around with Modal Labs</p>
<p>One of the first things I tried was a regular cron job...</p>
<pre><code class="language-python">@stub.function(
    schedule=modal.Period(minutes=59), secret=modal.Secret.from_name(&quot;my-dummy-secret&quot;)
)
def say_hi():
    now = time.ctime()
    secret = os.environ.get(&quot;dummy-secret&quot;)
    print(f&quot;Hello {os.environ.get('USER', 'Rodney')} at {now}&quot;)
    print(f&quot;{secret=}&quot;)

</code></pre>
<p>This can get deployed with <code>modal deploy --name &lt;app name&gt; &lt;path to .py file with the stub and function defined in it&gt; </code></p>
<p>This function gets deployed as an app that I conveniently call <code>say_hi</code> (as far
as I can tell the app name can be anything - as I add functions to this same
app and deploy with the same name to get a new version)</p>
<p>Notice that this also is an example of giving access to a secret - defined in the Modal Labs dashboard</p>
<p>We can take a look at the apps running at <a href="https://modal.com/apps">https://modal.com/apps</a></p>
<p>I then added another function to experiment with custom container images and
saw then that Modal will just slap a new version on anything provisioned with
the same name (intuitive enough for sure) so when I add functions to my .py
script and run <code>modal deploy --name say_hi myscript.py</code> over and over, the app
called <code>say_hi</code> in the Modal apps dashboard just gets a new version</p>
<p>This means I can spin up several instances of functionally the same app but with different names/versions etc...
Q: Maybe there's gitops or policy stuff builtin to app names then?</p>
<p>I needed to take down an app I deployed as a duplicate but you don't stop apps
by name, you stop them by an id... see below</p>
<pre><code class="language-console">
modal-sandbox/modal_sandbox   main   ×1  ×9 via   v3.10.6(modal-sandbox)
✗ modal app stop --help

 Usage: modal app stop [OPTIONS] APP_ID

 Stop an app.

╭─ Arguments ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│ *    app_id      TEXT  [default: None] [required]                                                                                                │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
╭─ Options ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│ --help          Show this message and exit.                                                                                                      │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯


modal-sandbox/modal_sandbox   main   ×1  ×9 via   v3.10.6(modal-sandbox)
❯ modal app list
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ App ID                    ┃ Description         ┃ State    ┃ Creation time             ┃ Stop time                 ┃
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
│ ap-lzy1AAuVy7POFkUcDKRxpQ │ print_info          │ deployed │ 2022-12-28 20:59:07-06:00 │                           │
│ ap-qYjE45dciqgT3C3CpNp3RL │ say_hi              │ deployed │ 2022-12-28 19:49:22-06:00 │                           │
│ ap-X7FYneUeYV5IKHcyirSb87 │ link-scraper        │ stopped  │ 2022-12-28 15:39:02-06:00 │ 2022-12-28 15:39:04-06:00 │
│ ap-UOXTUU4uSRx2UZypJOcAsk │ example-get-started │ stopped  │ 2022-12-28 15:17:47-06:00 │ 2022-12-28 15:17:49-06:00 │
└───────────────────────────┴─────────────────────┴──────────┴───────────────────────────┴───────────────────────────┘

modal-sandbox/modal_sandbox   main   ×1  ×9 via   v3.10.6(modal-sandbox)
❯ modal app stop ap-lzy1AAuVy7POFkUcDKRxpQ

</code></pre>
<h1><a href="#git-warning" aria-hidden="true" class="anchor" id="git-warning"></a>Git warning!</h1>
<p>I ran <code>modal deploy ...</code> after comitting some stuff I wanted to try BUT I had
changes in my file I didn't want to deploy... some git safety would be nice for
deployment!</p>
<blockquote>
<p>git stash &amp;&amp; modal deploy .. &amp;&amp; git stash pop</p>
</blockquote>
<p>Question for Modal team - in my modal sandbox repo at commit:</p>
<pre><code>aab6162 (HEAD -&gt; main) HEAD@{1}: commit: print base version of my own image to prove it to me
 1 file changed, 2 insertions(+)

</code></pre>
<p>An environment variable, <code>BASE_VERSION</code> that I expect to be in my base image
was not available to the python function in my Modal app... hopefully the log
is still
<a href="https://modal.com/logs/ap-qYjE45dciqgT3C3CpNp3RL?functionId=fu-rOt31ShRE1W1CQfuf02fsq&amp;taskId=ta-dm8BfiblvFLwVIQyt75YC2&amp;inputId=in-n64klEFrLtbcm2BiykJEvW">here</a></p>
<h2><a href="#github-actions" aria-hidden="true" class="anchor" id="github-actions"></a>GitHub Actions</h2>
<p>I think it'd be easy to deploy from GH actions... just need an API Key...</p>
<h1><a href="#deployment" aria-hidden="true" class="anchor" id="deployment"></a>Deployment</h1>
<p>Without gitops it's already ahrd to manage my versions... need to get that built in either to github or locally sooooon</p>
<p>Nomad?? :D</p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Pipe to a pager to preserve console output in SSH session</title><link>https://pype.dev/pipe-to-a-pager-to-preserve-console-output-in-ssh-session.html</link><author>nicpayne</author><category>linux</category><category>cli</category><category>tech</category><guid>https://pype.dev/pipe-to-a-pager-to-preserve-console-output-in-ssh-session.html</guid><pubDate>Sun, 18 Dec 2022 15:04:02 GMT</pubDate><source url="https://pype.dev">tag-cli</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>I'm playing with my ansible playbook in a remote tmux session, and I'm no wiz
so I don't know the ins and outs, but I can't scroll up to get any console log
output that's not already visible on my screen. So I'm starting to end my
commands with <code> | less</code> so I can page through the console output!</p>
<p><code>ansible-playbook plays.yml -v --tags mytag | less</code></p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Call basicConfig to get Python log messages in iPython</title><link>https://pype.dev/call-basicconfig-to-get-python-log-messages-in-ipython.html</link><author>nicpayne</author><category>python</category><category>cli</category><category>tech</category><guid>https://pype.dev/call-basicconfig-to-get-python-log-messages-in-ipython.html</guid><pubDate>Sat, 10 Dec 2022 14:04:23 GMT</pubDate><source url="https://pype.dev">tag-cli</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<h1><a href="#logging-instead-of-printing" aria-hidden="true" class="anchor" id="logging-instead-of-printing"></a>Logging instead of printing</h1>
<p>I am trying to adopt <code>logger.debug</code> instead of <code>print</code> but ran into a confusing
thing in ipython during Advent of Code... I riddled by script with
<code>logger.debug</code> (yes after setting <code>logging.setLevel('DEBUG')</code>) but in ipython
none of my log messages showed up!</p>
<pre><code class="language-python">import logging

logger = logging.getLogger(__name__)
logger.setLevel(&quot;DEBUG&quot;)

</code></pre>
<p>Turns out what I was missing was a call to <code>basicConfig</code></p>
<pre><code class="language-python">import logging

# forget this and your messages are in the ether! or at least not seen in ipython...
logging.basicConfig()

logger = logging.getLogger(__name__)
logger.setLevel(&quot;DEBUG&quot;)
</code></pre>
<h1><a href="#bonus" aria-hidden="true" class="anchor" id="bonus"></a>Bonus</h1>
<p>Want your new messages to show up while iterating on something without killing
the ipython kernel?</p>
<pre><code class="language-python">from importlib import reload
reload(logging) # to make sure you get new log messages you add while developing!

</code></pre>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Make a series of directories fast!</title><link>https://pype.dev/make-a-series-of-directories-fast.html</link><author>nicpayne</author><category>linux</category><category>cli</category><category>tech</category><guid>https://pype.dev/make-a-series-of-directories-fast.html</guid><pubDate>Thu, 10 Nov 2022 15:27:50 GMT</pubDate><source url="https://pype.dev">tag-cli</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>mkdir s{1..10} will make directories s1, s2, ... s10 in one command!</p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Limit zfs list to avoid docker vomit</title><link>https://pype.dev/limit-zfs-list-to-avoid-docker-vomit.html</link><author>nicpayne</author><category>zfs</category><category>cli</category><category>tech</category><guid>https://pype.dev/limit-zfs-list-to-avoid-docker-vomit.html</guid><pubDate>Thu, 20 Oct 2022 06:39:18 GMT</pubDate><source url="https://pype.dev">tag-cli</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>zfs list has a flag -r, but if you use zfs driver for docker then you'll get
flooded with every docker volume in the world. zfs list -r -d N will limit the
dept of the print out, so zfs list -r -d 2 gives me tank, tank/encrypted,
tank/encrypted/docker -&gt; but then I don't see all the continer volumes</p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Use the right lspsage, you dope!</title><link>https://pype.dev/use-the-right-lspsage-you-dope.html</link><author>nicpayne</author><category>vim</category><category>cli</category><guid>https://pype.dev/use-the-right-lspsage-you-dope.html</guid><pubDate>Fri, 14 Oct 2022 19:41:44 GMT</pubDate><source url="https://pype.dev">tag-cli</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>If you think glepnir/lspsaga.nvim config will work with tali5/lspsaga.nvim installed... you're in for a rude awakening. Double check your forks folks!</p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Suddenly SSH requires a password</title><link>https://pype.dev/suddenly-ssh-requires-a-password.html</link><author>nicpayne</author><category>linux</category><category>cli</category><category>tech</category><guid>https://pype.dev/suddenly-ssh-requires-a-password.html</guid><pubDate>Fri, 07 Oct 2022 11:14:37 GMT</pubDate><source url="https://pype.dev">tag-cli</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>ssh -v -i ~/.ssh/id_rsa nic@hogwarts</p>
<p>THen we can look at print outs</p>
<p>cat /var/log/auth.log  also showed me that I had too wide permissions on files in ~/.ssh -&gt; probably changed from an rsync job</p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Check Your BIOS Version On Ubuntu</title><link>https://pype.dev/check-your-bios-version-on-ubuntu.html</link><author>nicpayne</author><category>linux</category><category>cli</category><category>tech</category><guid>https://pype.dev/check-your-bios-version-on-ubuntu.html</guid><pubDate>Sun, 02 Oct 2022 18:21:58 GMT</pubDate><source url="https://pype.dev">tag-cli</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>sudo dmidecode -s bios-version</p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Destroying Tmux sessions with fzf</title><link>https://pype.dev/destroying-tmux-sessions-with-fzf.html</link><author>nicpayne</author><category>cli</category><category>bash</category><category>tech</category><guid>https://pype.dev/destroying-tmux-sessions-with-fzf.html</guid><pubDate>Thu, 15 Sep 2022 10:27:58 GMT</pubDate><source url="https://pype.dev">tag-cli</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>I use Tmux and Vim for most of my workflow, but I end up with a lot of dangling
tmux sessions that dont' really need to persist... but killing them one at a
time is a pain so I wrote a little script-kitty nonsense to pipe multiple
choices from fzf into <code>tmux kill-session</code></p>
<p>I defined a little function in my <code>.zshrc</code></p>
<pre><code class="language-bash">destroy() { 
    tmux list-sessions -F '#{session_name}' | fzf -m | xargs -d $'\n' sh -c 'echo &quot;killing $0&quot;; tmux kill-session -t &quot;$0&quot;; for arg;do echo &quot;killing $arg&quot;;tmux kill-session -t &quot;$arg&quot;; done'
}
bindkey -s '^d' 'destroy \n'
</code></pre>
<p><code>tmux list-sessions -F '#{session_name}' </code> prints all my active tmux sessions to the console with the format of just their name</p>
<pre><code class="language-bash">pype.dev   main   ×1 via   v3.8.11(pype.dev)  on  (us-east-1) proxy
❯ tmux list-sessions -F '#{session_name}'
session-01
session-02
session-03
...
</code></pre>
<p>Pipe that to <code>fzf -m</code> to allow multiple choices to be made using tab</p>
<p>Then the nasty bit in <code>xargs</code>... I echo <code>killing @0</code> and <code>killing $arg</code> because the <code>sh -c</code> passes the first tmux session name to <code>@0</code> (it's just what bash does) and then the rest get handled in the for loop.</p>
<p>Basically then I get an fzf list to choose multiple tmux sessions to destroy to clean up some RAM!</p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item></channel></rss>