{
  "version": "https://jsonfeed.org/version/1",
  "title": "Pype.dev",
  "home_page_url": "https://pype.dev",
  "feed_url": "https://pype.dev/tag-vim.json",
  "description": "my mental data-lake",
  "items": [
    {
      "id": "https://pype.dev/suda-vim-for-sudo-access-to-files.html",
      "url": "https://pype.dev/suda-vim-for-sudo-access-to-files.html",
      "title": "suda.vim for sudo access to files",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>I regularly need to edit system config files - take /etc/sanoid/sanoid.conf as\nan example... I'll want to play with something but if I don't start Neovim as\nroot then I get in trouble making edits I can't save! So\n<a href=\"https://github.com/lambdalisue/suda.vim\">suda.vim</a> gives me\n<code>:SudaWrite</code> which let's me write that buffer with sudo privileges even though\nI'm Neovim is running with my login user!</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-12-21T09:45:34-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "vim",
        "linux",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/new-lines-in-markdown-tables.html",
      "url": "https://pype.dev/new-lines-in-markdown-tables.html",
      "title": "New lines in Markdown tables",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>I wanted to break down some long lines in a Markdown table cell to make it look\nnicer on my blog but \\n didn't do anything for me... turns out <br/> is the\nmagic sauce</p>\n<table>\n<thead>\n<tr>\n<th><em>Column 1</em></th>\n<th><em>Column 2</em></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Key</td>\n<td>Doggo ipsum many pats. Borkdrive borking doggo doing me a frighten doggorino, noodle horse heckin. what a nice floof. Pupper borking doggo you are doing me a frighten, much ruin diet.</td>\n</tr>\n<tr>\n<td>---</td>\n<td>---</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th><em>Column 1</em></th>\n<th><em>Column 2</em></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Key</td>\n<td>Doggo ipsum many pats. <br/> Borkdrive borking doggo doing me a frighten doggorino, noodle horse heckin. <br/> what a nice floof. <br/> Pupper borking doggo you are doing me a frighten, much ruin diet.</td>\n</tr>\n<tr>\n<td>---</td>\n<td>---</td>\n</tr>\n</tbody>\n</table>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-11-25T13:35:05-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "vim",
        "webdev",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/description-of-my-proposed-vimconf-2022-talk.html",
      "url": "https://pype.dev/description-of-my-proposed-vimconf-2022-talk.html",
      "title": "Description of my proposed vimconf 2022 talk",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>Switching to Vim opened a whole new world to me for interacting with a computer\nand for getting things done. Before I adopted Vim I used GUIs for everything\nbecause I thought that's how it had to be done... Notes in OneNote, code using\na GUI editor, different notes in TiddlyWiki, slides for work in PowerPoint,\nslides for church using Logos, etc... Adopting Vim allowed me to disconnect a\nspecific tool from the problem that tool is solving - because usually I just\nneed to write text (notes, code, slides, etc.). Now, very nearly everything I\ndo is from a text-based and git-based workflow... I put all my notes on\nbasically anything just in my blog, which is all markdown and deployed to GH\nwith Markata on every push (living dangerously pushing to main) - and that's\nall done easily from Vim with nice syntax highlighting, fast response,\nintegrated git-plugins, etc.. I keep project-specific task lists just in\nmarkdown files and I have Vim/tmux shortcuts to quickly add todos for any\nproject (todo list is done with markata todoui) and I can get there fast\nbecause my Vim workflow dovetails with Tmux nicely. Also I can pull that list\nup right from the terminal, which I'm already in because Vim.... Vim also\npushed me into the cli more - because Vim is so easily extended with cli tools\nand I'm already in the terminal... The builtin functionality also made things\nmake more sense - no more right-click, find &quot;refactor all&quot; or &quot;rename symbol&quot;\n(for some stupid reason)... Vim find-replace is so intuitive and if I need it\nextended then I learned what sed was because of Vim. Moving quickly in Vim also\nenables me to do my job incredibly fast because I hop into several projects a\nday in a coaching role - if I was bound by GUIs I'd be waiting forever for\nstartup, would lose which GUI instance was which project, etc... Being in the\nterminal also made Tmux a trivial choice - now I have 90 tmux sessions, all\nnamed appropriately, ready for me to jump back to and all while keeping the\nmajority of RAM still free for Chrome. Vim as my IDE also forced me to learn\nway more about Python (I'm a python developer primarily), how LSP works, how to\nconfigure a development environment, etc... things I took for granted in my GUI\nworkflows, or never knew, or worse - thought I knew but deeply misunderstood.\nNow that I understand them better, I can coach my peers more effectively even\nif they are still in a GUI-based ecosystem.</p>\n<p>Basically, (Neo)Vim actually did change my life and I'm really thankful for it\n(maybe that should be the title?)</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-11-12T19:39:19-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "linux",
        "vim",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/case-insensitive-search-in-vim.html",
      "url": "https://pype.dev/case-insensitive-search-in-vim.html",
      "title": "Case-insensitive search in Vim",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>/mysearch\\c will match mysearch, MYSEARCH, mYSeArCh...</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-10-21T06:40:21-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "vim",
        "vim",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/case-insensitive-search-in-vim.html",
      "url": "https://pype.dev/case-insensitive-search-in-vim.html",
      "title": "Case-insensitive search in Vim",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>/mysearch\\c will match mysearch, MYSEARCH, mYSeArCh...</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-10-21T06:40:21-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "vim",
        "vim",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/use-the-right-lspsage-you-dope.html",
      "url": "https://pype.dev/use-the-right-lspsage-you-dope.html",
      "title": "Use the right lspsage, you dope!",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>If you think glepnir/lspsaga.nvim config will work with tali5/lspsaga.nvim installed... you're in for a rude awakening. Double check your forks folks!</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-10-14T19:41:44-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "vim",
        "cli"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/playing-with-mdformat.html",
      "url": "https://pype.dev/playing-with-mdformat.html",
      "title": "Playing with mdformat",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<pre><code class=\"language-python\">import this; print(this); print(&quot;what is taking so long black!!&quot;)\n</code></pre>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-08-23T06:56:15-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "python",
        "vim",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/see-git-history-about-one-file.html",
      "url": "https://pype.dev/see-git-history-about-one-file.html",
      "title": "See git history about one file",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>In vim <code>G clog %</code> does a <code>git clog {current file}</code>. You get every commit that the target file is apart of (so there might be info in those commits unrelated)</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-05-19T06:43:32-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "cli",
        "vim",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/plug-snapshot.html",
      "url": "https://pype.dev/plug-snapshot.html",
      "title": "Plug Snapshot!",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>:PlugSnapshot, :w ~/dotfiles/nvim/snapshot.vim... keep your config safe with git!</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-05-17T15:45:49-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "vim",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/filepath-completion-in-neovim.html",
      "url": "https://pype.dev/filepath-completion-in-neovim.html",
      "title": "Filepath Completion in Neovim",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>I've had <code>Plug 'hrsh7th/cmp-path'</code> in my plugins for ever but didn't notice\nuntil recently that I wasn't getting any filepath completion in vim!</p>\n<p><u>Fuller setup instructions below the TLDR</u></p>\n<h1><a href=\"#tldr\" aria-hidden=\"true\" class=\"anchor\" id=\"tldr\"></a>TL;DR</h1>\n<p>Turns out I need to not be a dope and configure nvim-cmp to actually use it...</p>\n<pre><code class=\"language-lua\">local cmp = require'cmp'\n\ncmp.setup({\n    -- removed rest of setup - see the rest in my dotfiles\n  sources = cmp.config.sources({\n    { name = 'path' },  -- This needs to be here!\n    })\n})\n</code></pre>\n<h1><a href=\"#my-setup\" aria-hidden=\"true\" class=\"anchor\" id=\"my-setup\"></a>My Setup</h1>\n<p>For the sake of completeness here is how I currently (May 2022) configure completion in Neovim usin <code>nvim-cmp</code></p>\n<h2><a href=\"#plugins\" aria-hidden=\"true\" class=\"anchor\" id=\"plugins\"></a>Plugins</h2>\n<p>I keep all my plugins in <code>plugins.vim</code></p>\n<pre><code class=\"language-vim\">call plug#begin(s:plug_dir)\nPlug 'neovim/nvim-lspconfig'\nPlug 'hrsh7th/cmp-nvim-lsp'\nPlug 'hrsh7th/cmp-buffer'\nPlug 'hrsh7th/cmp-path'\nPlug 'hrsh7th/cmp-cmdline'\nPlug 'hrsh7th/nvim-cmp'\n\n&quot; For ultisnips users.\n&lt;!-- &quot; Plug 'SirVer/ultisnips' --&gt;\n&lt;!-- &quot; Plug 'quangnguyen30192/cmp-nvim-ultisnips' --&gt;\n\ncall plug#end()\n\n</code></pre>\n<h2><a href=\"#vim-settings\" aria-hidden=\"true\" class=\"anchor\" id=\"vim-settings\"></a>Vim Settings</h2>\n<p>My vim settings are also kept in their own file, <code>settings.vim</code></p>\n<pre><code class=\"language-vim\">\nset completeopt=menu,menuone,noselect\n\n</code></pre>\n<h2><a href=\"#nvim-cmp-configuration\" aria-hidden=\"true\" class=\"anchor\" id=\"nvim-cmp-configuration\"></a>nvim-cmp configuration</h2>\n<p>I have a <code>cmp.lua</code> file that gets sourced in <code>init.lua</code> (file structure explained below) for configuring cmp.</p>\n<pre><code class=\"language-lua\">\n  -- Setup nvim-cmp.\nlocal cmp = require'cmp'\n\ncmp.setup({\n  snippet = {\n    -- REQUIRED - you must specify a snippet engine\n    expand = function(args)\n      -- For `ultisnips` user.\n      vim.fn[&quot;UltiSnips#Anon&quot;](args.body)\n    end,\n  },\n  window = {\n      completion = cmp.config.window.bordered(),\n  },\n  mapping = {\n    ['&lt;Down&gt;'] = cmp.mapping.select_next_item({ behavior = cmp.SelectBehavior.Select }),\n    ['&lt;Up&gt;'] = cmp.mapping.select_prev_item({ behavior = cmp.SelectBehavior.Select }),\n    ['&lt;C-d&gt;'] = cmp.mapping.scroll_docs(-4),\n    ['&lt;C-f&gt;'] = cmp.mapping.scroll_docs(4),\n    ['&lt;C-Space&gt;'] = cmp.mapping.complete(),\n    ['&lt;C-e&gt;'] = cmp.mapping.close(),\n    ['&lt;Tab&gt;'] = cmp.mapping(cmp.mapping.select_next_item(), { 'i', 's' }),\n    ['&lt;CR&gt;'] = cmp.mapping.confirm({\n      behavior = cmp.ConfirmBehavior.Replace,\n      select = true,\n    })\n  },\n  sources = cmp.config.sources({\n    { name = 'nvim_lsp' },\n    { name = 'ultisnips' },\n    { name = 'buffer' },\n    { name = 'path' },\n    { name = 'tmux' },\n    })\n})\n\n</code></pre>\n<p>The <code>sources</code> section is what was key for this post...</p>\n<h1><a href=\"#piecing-it-together\" aria-hidden=\"true\" class=\"anchor\" id=\"piecing-it-together\"></a>Piecing it together!</h1>\n<p>My <code>init.vim</code> sources plugins and then settings and then finally calls <code>init.lua</code>.\n<code>init.lua</code> sources my <code>cmp.lua</code> file and BANG! auto-completion.</p>\n<h2><a href=\"#more-sources\" aria-hidden=\"true\" class=\"anchor\" id=\"more-sources\"></a>More sources</h2>\n<p>hrsh7th's wiki for <code>nvim-cmp</code> is <a href=\"https://github.com/hrsh7th/nvim-cmp/wiki/List-of-sources\">here</a> and has example configs as well as a list of sources...</p>\n<p><u>Don't forget to configure and not just install!</u></p>\n<p><a href=\"https://github.com/nicpayne713/dotfiles\">my dotfiles</a></p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-05-17T14:03:27-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "vim",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/vim-spell-check.html",
      "url": "https://pype.dev/vim-spell-check.html",
      "title": "Vim-Spell-Check",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p><u>Did you know you can spell check in Vim?!</u></p>\n<!DOCTYPE html>\n<html>\n   <head>\n      <title>Vim Spell check</title>\n   </head>\n   <body>\n      <h3>Without...</h3>\n      <p>Here is a missspelled word.</p>\n<pre><code>  &lt;h3&gt;With!&lt;/h3&gt;\n  &lt;p&gt;Here is a &lt;u&gt;missspelled&lt;/u&gt; word.&lt;/p&gt;\n</code></pre>\n   </body>\n</html>\n<h2><a href=\"#what-is-this-magic\" aria-hidden=\"true\" class=\"anchor\" id=\"what-is-this-magic\"></a>What is this magic???</h2>\n<p><code>set: spell spelllang=en_us</code></p>\n<h2><a href=\"#custom-words\" aria-hidden=\"true\" class=\"anchor\" id=\"custom-words\"></a>Custom words?</h2>\n<p>Sometimes there's things that are words to you but not the default spell checker...</p>\n<p>Common example: package names!</p>\n<p><code>plotly</code>, <code>streamlit</code>, <code>psutil</code>, etc etc...</p>\n<p>You can easily add these to your vim config by hitting <code>zw</code> ontop of the word!</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-04-01T00:00:00-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "vim",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/vim-auto-space.html",
      "url": "https://pype.dev/vim-auto-space.html",
      "title": "Vim-Auto-Space",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>I ran into an issue where I had some copy-pasta markdown tables in a docstring but the generator I used to make the table gave me tabs instead of spaces in odd places which caused <code>black</code> to throw a fit.\nInstead of manually changing all tabs to spaes, or trying some goofy <code>:%s/&lt;magic tab character&gt;/&lt;%20 maybe?&gt;/g</code> I learned that Vim has my back...</p>\n<pre><code>:retab\n</code></pre>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-03-04T00:00:00-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "vim",
        "tech"
      ],
      "language": "en"
    }
  ]
}