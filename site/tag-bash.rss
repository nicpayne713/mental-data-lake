<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Pype.dev</title><link>https://pype.dev</link><description>my mental data-lake</description><pubDate>Wed, 21 Sep 2022 11:26:02 GMT</pubDate><lastBuildDate>Wed, 04 Dec 2024 18:54:42 GMT</lastBuildDate><generator>marmite</generator><item><title>Append string to list of files with xarg</title><link>https://pype.dev/append-string-to-list-of-files-with-xarg.html</link><author>nicpayne</author><category>linux</category><category>bash</category><guid>https://pype.dev/append-string-to-list-of-files-with-xarg.html</guid><pubDate>Wed, 21 Sep 2022 11:26:02 GMT</pubDate><source url="https://pype.dev">tag-bash</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>❯ find . -name &quot;requirements.in&quot; -print0 | xargs -0 sh -c 'for arg in &quot;$@&quot;; do echo &quot;awscli&quot; &gt;&gt;&quot;$arg&quot;; done'</p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Destroying Tmux sessions with fzf</title><link>https://pype.dev/destroying-tmux-sessions-with-fzf.html</link><author>nicpayne</author><category>cli</category><category>bash</category><category>tech</category><guid>https://pype.dev/destroying-tmux-sessions-with-fzf.html</guid><pubDate>Thu, 15 Sep 2022 10:27:58 GMT</pubDate><source url="https://pype.dev">tag-bash</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>I use Tmux and Vim for most of my workflow, but I end up with a lot of dangling
tmux sessions that dont' really need to persist... but killing them one at a
time is a pain so I wrote a little script-kitty nonsense to pipe multiple
choices from fzf into <code>tmux kill-session</code></p>
<p>I defined a little function in my <code>.zshrc</code></p>
<pre><code class="language-bash">destroy() { 
    tmux list-sessions -F '#{session_name}' | fzf -m | xargs -d $'\n' sh -c 'echo &quot;killing $0&quot;; tmux kill-session -t &quot;$0&quot;; for arg;do echo &quot;killing $arg&quot;;tmux kill-session -t &quot;$arg&quot;; done'
}
bindkey -s '^d' 'destroy \n'
</code></pre>
<p><code>tmux list-sessions -F '#{session_name}' </code> prints all my active tmux sessions to the console with the format of just their name</p>
<pre><code class="language-bash">pype.dev   main   ×1 via   v3.8.11(pype.dev)  on  (us-east-1) proxy
❯ tmux list-sessions -F '#{session_name}'
session-01
session-02
session-03
...
</code></pre>
<p>Pipe that to <code>fzf -m</code> to allow multiple choices to be made using tab</p>
<p>Then the nasty bit in <code>xargs</code>... I echo <code>killing @0</code> and <code>killing $arg</code> because the <code>sh -c</code> passes the first tmux session name to <code>@0</code> (it's just what bash does) and then the rest get handled in the for loop.</p>
<p>Basically then I get an fzf list to choose multiple tmux sessions to destroy to clean up some RAM!</p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Remove ZFS Dataset Specific Snapshots</title><link>https://pype.dev/remove-zfs-dataset-specific-snapshots.html</link><author>nicpayne</author><category>linux</category><category>zfs</category><category>cli</category><category>bash</category><category>homelab</category><category>tech</category><guid>https://pype.dev/remove-zfs-dataset-specific-snapshots.html</guid><pubDate>Thu, 19 May 2022 05:49:16 GMT</pubDate><source url="https://pype.dev">tag-bash</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>I started my homelab journey being super naive about ZFS and how to manage the
filesystem... that bit me in the butt when transfering a ton of files out of
folders and into datasets because ZFS is copy on write so I was essentially
duplicating my storage until I got a hair smarter about removing files after
they're moved (rsync --remove-source-file ftw). But I had a ton of snapshots of
child datasets with a ton of data that I just never will need, so I learned
<code>zfs list -H -o name -t snapshot tank/dataset1/dataset2</code> will list just the
snapshots for dataset2 and if you pipe that into <code>xargs -n1 zfs destroy</code> then
you have a way to clear out some snapshots you don't need!</p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Stow</title><link>https://pype.dev/stow.html</link><author>nicpayne</author><category>bash</category><category>linux</category><category>tech</category><guid>https://pype.dev/stow.html</guid><pubDate>Fri, 04 Mar 2022 00:00:00 GMT</pubDate><source url="https://pype.dev">tag-bash</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>Stow is a great tool for managing dotfiles. My usage looks like cloning my dotfiles to my home directory, setting some environment variables via a script, then stowing relevant packages and boom my config is good to go...</p>
<pre><code class="language-bash">cd ~
git clone &lt;my dotfiles repo&gt;
cd dotfiles
# env variable stuff ignored here
stow zsh  # This will symlink my .zshrc file which is in ~/dotfiles/zsh to ~/.zshrc
</code></pre>
<p>By default stow will stow packages up one directory from the root directory.
In this example the root directory is <code>~/dotfiles</code> and the package is <code>zsh</code>.
So the files in the <code>zsh</code> package will symlinked into <code>~/</code>.</p>
<p><code>stow</code> makes it easy to share dotfiles across machines, or safely experiment with config changes while always being protected by <code>git</code> since your dotfiles are in a git repo!
...They are in a git repo... right?</p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Stow-Target</title><link>https://pype.dev/stow-target.html</link><author>nicpayne</author><category>bash</category><category>linux</category><category>tech</category><guid>https://pype.dev/stow-target.html</guid><pubDate>Fri, 04 Mar 2022 00:00:00 GMT</pubDate><source url="https://pype.dev">tag-bash</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>Check out <a href="stow.html">stow</a> for a brief introduction to <code>stow</code></p>
<p>What if I want to stow a package somewhere else?
Boom, that's where <code>-t</code> comes in...</p>
<p>Maybe I don't like having my <code>dotfiles</code> repo at <code>$HOME</code> and instead I want it in <code>~/git</code> or <code>~/personal</code> just to stay organized...
Well then I could have the same workflow except the <code>stow</code> command looks like this:</p>
<pre><code class="language-bash">stow zsh -t ~/
#or
stow zsh -t $HOME
</code></pre>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item></channel></rss>