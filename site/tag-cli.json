{
  "version": "https://jsonfeed.org/version/1",
  "title": "Pype.dev",
  "home_page_url": "https://pype.dev",
  "feed_url": "https://pype.dev/tag-cli.json",
  "description": "my mental data-lake",
  "items": [
    {
      "id": "https://pype.dev/customize-k9s.html",
      "url": "https://pype.dev/customize-k9s.html",
      "title": "Customize K9s",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>To customize k9s use the skins from catppuccin or the ones k9s supplies</p>\n<pre><code class=\"language-bash\">OUT=&quot;${XDG_CONFIG_HOME:-$HOME/.config}/k9s/skins&quot;\nmkdir -p &quot;$OUT&quot;\ncurl -L https://github.com/catppuccin/k9s/archive/main.tar.gz | tar xz -C &quot;$OUT&quot; --strip-components=2 k9s-main/dist\n</code></pre>\n<p>Then edit your k9s config</p>\n<pre><code># ~/.config/k9s/config.yml\nk9s:\n  ui:\n    skin: catppuccin-mocha\n    # ...or another flavor:\n    # skin: catppuccin-macchiato\n    # skin: catppuccin-frappe\n    # skin: catppuccin-latte\n\n    # ...or the transparent variants:\n    # skin: catppuccin-mocha-transparent\n    # skin: catppuccin-macchiato-transparent\n    # skin: catppuccin-frappe-transparent\n    # skin: catppuccin-latte-transparent\n</code></pre>\n<p>Other k9s skins are available <a href=\"https://github.com/derailed/k9s/tree/master/skins\">here</a></p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2024-05-06T11:57:07-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "cli",
        "homelab",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/git-fetch-failing-check-your-config.html",
      "url": "https://pype.dev/git-fetch-failing-check-your-config.html",
      "title": "Git fetch failing - check your config",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>I started deploying a website to Cloudflare on a branch called <code>pages</code>. Similar to one of the GH Pages deployment patterns. But when my CI was pushing the branch I couldn't see it locally...</p>\n<p><code>git fetch -a</code> wasn't pulling any new branches, and <code>git branch -a</code> was only showing my development and main branches at the remote... so what gives?</p>\n<p>I checked my git config, and to this moment I have no idea how this happened but check out my fetch config:</p>\n<pre><code>git config --get remote.origin.fetch\n+refs/tags/*:refs/tags/*\n</code></pre>\n<p>So to fix this:</p>\n<pre><code>git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'\n</code></pre>\n<p>Now <code>git fetch -a</code> works again</p>\n<pre><code>&gt; git fetch -a\n\nFrom github.com:DigitalHarbor7/DigitalHarbor\n   357a28a..969b027  develop    -&gt; origin/develop\n   c052ac9..6d40210  main       -&gt; origin/main\n * [new branch]      pages      -&gt; origin/pages\n</code></pre>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2024-04-18T08:32:33-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "cli",
        "data",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/git-repo-specific-ssh-key.html",
      "url": "https://pype.dev/git-repo-specific-ssh-key.html",
      "title": "Git repo specific SSH Key!",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>git config --add --local core.sshCommand 'ssh -i &lt;&lt;&lt;PATH_TO_SSH_KEY&gt;&gt;&gt;'</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2024-01-04T15:42:15-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "cli",
        "homelab",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/convert-word-doc-to-pdf-with-headless-libreoffice.html",
      "url": "https://pype.dev/convert-word-doc-to-pdf-with-headless-libreoffice.html",
      "title": "Convert Word Doc to PDF with Headless Libreoffice",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>I've been using paperless-ngx to manage all my documents, but every once in a while I'll get a <code>.docx</code> file to deal with...</p>\n<p>Turns out Libreoffice has a headless mode a <code>pdf</code> converter built-in!</p>\n<pre><code class=\"language-Bash\">libreoffice --headless --convert-to pdf /path/to/file.docx --outdir /path/to/output/directory\n</code></pre>\n<blockquote>\n<p>Note that <code>--outdir</code> is in fact a directory, not the path to a file</p>\n</blockquote>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2023-03-09T06:48:38-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "linux",
        "cli",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/ffmpeg-10-bit-videos-to-8-bit.html",
      "url": "https://pype.dev/ffmpeg-10-bit-videos-to-8-bit.html",
      "title": "FFMPEG 10-bit videos to 8-bit",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p><code>ffmpeg -i input.mp4 -map 0 -c:v libx264 -vf format=yuv420p -c:a copy output.mp4</code></p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2023-01-16T13:15:53-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "cli",
        "homelab",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/use-non-standard-named-ssh-keys-with-github.html",
      "url": "https://pype.dev/use-non-standard-named-ssh-keys-with-github.html",
      "title": "Use non-standard named ssh keys with github",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>I was getting <code>(publickey denied)</code> when trying to push to GH using ssh. When I\ntested the connection I saw that a bunch of keys in ``~/.ssh/ were being\nattempted</p>\n<pre><code class=\"language-console\">✗ ssh git@github.com -vv\n\n...\n\ndebug1: Will attempt key: /home/nic/.ssh/id_rsa \ndebug1: Will attempt key: /home/nic/.ssh/id_ecdsa \ndebug1: Will attempt key: /home/nic/.ssh/id_ecdsa_sk \ndebug1: Will attempt key: /home/nic/.ssh/id_ed25519 \ndebug1: Will attempt key: /home/nic/.ssh/id_ed25519_sk \ndebug1: Will attempt key: /home/nic/.ssh/id_xmss \ndebug1: Will attempt key: /home/nic/.ssh/id_dsa \n\n...\n\ndebug1: No more authentication methods to try.\ngit@github.com: Permission denied (publickey).\n\n</code></pre>\n<p>None of those were the key I setup with GH. So I added an entry\ninto <code>~/.ssh/config</code>:</p>\n<pre><code class=\"language-text\">Host\ngithub.com\nUser git\nPort 22\nHostname github.com\nIdentityFile ~/.ssh/my_custom_github_key\nTCPKeepAlive yes\nIdentitiesOnly yes \n\n</code></pre>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2023-01-03T08:34:50-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "linux",
        "cli",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/modal-labs.html",
      "url": "https://pype.dev/modal-labs.html",
      "title": "Modal Labs",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>Playing around with Modal Labs</p>\n<p>One of the first things I tried was a regular cron job...</p>\n<pre><code class=\"language-python\">@stub.function(\n    schedule=modal.Period(minutes=59), secret=modal.Secret.from_name(&quot;my-dummy-secret&quot;)\n)\ndef say_hi():\n    now = time.ctime()\n    secret = os.environ.get(&quot;dummy-secret&quot;)\n    print(f&quot;Hello {os.environ.get('USER', 'Rodney')} at {now}&quot;)\n    print(f&quot;{secret=}&quot;)\n\n</code></pre>\n<p>This can get deployed with <code>modal deploy --name &lt;app name&gt; &lt;path to .py file with the stub and function defined in it&gt; </code></p>\n<p>This function gets deployed as an app that I conveniently call <code>say_hi</code> (as far\nas I can tell the app name can be anything - as I add functions to this same\napp and deploy with the same name to get a new version)</p>\n<p>Notice that this also is an example of giving access to a secret - defined in the Modal Labs dashboard</p>\n<p>We can take a look at the apps running at <a href=\"https://modal.com/apps\">https://modal.com/apps</a></p>\n<p>I then added another function to experiment with custom container images and\nsaw then that Modal will just slap a new version on anything provisioned with\nthe same name (intuitive enough for sure) so when I add functions to my .py\nscript and run <code>modal deploy --name say_hi myscript.py</code> over and over, the app\ncalled <code>say_hi</code> in the Modal apps dashboard just gets a new version</p>\n<p>This means I can spin up several instances of functionally the same app but with different names/versions etc...\nQ: Maybe there's gitops or policy stuff builtin to app names then?</p>\n<p>I needed to take down an app I deployed as a duplicate but you don't stop apps\nby name, you stop them by an id... see below</p>\n<pre><code class=\"language-console\">\nmodal-sandbox/modal_sandbox   main   ×1  ×9 via   v3.10.6(modal-sandbox)\n✗ modal app stop --help\n\n Usage: modal app stop [OPTIONS] APP_ID\n\n Stop an app.\n\n╭─ Arguments ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮\n│ *    app_id      TEXT  [default: None] [required]                                                                                                │\n╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n╭─ Options ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮\n│ --help          Show this message and exit.                                                                                                      │\n╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n\n\nmodal-sandbox/modal_sandbox   main   ×1  ×9 via   v3.10.6(modal-sandbox)\n❯ modal app list\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃ App ID                    ┃ Description         ┃ State    ┃ Creation time             ┃ Stop time                 ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ ap-lzy1AAuVy7POFkUcDKRxpQ │ print_info          │ deployed │ 2022-12-28 20:59:07-06:00 │                           │\n│ ap-qYjE45dciqgT3C3CpNp3RL │ say_hi              │ deployed │ 2022-12-28 19:49:22-06:00 │                           │\n│ ap-X7FYneUeYV5IKHcyirSb87 │ link-scraper        │ stopped  │ 2022-12-28 15:39:02-06:00 │ 2022-12-28 15:39:04-06:00 │\n│ ap-UOXTUU4uSRx2UZypJOcAsk │ example-get-started │ stopped  │ 2022-12-28 15:17:47-06:00 │ 2022-12-28 15:17:49-06:00 │\n└───────────────────────────┴─────────────────────┴──────────┴───────────────────────────┴───────────────────────────┘\n\nmodal-sandbox/modal_sandbox   main   ×1  ×9 via   v3.10.6(modal-sandbox)\n❯ modal app stop ap-lzy1AAuVy7POFkUcDKRxpQ\n\n</code></pre>\n<h1><a href=\"#git-warning\" aria-hidden=\"true\" class=\"anchor\" id=\"git-warning\"></a>Git warning!</h1>\n<p>I ran <code>modal deploy ...</code> after comitting some stuff I wanted to try BUT I had\nchanges in my file I didn't want to deploy... some git safety would be nice for\ndeployment!</p>\n<blockquote>\n<p>git stash &amp;&amp; modal deploy .. &amp;&amp; git stash pop</p>\n</blockquote>\n<p>Question for Modal team - in my modal sandbox repo at commit:</p>\n<pre><code>aab6162 (HEAD -&gt; main) HEAD@{1}: commit: print base version of my own image to prove it to me\n 1 file changed, 2 insertions(+)\n\n</code></pre>\n<p>An environment variable, <code>BASE_VERSION</code> that I expect to be in my base image\nwas not available to the python function in my Modal app... hopefully the log\nis still\n<a href=\"https://modal.com/logs/ap-qYjE45dciqgT3C3CpNp3RL?functionId=fu-rOt31ShRE1W1CQfuf02fsq&amp;taskId=ta-dm8BfiblvFLwVIQyt75YC2&amp;inputId=in-n64klEFrLtbcm2BiykJEvW\">here</a></p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-12-28T21:01:52-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "python",
        "cli",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/pipe-to-a-pager-to-preserve-console-output-in-ssh-session.html",
      "url": "https://pype.dev/pipe-to-a-pager-to-preserve-console-output-in-ssh-session.html",
      "title": "Pipe to a pager to preserve console output in SSH session",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>I'm playing with my ansible playbook in a remote tmux session, and I'm no wiz\nso I don't know the ins and outs, but I can't scroll up to get any console log\noutput that's not already visible on my screen. So I'm starting to end my\ncommands with <code> | less</code> so I can page through the console output!</p>\n<p><code>ansible-playbook plays.yml -v --tags mytag | less</code></p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-12-18T15:04:02-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "linux",
        "cli",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/call-basicconfig-to-get-python-log-messages-in-ipython.html",
      "url": "https://pype.dev/call-basicconfig-to-get-python-log-messages-in-ipython.html",
      "title": "Call basicConfig to get Python log messages in iPython",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<h1><a href=\"#logging-instead-of-printing\" aria-hidden=\"true\" class=\"anchor\" id=\"logging-instead-of-printing\"></a>Logging instead of printing</h1>\n<p>I am trying to adopt <code>logger.debug</code> instead of <code>print</code> but ran into a confusing\nthing in ipython during Advent of Code... I riddled by script with\n<code>logger.debug</code> (yes after setting <code>logging.setLevel('DEBUG')</code>) but in ipython\nnone of my log messages showed up!</p>\n<pre><code class=\"language-python\">import logging\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(&quot;DEBUG&quot;)\n\n</code></pre>\n<p>Turns out what I was missing was a call to <code>basicConfig</code></p>\n<pre><code class=\"language-python\">import logging\n\n# forget this and your messages are in the ether! or at least not seen in ipython...\nlogging.basicConfig()\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(&quot;DEBUG&quot;)\n</code></pre>\n<h1><a href=\"#bonus\" aria-hidden=\"true\" class=\"anchor\" id=\"bonus\"></a>Bonus</h1>\n<p>Want your new messages to show up while iterating on something without killing\nthe ipython kernel?</p>\n<pre><code class=\"language-python\">from importlib import reload\nreload(logging) # to make sure you get new log messages you add while developing!\n\n</code></pre>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-12-10T14:04:23-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "python",
        "cli",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/make-a-series-of-directories-fast.html",
      "url": "https://pype.dev/make-a-series-of-directories-fast.html",
      "title": "Make a series of directories fast!",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>mkdir s{1..10} will make directories s1, s2, ... s10 in one command!</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-11-10T15:27:50-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "linux",
        "cli",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/limit-zfs-list-to-avoid-docker-vomit.html",
      "url": "https://pype.dev/limit-zfs-list-to-avoid-docker-vomit.html",
      "title": "Limit zfs list to avoid docker vomit",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>zfs list has a flag -r, but if you use zfs driver for docker then you'll get\nflooded with every docker volume in the world. zfs list -r -d N will limit the\ndept of the print out, so zfs list -r -d 2 gives me tank, tank/encrypted,\ntank/encrypted/docker -&gt; but then I don't see all the continer volumes</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-10-20T06:39:18-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "zfs",
        "cli",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/use-the-right-lspsage-you-dope.html",
      "url": "https://pype.dev/use-the-right-lspsage-you-dope.html",
      "title": "Use the right lspsage, you dope!",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>If you think glepnir/lspsaga.nvim config will work with tali5/lspsaga.nvim installed... you're in for a rude awakening. Double check your forks folks!</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-10-14T19:41:44-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "vim",
        "cli"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/suddenly-ssh-requires-a-password.html",
      "url": "https://pype.dev/suddenly-ssh-requires-a-password.html",
      "title": "Suddenly SSH requires a password",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>ssh -v -i ~/.ssh/id_rsa nic@hogwarts</p>\n<p>THen we can look at print outs</p>\n<p>cat /var/log/auth.log  also showed me that I had too wide permissions on files in ~/.ssh -&gt; probably changed from an rsync job</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-10-07T11:14:37-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "linux",
        "cli",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/check-your-bios-version-on-ubuntu.html",
      "url": "https://pype.dev/check-your-bios-version-on-ubuntu.html",
      "title": "Check Your BIOS Version On Ubuntu",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>sudo dmidecode -s bios-version</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-10-02T18:21:58-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "linux",
        "cli",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/destroying-tmux-sessions-with-fzf.html",
      "url": "https://pype.dev/destroying-tmux-sessions-with-fzf.html",
      "title": "Destroying Tmux sessions with fzf",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>I use Tmux and Vim for most of my workflow, but I end up with a lot of dangling\ntmux sessions that dont' really need to persist... but killing them one at a\ntime is a pain so I wrote a little script-kitty nonsense to pipe multiple\nchoices from fzf into <code>tmux kill-session</code></p>\n<p>I defined a little function in my <code>.zshrc</code></p>\n<pre><code class=\"language-bash\">destroy() { \n    tmux list-sessions -F '#{session_name}' | fzf -m | xargs -d $'\\n' sh -c 'echo &quot;killing $0&quot;; tmux kill-session -t &quot;$0&quot;; for arg;do echo &quot;killing $arg&quot;;tmux kill-session -t &quot;$arg&quot;; done'\n}\nbindkey -s '^d' 'destroy \\n'\n</code></pre>\n<p><code>tmux list-sessions -F '#{session_name}' </code> prints all my active tmux sessions to the console with the format of just their name</p>\n<pre><code class=\"language-bash\">pype.dev   main   ×1 via   v3.8.11(pype.dev)  on  (us-east-1) proxy\n❯ tmux list-sessions -F '#{session_name}'\nsession-01\nsession-02\nsession-03\n...\n</code></pre>\n<p>Pipe that to <code>fzf -m</code> to allow multiple choices to be made using tab</p>\n<p>Then the nasty bit in <code>xargs</code>... I echo <code>killing @0</code> and <code>killing $arg</code> because the <code>sh -c</code> passes the first tmux session name to <code>@0</code> (it's just what bash does) and then the rest get handled in the for loop.</p>\n<p>Basically then I get an fzf list to choose multiple tmux sessions to destroy to clean up some RAM!</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-09-15T10:27:58-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "cli",
        "bash",
        "tech"
      ],
      "language": "en"
    }
  ]
}