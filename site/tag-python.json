{
  "version": "https://jsonfeed.org/version/1",
  "title": "Pype.dev",
  "home_page_url": "https://pype.dev",
  "feed_url": "https://pype.dev/tag-python.json",
  "description": "my mental data-lake",
  "items": [
    {
      "id": "https://pype.dev/switching-from-altacv-to-rendercv-for-my-resume.html",
      "url": "https://pype.dev/switching-from-altacv-to-rendercv-for-my-resume.html",
      "title": "Switching from AltaCV to RenderCV for my Resume",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>I was using a fun LaTex-based project for managing my resume called <a href=\"https://github.com/liantze/AltaCV\">AltaCV</a>. I loved the customization and was familiar with Tek from school. However, I update my resume so infrequently that anytime I'd hop back to it I'd have to remember how to work with Tex and that was frustrating as I've lost touch with it over the years.</p>\n<p>Scrolling GitHub treding repos I saw <a href=\"https://github.com/sinaatalay/rendercv\">RenderCV</a> which let's me just use YAML to write my resume and then it compiles to Tek through Python. There's a sister project to make your own using this very easly call <a href=\"https://github.com/sinaatalay/rendercv-pipeline\">rendercv-pipeline</a>. I forked that repo and translated my tek resume to the YAML. The included theme is nice enough is YAML is much easier to maintain long-term.</p>\n<p>My resume is behind a private GH repo but the example from rendercv-pipeline is <a href=\"https://github.com/sinaatalay/rendercv-pipeline/blob/main/John_Doe_CV.pdf\">here on GitHub</a></p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2024-08-01T05:59:46-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "python",
        "python",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/switching-from-altacv-to-rendercv-for-my-resume.html",
      "url": "https://pype.dev/switching-from-altacv-to-rendercv-for-my-resume.html",
      "title": "Switching from AltaCV to RenderCV for my Resume",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>I was using a fun LaTex-based project for managing my resume called <a href=\"https://github.com/liantze/AltaCV\">AltaCV</a>. I loved the customization and was familiar with Tek from school. However, I update my resume so infrequently that anytime I'd hop back to it I'd have to remember how to work with Tex and that was frustrating as I've lost touch with it over the years.</p>\n<p>Scrolling GitHub treding repos I saw <a href=\"https://github.com/sinaatalay/rendercv\">RenderCV</a> which let's me just use YAML to write my resume and then it compiles to Tek through Python. There's a sister project to make your own using this very easly call <a href=\"https://github.com/sinaatalay/rendercv-pipeline\">rendercv-pipeline</a>. I forked that repo and translated my tek resume to the YAML. The included theme is nice enough is YAML is much easier to maintain long-term.</p>\n<p>My resume is behind a private GH repo but the example from rendercv-pipeline is <a href=\"https://github.com/sinaatalay/rendercv-pipeline/blob/main/John_Doe_CV.pdf\">here on GitHub</a></p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2024-08-01T05:59:46-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "python",
        "python",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/modal-labs.html",
      "url": "https://pype.dev/modal-labs.html",
      "title": "Modal Labs",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>Playing around with Modal Labs</p>\n<p>One of the first things I tried was a regular cron job...</p>\n<pre><code class=\"language-python\">@stub.function(\n    schedule=modal.Period(minutes=59), secret=modal.Secret.from_name(&quot;my-dummy-secret&quot;)\n)\ndef say_hi():\n    now = time.ctime()\n    secret = os.environ.get(&quot;dummy-secret&quot;)\n    print(f&quot;Hello {os.environ.get('USER', 'Rodney')} at {now}&quot;)\n    print(f&quot;{secret=}&quot;)\n\n</code></pre>\n<p>This can get deployed with <code>modal deploy --name &lt;app name&gt; &lt;path to .py file with the stub and function defined in it&gt; </code></p>\n<p>This function gets deployed as an app that I conveniently call <code>say_hi</code> (as far\nas I can tell the app name can be anything - as I add functions to this same\napp and deploy with the same name to get a new version)</p>\n<p>Notice that this also is an example of giving access to a secret - defined in the Modal Labs dashboard</p>\n<p>We can take a look at the apps running at <a href=\"https://modal.com/apps\">https://modal.com/apps</a></p>\n<p>I then added another function to experiment with custom container images and\nsaw then that Modal will just slap a new version on anything provisioned with\nthe same name (intuitive enough for sure) so when I add functions to my .py\nscript and run <code>modal deploy --name say_hi myscript.py</code> over and over, the app\ncalled <code>say_hi</code> in the Modal apps dashboard just gets a new version</p>\n<p>This means I can spin up several instances of functionally the same app but with different names/versions etc...\nQ: Maybe there's gitops or policy stuff builtin to app names then?</p>\n<p>I needed to take down an app I deployed as a duplicate but you don't stop apps\nby name, you stop them by an id... see below</p>\n<pre><code class=\"language-console\">\nmodal-sandbox/modal_sandbox   main   ×1  ×9 via   v3.10.6(modal-sandbox)\n✗ modal app stop --help\n\n Usage: modal app stop [OPTIONS] APP_ID\n\n Stop an app.\n\n╭─ Arguments ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮\n│ *    app_id      TEXT  [default: None] [required]                                                                                                │\n╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n╭─ Options ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮\n│ --help          Show this message and exit.                                                                                                      │\n╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n\n\nmodal-sandbox/modal_sandbox   main   ×1  ×9 via   v3.10.6(modal-sandbox)\n❯ modal app list\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃ App ID                    ┃ Description         ┃ State    ┃ Creation time             ┃ Stop time                 ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ ap-lzy1AAuVy7POFkUcDKRxpQ │ print_info          │ deployed │ 2022-12-28 20:59:07-06:00 │                           │\n│ ap-qYjE45dciqgT3C3CpNp3RL │ say_hi              │ deployed │ 2022-12-28 19:49:22-06:00 │                           │\n│ ap-X7FYneUeYV5IKHcyirSb87 │ link-scraper        │ stopped  │ 2022-12-28 15:39:02-06:00 │ 2022-12-28 15:39:04-06:00 │\n│ ap-UOXTUU4uSRx2UZypJOcAsk │ example-get-started │ stopped  │ 2022-12-28 15:17:47-06:00 │ 2022-12-28 15:17:49-06:00 │\n└───────────────────────────┴─────────────────────┴──────────┴───────────────────────────┴───────────────────────────┘\n\nmodal-sandbox/modal_sandbox   main   ×1  ×9 via   v3.10.6(modal-sandbox)\n❯ modal app stop ap-lzy1AAuVy7POFkUcDKRxpQ\n\n</code></pre>\n<h1><a href=\"#git-warning\" aria-hidden=\"true\" class=\"anchor\" id=\"git-warning\"></a>Git warning!</h1>\n<p>I ran <code>modal deploy ...</code> after comitting some stuff I wanted to try BUT I had\nchanges in my file I didn't want to deploy... some git safety would be nice for\ndeployment!</p>\n<blockquote>\n<p>git stash &amp;&amp; modal deploy .. &amp;&amp; git stash pop</p>\n</blockquote>\n<p>Question for Modal team - in my modal sandbox repo at commit:</p>\n<pre><code>aab6162 (HEAD -&gt; main) HEAD@{1}: commit: print base version of my own image to prove it to me\n 1 file changed, 2 insertions(+)\n\n</code></pre>\n<p>An environment variable, <code>BASE_VERSION</code> that I expect to be in my base image\nwas not available to the python function in my Modal app... hopefully the log\nis still\n<a href=\"https://modal.com/logs/ap-qYjE45dciqgT3C3CpNp3RL?functionId=fu-rOt31ShRE1W1CQfuf02fsq&amp;taskId=ta-dm8BfiblvFLwVIQyt75YC2&amp;inputId=in-n64klEFrLtbcm2BiykJEvW\">here</a></p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-12-28T21:01:52-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "python",
        "cli",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/call-basicconfig-to-get-python-log-messages-in-ipython.html",
      "url": "https://pype.dev/call-basicconfig-to-get-python-log-messages-in-ipython.html",
      "title": "Call basicConfig to get Python log messages in iPython",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<h1><a href=\"#logging-instead-of-printing\" aria-hidden=\"true\" class=\"anchor\" id=\"logging-instead-of-printing\"></a>Logging instead of printing</h1>\n<p>I am trying to adopt <code>logger.debug</code> instead of <code>print</code> but ran into a confusing\nthing in ipython during Advent of Code... I riddled by script with\n<code>logger.debug</code> (yes after setting <code>logging.setLevel('DEBUG')</code>) but in ipython\nnone of my log messages showed up!</p>\n<pre><code class=\"language-python\">import logging\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(&quot;DEBUG&quot;)\n\n</code></pre>\n<p>Turns out what I was missing was a call to <code>basicConfig</code></p>\n<pre><code class=\"language-python\">import logging\n\n# forget this and your messages are in the ether! or at least not seen in ipython...\nlogging.basicConfig()\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(&quot;DEBUG&quot;)\n</code></pre>\n<h1><a href=\"#bonus\" aria-hidden=\"true\" class=\"anchor\" id=\"bonus\"></a>Bonus</h1>\n<p>Want your new messages to show up while iterating on something without killing\nthe ipython kernel?</p>\n<pre><code class=\"language-python\">from importlib import reload\nreload(logging) # to make sure you get new log messages you add while developing!\n\n</code></pre>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-12-10T14:04:23-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "python",
        "cli",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/benchmark-your-disks-with-fio.html",
      "url": "https://pype.dev/benchmark-your-disks-with-fio.html",
      "title": "Benchmark your disks with fio",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<h1><a href=\"#intro\" aria-hidden=\"true\" class=\"anchor\" id=\"intro\"></a>Intro</h1>\n<p>I use ZFS at home in my homelab for basically all of my storage... Docker uses\nZFS backend, all my VMs have their <code>.qcow2</code> images in their own zfs datasets,\nand all my shares are ZFS datasets. I love ZFS but my home hardware presently\nis the opposite of expensive or new... Thankfully I've had a lot of my orginal\nhomelab simply given to me but the cost of this is that I didn't put my\nmachines together, I didn't choose the disks, and I definitely didn't do the\nresearch I would've otherwise done had I bankrolled my server personally...</p>\n<h2><a href=\"#the-problem\" aria-hidden=\"true\" class=\"anchor\" id=\"the-problem\"></a>The Problem</h2>\n<p>I run <code>glances</code> on basically all my machines and for the longest time I have\nbeen seeing big time <code>iowait</code> issues. Now, since everything was free I've\nlargely been able to ignore that however I'm now after some better performance\nwhich I think means new hardware!</p>\n<p>Here is a random screenshot of my glances homepage at time of writing - The\nonly major load on my server is some <code>ffmpeg</code> transcoding (about 60% CPU\nutilization)...</p>\n<p><figure><img src=\"/media/glances-iowait.png\" alt=\"Alt Text\" /></figure></p>\n<p>As you can see... there's a lot of issues and <em>I don't even know what they mean</em>.</p>\n<h1><a href=\"#fio\" aria-hidden=\"true\" class=\"anchor\" id=\"fio\"></a>fio</h1>\n<p>I heard about <a href=\"https://fio.readthedocs.io/en/latest/\">fio</a> through a friend and\ndecided to try it out quick. It installs with <code>apt</code> on ubuntu quick and easy...</p>\n<p>Jim Saltar has a good blog post on it <a href=\"https://arstechnica.com/gadgets/2020/02/how-fast-are-your-disks-find-out-the-open-source-way-with-fio/\">here</a></p>\n<p>Basically it's a handy tool for benchmarking your disks and the blog dives into\nwhat types of metrics matter - it's not just throughput, but also latency,\niops, etc.</p>\n<h2><a href=\"#tests\" aria-hidden=\"true\" class=\"anchor\" id=\"tests\"></a>Tests</h2>\n<p>I ran a few basic commands inside a new zfs dataset on my server <code>tank/fio</code></p>\n<pre><code class=\"language-bash\">fio --name=random-write --ioengine=posixaio --rw=randwrite --bs=4k --size=4g --numjobs=1 --runtime=60 --time_based --end_fsync=1 &gt; single-4KiB-random-write.txt\nfio --name=random-write --ioengine=posixaio --rw=randwrite --bs=64k --size=256m --numjobs=16 --iodepth=16 --runtime=60 --time_based --end_fsync=1 &gt; 16-parallel-64KiB-random-write.txt\nfio --name=random-write --ioengine=posixaio --rw=randwrite --bs=1m --size=16g --numjobs=1 --iodepth=1 --runtime=60 --time_based --end_fsync=1 &gt; single-1MiB-random-write.txt\n</code></pre>\n<h2><a href=\"#results\" aria-hidden=\"true\" class=\"anchor\" id=\"results\"></a>Results</h2>\n<p>The single 4 KiB random write:</p>\n<p><code>WRITE: bw=7836KiB/s (8024kB/s), 7836KiB/s-7836KiB/s (8024kB/s-8024kB/s), io=523MiB (548MB), run=68317-68317msec</code></p>\n<p>The 16 parallel 64KiB random writes:</p>\n<p><code>WRITE: bw=93.9MiB/s (98.4MB/s), 5599KiB/s-6303KiB/s (5734kB/s-6454kB/s), io=7642MiB (8013MB), run=81310-81418msec</code></p>\n<p>The single 1MiB random write:</p>\n<p><code>WRITE: bw=81.2MiB/s (85.1MB/s), 81.2MiB/s-81.2MiB/s (85.1MB/s-85.1MB/s), io=8177MiB (8574MB), run=100699-100699msec</code></p>\n<h1><a href=\"#summary\" aria-hidden=\"true\" class=\"anchor\" id=\"summary\"></a>Summary</h1>\n<p>So I don't fully understand these numbers yet... 80-100 MiB/s isn't super fast\nand that's across a parallelized workload... The single threaded workloads have\nawful performance so this tells me something is wrong... I have a few ideas...</p>\n<ol>\n<li>ZFS dataset config options such as <code>ashift</code> or the blocksize might be way misconfigured</li>\n<li>The disks/pool which came from a TrueNAS/FreeBSD machine may have some artifacts that I need to clean up</li>\n<li>The SAS controller I am using, which I flashed with IT firmware to get it into JBOD mode might be messed up</li>\n<li>The data cables themselves could be a problem...</li>\n</ol>\n<p>Points 3 and 4 are less likely given that the write speed does increase in the parallelized job but I'm a newbie so it's time to dive in!</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-08-27T13:43:22-00:00",
      "image": "/media/glances-iowait.png",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "python",
        "zfs",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/playing-with-mdformat.html",
      "url": "https://pype.dev/playing-with-mdformat.html",
      "title": "Playing with mdformat",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<pre><code class=\"language-python\">import this; print(this); print(&quot;what is taking so long black!!&quot;)\n</code></pre>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-08-23T06:56:15-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "python",
        "vim",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/add-colored-indicators-to-your-dataframes-html-representation.html",
      "url": "https://pype.dev/add-colored-indicators-to-your-dataframes-html-representation.html",
      "title": "Add colored indicators to your dataframes html representation",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p><a href=\"https://twitter.com/driscollis\">Mike Driscoll</a> recently tweeted about making\ncolored out with pandas DataFrames and I just had to try it for myself</p>\n<h1><a href=\"#use-case\" aria-hidden=\"true\" class=\"anchor\" id=\"use-case\"></a>Use Case</h1>\n<p>First though... why?\nMy biggest use case is a monitoring pipeline of mine... The details aside, the\noutput of my pipeline is a dataframe where each row has information about a\nfailed pipeline that I need to go look into. I dump that result to a simle html\nfile that's hosted on an internal site and the file is updated every couple of\nhours. Adding some colored indicators automatically to the rows to help me\nassess severity of each record would be a handy way to quickly get an\nunderstanding the state of our pipelines.</p>\n<h1><a href=\"#how\" aria-hidden=\"true\" class=\"anchor\" id=\"how\"></a>How?</h1>\n<p>The docs for the <code>applymap</code> method state simply:</p>\n<pre><code>Apply a CSS-styling function elementwise.\n\nUpdates the HTML representation with the result.\n\n</code></pre>\n<p>So we can write a function that returns <code>color: {color}</code> based on the dataframe\nvalues and when we drop that dataframe to html we'll have some simple css\nstyling applied automagically!</p>\n<p>By default the function will be applied to all columns of the dataframe, but\nthat's not useful if the columns are different types which is usually the case.\nLuckily there is a <code>subset</code> keyword to only apply to the columns you need!</p>\n<p>Consider my example</p>\n<pre><code class=\"language-python\">sandbox   main via 3.8.11(sandbox) ipython\n❯ df = pd.read_csv(&quot;cars.csv&quot;)\n\nsandbox   main via 3.8.11(sandbox) ipython\n❯ def mpg_color(val: float):\n...:     color = &quot;red&quot; if val &lt; 21 else &quot;green&quot;\n...:     return f&quot;color: {color}&quot;\n\nsandbox   main via 3.8.11(sandbox) ipython\n❯ df.style.applymap(mpg_color, subset=&quot;mpg&quot;).to_html(&quot;color.html&quot;)\n</code></pre>\n<p>I want to quickly see if the <code>mpg</code> is any good for the cars in the cars dataset\nand I'll define &quot;good&quot; as better than 21 mpg (not great I know but just for the\nsake of discussion...)</p>\n<p>The function returns an appropriate css string and after I <code>style.applymap</code> on just the <code>mpg</code> column we get this!</p>\n<style type=\"text/css\">\n#T_95e99_row0_col1, #T_95e99_row1_col1, #T_95e99_row2_col1, #T_95e99_row3_col1 {\n  color: green;\n}\n#T_95e99_row4_col1 {\n  color: red;\n}\n</style>\n<table id=\"T_95e99\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th id=\"T_95e99_level0_col0\" class=\"col_heading level0 col0\" >Unnamed: 0</th>\n      <th id=\"T_95e99_level0_col1\" class=\"col_heading level0 col1\" >mpg</th>\n      <th id=\"T_95e99_level0_col2\" class=\"col_heading level0 col2\" >cyl</th>\n      <th id=\"T_95e99_level0_col3\" class=\"col_heading level0 col3\" >disp</th>\n      <th id=\"T_95e99_level0_col4\" class=\"col_heading level0 col4\" >hp</th>\n      <th id=\"T_95e99_level0_col5\" class=\"col_heading level0 col5\" >drat</th>\n      <th id=\"T_95e99_level0_col6\" class=\"col_heading level0 col6\" >wt</th>\n      <th id=\"T_95e99_level0_col7\" class=\"col_heading level0 col7\" >qsec</th>\n      <th id=\"T_95e99_level0_col8\" class=\"col_heading level0 col8\" >vs</th>\n      <th id=\"T_95e99_level0_col9\" class=\"col_heading level0 col9\" >am</th>\n      <th id=\"T_95e99_level0_col10\" class=\"col_heading level0 col10\" >gear</th>\n      <th id=\"T_95e99_level0_col11\" class=\"col_heading level0 col11\" >carb</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_95e99_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n      <td id=\"T_95e99_row0_col0\" class=\"data row0 col0\" >Mazda RX4</td>\n      <td id=\"T_95e99_row0_col1\" class=\"data row0 col1\" >21.000000</td>\n      <td id=\"T_95e99_row0_col2\" class=\"data row0 col2\" >6</td>\n      <td id=\"T_95e99_row0_col3\" class=\"data row0 col3\" >160.000000</td>\n      <td id=\"T_95e99_row0_col4\" class=\"data row0 col4\" >110</td>\n      <td id=\"T_95e99_row0_col5\" class=\"data row0 col5\" >3.900000</td>\n      <td id=\"T_95e99_row0_col6\" class=\"data row0 col6\" >2.620000</td>\n      <td id=\"T_95e99_row0_col7\" class=\"data row0 col7\" >16.460000</td>\n      <td id=\"T_95e99_row0_col8\" class=\"data row0 col8\" >0</td>\n      <td id=\"T_95e99_row0_col9\" class=\"data row0 col9\" >1</td>\n      <td id=\"T_95e99_row0_col10\" class=\"data row0 col10\" >4</td>\n      <td id=\"T_95e99_row0_col11\" class=\"data row0 col11\" >4</td>\n    </tr>\n    <tr>\n      <th id=\"T_95e99_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n      <td id=\"T_95e99_row1_col0\" class=\"data row1 col0\" >Mazda RX4 Wag</td>\n      <td id=\"T_95e99_row1_col1\" class=\"data row1 col1\" >21.000000</td>\n      <td id=\"T_95e99_row1_col2\" class=\"data row1 col2\" >6</td>\n      <td id=\"T_95e99_row1_col3\" class=\"data row1 col3\" >160.000000</td>\n      <td id=\"T_95e99_row1_col4\" class=\"data row1 col4\" >110</td>\n      <td id=\"T_95e99_row1_col5\" class=\"data row1 col5\" >3.900000</td>\n      <td id=\"T_95e99_row1_col6\" class=\"data row1 col6\" >2.875000</td>\n      <td id=\"T_95e99_row1_col7\" class=\"data row1 col7\" >17.020000</td>\n      <td id=\"T_95e99_row1_col8\" class=\"data row1 col8\" >0</td>\n      <td id=\"T_95e99_row1_col9\" class=\"data row1 col9\" >1</td>\n      <td id=\"T_95e99_row1_col10\" class=\"data row1 col10\" >4</td>\n      <td id=\"T_95e99_row1_col11\" class=\"data row1 col11\" >4</td>\n    </tr>\n    <tr>\n      <th id=\"T_95e99_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n      <td id=\"T_95e99_row2_col0\" class=\"data row2 col0\" >Datsun 710</td>\n      <td id=\"T_95e99_row2_col1\" class=\"data row2 col1\" >22.800000</td>\n      <td id=\"T_95e99_row2_col2\" class=\"data row2 col2\" >4</td>\n      <td id=\"T_95e99_row2_col3\" class=\"data row2 col3\" >108.000000</td>\n      <td id=\"T_95e99_row2_col4\" class=\"data row2 col4\" >93</td>\n      <td id=\"T_95e99_row2_col5\" class=\"data row2 col5\" >3.850000</td>\n      <td id=\"T_95e99_row2_col6\" class=\"data row2 col6\" >2.320000</td>\n      <td id=\"T_95e99_row2_col7\" class=\"data row2 col7\" >18.610000</td>\n      <td id=\"T_95e99_row2_col8\" class=\"data row2 col8\" >1</td>\n      <td id=\"T_95e99_row2_col9\" class=\"data row2 col9\" >1</td>\n      <td id=\"T_95e99_row2_col10\" class=\"data row2 col10\" >4</td>\n      <td id=\"T_95e99_row2_col11\" class=\"data row2 col11\" >1</td>\n    </tr>\n    <tr>\n      <th id=\"T_95e99_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n      <td id=\"T_95e99_row3_col0\" class=\"data row3 col0\" >Hornet 4 Drive</td>\n      <td id=\"T_95e99_row3_col1\" class=\"data row3 col1\" >21.400000</td>\n      <td id=\"T_95e99_row3_col2\" class=\"data row3 col2\" >6</td>\n      <td id=\"T_95e99_row3_col3\" class=\"data row3 col3\" >258.000000</td>\n      <td id=\"T_95e99_row3_col4\" class=\"data row3 col4\" >110</td>\n      <td id=\"T_95e99_row3_col5\" class=\"data row3 col5\" >3.080000</td>\n      <td id=\"T_95e99_row3_col6\" class=\"data row3 col6\" >3.215000</td>\n      <td id=\"T_95e99_row3_col7\" class=\"data row3 col7\" >19.440000</td>\n      <td id=\"T_95e99_row3_col8\" class=\"data row3 col8\" >1</td>\n      <td id=\"T_95e99_row3_col9\" class=\"data row3 col9\" >0</td>\n      <td id=\"T_95e99_row3_col10\" class=\"data row3 col10\" >3</td>\n      <td id=\"T_95e99_row3_col11\" class=\"data row3 col11\" >1</td>\n    </tr>\n    <tr>\n      <th id=\"T_95e99_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n      <td id=\"T_95e99_row4_col0\" class=\"data row4 col0\" >Hornet Sportabout</td>\n      <td id=\"T_95e99_row4_col1\" class=\"data row4 col1\" >18.700000</td>\n      <td id=\"T_95e99_row4_col2\" class=\"data row4 col2\" >8</td>\n      <td id=\"T_95e99_row4_col3\" class=\"data row4 col3\" >360.000000</td>\n      <td id=\"T_95e99_row4_col4\" class=\"data row4 col4\" >175</td>\n      <td id=\"T_95e99_row4_col5\" class=\"data row4 col5\" >3.150000</td>\n      <td id=\"T_95e99_row4_col6\" class=\"data row4 col6\" >3.440000</td>\n      <td id=\"T_95e99_row4_col7\" class=\"data row4 col7\" >17.020000</td>\n      <td id=\"T_95e99_row4_col8\" class=\"data row4 col8\" >0</td>\n      <td id=\"T_95e99_row4_col9\" class=\"data row4 col9\" >0</td>\n      <td id=\"T_95e99_row4_col10\" class=\"data row4 col10\" >3</td>\n      <td id=\"T_95e99_row4_col11\" class=\"data row4 col11\" >2</td>\n    </tr>\n  </tbody>\n</table>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-06-04T06:12:33-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "python",
        "data",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/subset-a-list-based-on-values-in-another-list-with-itertools-compress.html",
      "url": "https://pype.dev/subset-a-list-based-on-values-in-another-list-with-itertools-compress.html",
      "title": "Subset a list based on values in another list with itertools.compress",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>I have list [True, False, False, True] and another list [1, 2, 3, 4] and a use case where I want to filter list 2 based on list 1 to remove values that line up with the element False in list 1.... so the outcome will be [1, 4]. list(compress(list2, list1)) will do it. As long as you can create a mask for the filter than itertool.compress will be your friend!</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-05-19T14:22:58-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "python",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/dynamic-form-values-with-jinja-and-fastapi.html",
      "url": "https://pype.dev/dynamic-form-values-with-jinja-and-fastapi.html",
      "title": "Dynamic-Form-Values-With-Jinja-And-Fastapi",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>I'm currently working on a self-hostable wish list app using FastAPI so we can\nfinally drop Amazon forever. (The lists funcionality has been super handy for\nsharing holiday gift ideas with the famj!)</p>\n<h1><a href=\"#fastapi\" aria-hidden=\"true\" class=\"anchor\" id=\"fastapi\"></a>FastAPI</h1>\n<p>FastAPI is an amazing framework for quickly building APIs with Python. I will have a slightly longer post about my brief experience with it coming later...</p>\n<h1><a href=\"#jinja-forms-and-fastapi\" aria-hidden=\"true\" class=\"anchor\" id=\"jinja-forms-and-fastapi\"></a>Jinja, Forms, and FastAPI</h1>\n<p>One of the last things I needed to figure out in my app was how to generate a\nform in a Jinja template with a dynamic number of inputs and then pass all the\ninputs to the backend to perform a database operation (my exact case was\nremoving rows from a table).</p>\n<h2><a href=\"#explicit-values\" aria-hidden=\"true\" class=\"anchor\" id=\"explicit-values\"></a>Explicit Values</h2>\n<p>The way to pass back explicit variables is really easy...</p>\n<p>Our form would look like this (I'm using bootstrap CSS)</p>\n<pre><code class=\"language-jinja\">&lt;form method=&quot;post&quot;&gt;\n    &lt;div class=&quot;form-check &quot;&gt;\n        &lt;input class=&quot;form-check-input&quot;  name=&quot;item_1&quot; id=&quot;itemOne&quot; value=&quot;1&quot; type=&quot;checkbox&quot;&gt;\n        &lt;label class=&quot;form-check-label&quot; for=&quot;itemOne&quot; &gt; A label for this item &lt;/label&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;form-check &quot;&gt;\n        &lt;input class=&quot;form-check-input&quot;  name=&quot;item_2&quot; id=&quot;itemTwo&quot; value=&quot;2&quot; type=&quot;checkbox&quot;&gt;\n        &lt;label class=&quot;form-check-label&quot; for=&quot;itemTwo&quot; &gt; A label for item 2 &lt;/label&gt;\n    &lt;/div&gt;\n\n&lt;button type=&quot;submit&quot; class=&quot;submit btn btn-xl&quot; &gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>\n<p>So what is this? This form will have 2 rows with the lables you see in <code>&lt;label&gt; &lt;/label&gt;</code> and checkboxes that when checked would have the value <code>value</code> in each\n<code>&lt;input&gt;</code> line.</p>\n<p>So our backend might looks something like this...</p>\n<p><u>I'm keeping all the imports and stuff here to show where they come from but I won't discuss it all here - that'll be in a future post</u></p>\n<pre><code class=\"language-python\">import starlette.status as status\nfrom fastapi import APIRouter, Depends, Form, Request\nfrom fastapi.encoders import jsonable_encoder\nfrom fastapi.responses import HTMLResponse, RedirectResponse\nfrom fastapi.templating import Jinja2Templates\nfrom sqlalchemy.orm import Session\n\nfrom app.session.session import create_get_session\n\nrouter = APIRouter()\ntemplates = Jinja2Templates(directory=&quot;templates/&quot;)\n\n@router.post(&quot;/my_route/do_something_with_form&quot;, response_class=HTMLResponse)\nasync def delete_rows(\n    request: Request,\n    item_1: int = Form(...),\n    item_2: int = Form(...)\n    db: Session = Depends(create_get_session),\n):\n    print(item_1)  # will just print 1 to the console where fastapi is running if the checkbox was checked\n    print(item_2)  # will just print 1 to the console where fastapi is running if the checkbox was checked\n    return RedirectResponse(&quot;/&quot;, status_code=status.HTTP_302_FOUND)\n</code></pre>\n<h2><a href=\"#dynamic-values\" aria-hidden=\"true\" class=\"anchor\" id=\"dynamic-values\"></a>Dynamic values</h2>\n<p>That's all pretty simple... pass back values by the name in the form...</p>\n<p>What about a form that's generated dynamically? This is my case since I display a row/checkbox for every row in my table so my form looks like this...</p>\n<blockquote>\n<p>data is the result of a database query, and item is each row, so the dot notation is the value of each column basically in that row</p>\n</blockquote>\n<pre><code class=\"language-jinja\">&lt;form method=&quot;post&quot;&gt;\n  {% for item in data %}\n    &lt;div class=&quot;form-check &quot;&gt;\n        &lt;input class=&quot;form-check-input&quot;  name=&quot;item_{{ item.id }}&quot; id=&quot;{{ item.name }}&quot; value=&quot;{{ item.id }}&quot; type=&quot;checkbox&quot;&gt;\n        &lt;label class=&quot;form-check-label&quot; for=&quot;{{ item.id }}&quot; &gt; Label for: {{ item.name }} &lt;/label&gt;\n    &lt;/div&gt;\n  {% endfor %}\n\n&lt;button type=&quot;submit&quot; class=&quot;submit btn btn-xl btn-outline-danger&quot; &gt;Remove&lt;/button&gt;\n&lt;/form&gt;\n\n</code></pre>\n<p>This form generates a row with a checkbox for every <code>item</code> in <code>data</code> (in my\ncase each <code>item</code> is an existing row in my table). Now I started scratching my\nhead on how to pass an unknown number of inputs to my backend of FastAPI wants\neach input explicitly defined and typed... I can't just pass the form back\nbecuase that's not a thing so what's the way to do it?</p>\n<pre><code class=\"language-python\"># same stuff as above, only showing post method here\n@router.post(&quot;/my_route/do_something_with_form&quot;, response_class=HTMLResponse)\nasync def delete_rows(\n    request: Request,\n    db: Session = Depends(create_get_session),\n):\n    form_data = await request.get_form()\n    data = jsonable_encoder(form_data)\n    # data = {&quot;item_1&quot;: 1, &quot;item_2&quot;: 2, ... &quot;item_N&quot;: N}\n    return RedirectResponse(&quot;/&quot;, status_code=status.HTTP_302_FOUND)\n</code></pre>\n<p>We <code>await request.get_form()</code> and after encoding the data we get a dictionary with key/value pairs of the name/value from the form!</p>\n<p>This took me quite a long time to figure out in part because most of the Google-able resources are still on Flask...</p>\n<p>I look forward to my wish list app maturing and I hope this helps someone working with FastAPI!</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-05-15T00:00:00-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "python",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/forms-with-fastapi-and-jinja.html",
      "url": "https://pype.dev/forms-with-fastapi-and-jinja.html",
      "title": "Forms with FastAPI and Jinja",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>I just started using FastAPI for a home project and needed to pass back a\ndynamic number of values from a form rendered with jinja...</p>\n<h1><a href=\"#dynamic-values\" aria-hidden=\"true\" class=\"anchor\" id=\"dynamic-values\"></a>Dynamic Values</h1>\n<p>The jinja templating for rendering HTML based on something like a python iterable is nice and easy</p>\n<blockquote>\n<p>data is the result of a database query, and item is each row, so the dot notation is the value of each column basically in that row</p>\n</blockquote>\n<pre><code class=\"language-jinja\">&lt;form method=&quot;post&quot;&gt;\n  {% for item in data %}\n    &lt;div class=&quot;form-check &quot;&gt;\n        &lt;input class=&quot;form-check-input&quot;  name=&quot;item_{{ item.id }}&quot; id=&quot;{{ item.name }}&quot; value=&quot;{{ item.id }}&quot; type=&quot;checkbox&quot;&gt;\n        &lt;label class=&quot;form-check-label&quot; for=&quot;{{ item.id }}&quot; &gt; Label for: {{ item.name }} &lt;/label&gt;\n    &lt;/div&gt;\n  {% endfor %}\n\n&lt;button type=&quot;submit&quot; class=&quot;submit btn btn-xl btn-outline-danger&quot; &gt;Remove&lt;/button&gt;\n&lt;/form&gt;\n\n</code></pre>\n<p>This form generates a row with a checkbox for every <code>item</code> in <code>data</code> (in my\ncase each <code>item</code> is an existing row in my table). it?</p>\n<p>The way to pass back all those values is pretty straight forward (after hours of messing around that is!)</p>\n<pre><code class=\"language-python\"># I hate it when tutorials don't show ALL relevant pieces to the blurb\nimport starlette.status as status\nfrom fastapi import APIRouter, Depends, Form, Request\nfrom fastapi.encoders import jsonable_encoder\nfrom fastapi.responses import HTMLResponse, RedirectResponse\nfrom fastapi.templating import Jinja2Templates\nfrom sqlalchemy.orm import Session\n\nfrom app.session.session import create_get_session\n\nrouter = APIRouter()\ntemplates = Jinja2Templates(directory=&quot;templates/&quot;)\n\n@router.post(&quot;/my_route/do_something_with_form&quot;, response_class=HTMLResponse)\nasync def delete_rows(\n    request: Request,\n    db: Session = Depends(create_get_session),\n):\n    form_data = await request.get_form()\n    data = jsonable_encoder(form_data)\n    # data = {&quot;item_1&quot;: 1, &quot;item_2&quot;: 2, ... &quot;item_N&quot;: N}\n    return RedirectResponse(&quot;/&quot;, status_code=status.HTTP_302_FOUND)\n</code></pre>\n<p>We <code>await request.get_form()</code> and after encoding the data we get a dictionary with key/value pairs of the name/value from the form!</p>\n<p>This took me quite a long time to figure out in part because most of the Google-able resources are still on Flask...</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-05-15T00:00:00-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "python",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/python-eval.html",
      "url": "https://pype.dev/python-eval.html",
      "title": "Python-Eval",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<h1><a href=\"#todo\" aria-hidden=\"true\" class=\"anchor\" id=\"todo\"></a>TODO</h1>\n<pre><code class=\"language-python\">title = &quot;my Title&quot;\neval('&quot;my&quot; in title')\n\n&gt;&gt;&gt; True\n\n</code></pre>\n<pre><code class=\"language-python\">print(&quot;hello, world&quot;); print(&quot;formatting&quot;)\n</code></pre>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-05-12T00:00:00-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "tech",
        "python"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/dataframe-to-markdown.html",
      "url": "https://pype.dev/dataframe-to-markdown.html",
      "title": "Dataframe-To-Markdown",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<h1><a href=\"#pandas\" aria-hidden=\"true\" class=\"anchor\" id=\"pandas\"></a>Pandas</h1>\n<p><code>pandas.DataFrame</code>s are pretty sweet data structures in Python.</p>\n<p>I do a lot of work with tabular data and one thing I have incorporated into some of that work is automatic data summary reports by throwing the first few, or several relevant, rows of a dataframe at a point in a pipeline into a markdown file.</p>\n<p>Pandas has a method on DataFrames that makes this 100% trivial!</p>\n<h1><a href=\"#the-method\" aria-hidden=\"true\" class=\"anchor\" id=\"the-method\"></a>The Method</h1>\n<p>Say we have a dataframe, <code>df</code>... then it's literally just: <code>df.to_markdown()</code></p>\n<pre><code class=\"language-python\">❯ df.head()\n\n          Unnamed: 0   mpg  cyl   disp   hp  drat     wt   qsec  vs  am  gear  carb\n0          Mazda RX4  21.0    6  160.0  110  3.90  2.620  16.46   0   1     4     4\n1      Mazda RX4 Wag  21.0    6  160.0  110  3.90  2.875  17.02   0   1     4     4\n2         Datsun 710  22.8    4  108.0   93  3.85  2.320  18.61   1   1     4     1\n3     Hornet 4 Drive  21.4    6  258.0  110  3.08  3.215  19.44   1   0     3     1\n4  Hornet Sportabout  18.7    8  360.0  175  3.15  3.440  17.02   0   0     3     2\n\n</code></pre>\n<p>In ipython I can call the method and get a markdown table back as a string</p>\n<pre><code class=\"language-python\">\nmental-data-lake   new-posts via 3.8.11(mental-data-lake) ipython\n❯ df.head().to_markdown()\n'|    | Unnamed: 0        |   mpg |   cyl |   disp |   hp |   drat |    wt |   qsec |   vs |   am |   gear |   carb |\\n|---:|:------------------|------:|------:|-------:|-----:|-------:|------:|-------:|-----:|-----:|-------:|-------:|\\n|  0 | Mazda RX4         |  21   |     6 |    160 |  110 |   3.9  | 2.62  |  16.46 |    0 |    1 |      4 |      4 |\\n|  1 | Mazda RX4 Wag     |  21   |     6 |    160 |  110 |   3.9  | 2.875 |  17.02 |    0 |    1 |      4 |      4 |\\n|  2 | Datsun 710        |  22.8 |     4 |    108 |   93 |   3.85 | 2.32  |  18.61 |    1 |    1 |      4 |      1 |\\n|  3 | Hornet 4 Drive    |  21.4 |     6 |    258 |  110 |   3.08 | 3.215 |  19.44 |    1 |    0 |      3 |      1 |\\n|  4 | Hornet Sportabout |  18.7 |     8 |    360 |  175 |   3.15 | 3.44  |  17.02 |    0 |    0 |      3 |      2 |'\n\n</code></pre>\n<p>You can drop that string into a markdown file and using any reader that supports the rendering you'll have a nicely formated table of example data in whatever report you're making!</p>\n<h1><a href=\"#bonus-method\" aria-hidden=\"true\" class=\"anchor\" id=\"bonus-method\"></a>Bonus method</h1>\n<p>Just like markdown, you can export a dataframe to html with <code>df.to_html()</code> and use that if it's more appropriate for your use case:</p>\n<pre><code class=\"language-text\">\n'&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;\\n  &lt;thead&gt;\\n    &lt;tr style=&quot;text-align: right;&quot;&gt;\\n      &lt;th&gt;&lt;/th&gt;\\n      &lt;th&gt;Unnamed: 0&lt;/th&gt;\\n      &lt;th&gt;mpg&lt;/th&gt;\\n      &lt;th&gt;cyl&lt;/th&gt;\\n      &lt;th&gt;disp&lt;/th&gt;\\n      &lt;th&gt;hp&lt;/th&gt;\\n      &lt;th&gt;drat&lt;/th&gt;\\n      &lt;th&gt;wt&lt;/th&gt;\\n      &lt;th&gt;qsec&lt;/th&gt;\\n      &lt;th&gt;vs&lt;/th&gt;\\n      &lt;th&gt;am&lt;/th&gt;\\n      &lt;th&gt;gear&lt;/th&gt;\\n      &lt;th&gt;carb&lt;/th&gt;\\n    &lt;/tr&gt;\\n  &lt;/thead&gt;\\n  &lt;tbody&gt;\\n    &lt;tr&gt;\\n      &lt;th&gt;0&lt;/th&gt;\\n      &lt;td&gt;Mazda RX4&lt;/td&gt;\\n      &lt;td&gt;21.0&lt;/td&gt;\\n      &lt;td&gt;6&lt;/td&gt;\\n      &lt;td&gt;160.0&lt;/td&gt;\\n      &lt;td&gt;110&lt;/td&gt;\\n      &lt;td&gt;3.90&lt;/td&gt;\\n      &lt;td&gt;2.620&lt;/td&gt;\\n      &lt;td&gt;16.46&lt;/td&gt;\\n      &lt;td&gt;0&lt;/td&gt;\\n      &lt;td&gt;1&lt;/td&gt;\\n      &lt;td&gt;4&lt;/td&gt;\\n      &lt;td&gt;4&lt;/td&gt;\\n    &lt;/tr&gt;\\n    &lt;tr&gt;\\n      &lt;th&gt;1&lt;/th&gt;\\n      &lt;td&gt;Mazda RX4 Wag&lt;/td&gt;\\n      &lt;td&gt;21.0&lt;/td&gt;\\n      &lt;td&gt;6&lt;/td&gt;\\n      &lt;td&gt;160.0&lt;/td&gt;\\n      &lt;td&gt;110&lt;/td&gt;\\n      &lt;td&gt;3.90&lt;/td&gt;\\n      &lt;td&gt;2.875&lt;/td&gt;\\n      &lt;td&gt;17.02&lt;/td&gt;\\n      &lt;td&gt;0&lt;/td&gt;\\n      &lt;td&gt;1&lt;/td&gt;\\n      &lt;td&gt;4&lt;/td&gt;\\n      &lt;td&gt;4&lt;/td&gt;\\n    &lt;/tr&gt;\\n    &lt;tr&gt;\\n      &lt;th&gt;2&lt;/th&gt;\\n      &lt;td&gt;Datsun 710&lt;/td&gt;\\n      &lt;td&gt;22.8&lt;/td&gt;\\n      &lt;td&gt;4&lt;/td&gt;\\n      &lt;td&gt;108.0&lt;/td&gt;\\n      &lt;td&gt;93&lt;/td&gt;\\n      &lt;td&gt;3.85&lt;/td&gt;\\n      &lt;td&gt;2.320&lt;/td&gt;\\n      &lt;td&gt;18.61&lt;/td&gt;\\n      &lt;td&gt;1&lt;/td&gt;\\n      &lt;td&gt;1&lt;/td&gt;\\n      &lt;td&gt;4&lt;/td&gt;\\n      &lt;td&gt;1&lt;/td&gt;\\n    &lt;/tr&gt;\\n    &lt;tr&gt;\\n      &lt;th&gt;3&lt;/th&gt;\\n      &lt;td&gt;Hornet 4 Drive&lt;/td&gt;\\n      &lt;td&gt;21.4&lt;/td&gt;\\n      &lt;td&gt;6&lt;/td&gt;\\n      &lt;td&gt;258.0&lt;/td&gt;\\n      &lt;td&gt;110&lt;/td&gt;\\n      &lt;td&gt;3.08&lt;/td&gt;\\n      &lt;td&gt;3.215&lt;/td&gt;\\n      &lt;td&gt;19.44&lt;/td&gt;\\n      &lt;td&gt;1&lt;/td&gt;\\n      &lt;td&gt;0&lt;/td&gt;\\n      &lt;td&gt;3&lt;/td&gt;\\n      &lt;td&gt;1&lt;/td&gt;\\n    &lt;/tr&gt;\\n    &lt;tr&gt;\\n      &lt;th&gt;4&lt;/th&gt;\\n      &lt;td&gt;Hornet Sportabout&lt;/td&gt;\\n      &lt;td&gt;18.7&lt;/td&gt;\\n      &lt;td&gt;8&lt;/td&gt;\\n      &lt;td&gt;360.0&lt;/td&gt;\\n      &lt;td&gt;175&lt;/td&gt;\\n      &lt;td&gt;3.15&lt;/td&gt;\\n      &lt;td&gt;3.440&lt;/td&gt;\\n      &lt;td&gt;17.02&lt;/td&gt;\\n      &lt;td&gt;0&lt;/td&gt;\\n      &lt;td&gt;0&lt;/td&gt;\\n      &lt;td&gt;3&lt;/td&gt;\\n      &lt;td&gt;2&lt;/td&gt;\\n    &lt;/tr&gt;\\n  &lt;/tbody&gt;\\n&lt;/table&gt;'\n\n</code></pre>\n<p>My blog will render that html into a nice table! (After removing new line characters)</p>\n<table border=\"1\" class=\"dataframe\">  <thead>    <tr style=\"text-align: right;\">      <th>Unnamed: 0</th>      <th>mpg</th>      <th>cyl</th>      <th>disp</th>      <th>hp</th>      <th>drat</th>      <th>wt</th>      <th>qsec</th>      <th>vs</th>      <th>am</th>      <th>gear</th>      <th>carb</th>    </tr>  </thead>  <tbody>    <tr>      <td>Mazda RX4</td>      <td>21.0</td>      <td>6</td>      <td>160.0</td>      <td>110</td>      <td>3.90</td>      <td>2.620</td>      <td>16.46</td>      <td>0</td>      <td>1</td>      <td>4</td>      <td>4</td>    </tr>    <tr>      <td>Mazda RX4 Wag</td>      <td>21.0</td>      <td>6</td>      <td>160.0</td>      <td>110</td>      <td>3.90</td>      <td>2.875</td>      <td>17.02</td>      <td>0</td>      <td>1</td>      <td>4</td>      <td>4</td>    </tr>    <tr>      <td>Datsun 710</td>      <td>22.8</td>      <td>4</td>      <td>108.0</td>      <td>93</td>      <td>3.85</td>      <td>2.320</td>      <td>18.61</td>      <td>1</td>      <td>1</td>      <td>4</td>      <td>1</td>    </tr>    <tr>      <td>Hornet 4 Drive</td>      <td>21.4</td>      <td>6</td>      <td>258.0</td>      <td>110</td>      <td>3.08</td>      <td>3.215</td>      <td>19.44</td>      <td>1</td>      <td>0</td>      <td>3</td>      <td>1</td>    </tr>    <tr>      <td>Hornet Sportabout</td>      <td>18.7</td>      <td>8</td>      <td>360.0</td>      <td>175</td>      <td>3.15</td>      <td>3.440</td>      <td>17.02</td>      <td>0</td>      <td>0</td>      <td>3</td>      <td>2</td>    </tr>  </tbody></table>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-05-07T00:00:00-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "python",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/dataframe-to-styled-html.html",
      "url": "https://pype.dev/dataframe-to-styled-html.html",
      "title": "Dataframe-To-Styled-Html",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>I wrote up a little on exporting DataFrames to markdown and html <a href=\"dataframe-to-markdown.html\">here</a></p>\n<p>But I've been playing with a web app for with lists and while I'm toying around I learned you can actually give your tables some style with some simple css classes!</p>\n<h1><a href=\"#to-html\" aria-hidden=\"true\" class=\"anchor\" id=\"to-html\"></a>To HTML</h1>\n<p>Reminder that if you have a dataframe, <code>df</code>, you can <code>df.to_html()</code> to get an HTML table of your dataframe.</p>\n<p>Well you can pass some <code>classes</code> to make it look super nice!</p>\n<h1><a href=\"#classes-and-css\" aria-hidden=\"true\" class=\"anchor\" id=\"classes-and-css\"></a>Classes and CSS</h1>\n<p>I don't know anything really about CSS so I won't pretend otherwise, but as I was learning about bootstrap that's where I stumbled upon this...</p>\n<p>There are several classes you can pass but I found really good luck with <code>table-bordered</code> and <code>table-dark</code> for my use case</p>\n<p><code>df.to_html(classes=[&quot;table table-bordered table-dark&quot;])</code></p>\n<table border=\"1\" class=\"dataframe table table-bordered table-dark\">  <thead>\n<tr style=\"text-align: right;\">      <th>Unnamed: 0</th>      <th>mpg</th>\n<th>cyl</th>      <th>disp</th>      <th>hp</th>      <th>drat</th>\n<th>wt</th>      <th>qsec</th>      <th>vs</th>      <th>am</th>\n<th>gear</th>      <th>carb</th>    </tr>  </thead>  <tbody>    <tr>\n<td>Mazda RX4</td>      <td>21.0</td>      <td>6</td>      <td>160.0</td>\n<td>110</td>      <td>3.90</td>      <td>2.620</td>      <td>16.46</td>\n<td>0</td>      <td>1</td>      <td>4</td>      <td>4</td>    </tr>    <tr>\n<td>Mazda RX4 Wag</td>      <td>21.0</td>      <td>6</td>      <td>160.0</td>\n<td>110</td>      <td>3.90</td>      <td>2.875</td>      <td>17.02</td>\n<td>0</td>      <td>1</td>      <td>4</td>      <td>4</td>    </tr>    <tr>\n<td>Datsun 710</td>      <td>22.8</td>      <td>4</td>      <td>108.0</td>\n<td>93</td>      <td>3.85</td>      <td>2.320</td>      <td>18.61</td>\n<td>1</td>      <td>1</td>      <td>4</td>      <td>1</td>    </tr>    <tr>\n<td>Hornet 4 Drive</td>      <td>21.4</td>      <td>6</td>      <td>258.0</td>\n<td>110</td>      <td>3.08</td>      <td>3.215</td>      <td>19.44</td>\n<td>1</td>      <td>0</td>      <td>3</td>      <td>1</td>    </tr>    <tr>\n<td>Hornet Sportabout</td>      <td>18.7</td>      <td>8</td>\n<td>360.0</td>      <td>175</td>      <td>3.15</td>      <td>3.440</td>\n<td>17.02</td>      <td>0</td>      <td>0</td>      <td>3</td>      <td>2</td>\n</tr>  </tbody></table>\n<h1><a href=\"#you-try-it\" aria-hidden=\"true\" class=\"anchor\" id=\"you-try-it\"></a>You try it!</h1>\n<p>Crack open ipython and make a dataframe, then <code>df.to_html(classes=[&quot;table table-bordered table-dark&quot;])</code>, copy the output (minus the quote marks ipython uses to denote the string type) that into <code>my-file.html</code>, open that up in a browser and be amazed!</p>\n<blockquote>\n<p>For added effeciency try using pyperclip to copy the output right to your clipboard!</p>\n</blockquote>\n<p><code>pip install pyperclip</code> and then <code>pyperclip.copy(df.to_html(classes=[&quot;table table-bordered table-dark&quot;]))</code></p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-05-07T00:00:00-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "python",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/wish-list-with-fastapi.html",
      "url": "https://pype.dev/wish-list-with-fastapi.html",
      "title": "Wish-List-With-Fastapi",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>Amazon has crossed the line with me just one too many times now so we are looking to drop them like every other Big Tech provider....</p>\n<p>However, one key feature of Amazon that has been so useful for us is Lists... We can just maintain a list for each of us and then family members can login anytime and check it out...\nThis really alleviates any last minute gift idea stress right before a birthday or something.</p>\n<p>So I need a nice gift list service but I don't want to be locked into one company (like a Target registry or something) and I'd like to host it myself</p>\n<p>The internets had a few options but nothing looked/felt like I wanted to I decided to build my own.</p>\n<h1><a href=\"#the-frontend\" aria-hidden=\"true\" class=\"anchor\" id=\"the-frontend\"></a>The Frontend</h1>\n<p><u>I have no idea how to do front end so stay tuned</u></p>\n<h1><a href=\"#the-backend\" aria-hidden=\"true\" class=\"anchor\" id=\"the-backend\"></a>The Backend</h1>\n<p>FastAPI for the win on this one... I followed a few examples online and what I was able to build in just a few minutes is pretty impressive thanks to the design of FastAPI.</p>\n<p>Some key features are:</p>\n<ol>\n<li>Auto doc generation</li>\n<li>Required typing (which makes #1 possible)</li>\n<li>Built-in api testing in the browser</li>\n<li>Easy integration with sqlalchemy</li>\n<li>Development time so short you won't be done with your coffee before having something up and running!</li>\n</ol>\n<h2><a href=\"#database\" aria-hidden=\"true\" class=\"anchor\" id=\"database\"></a>Database</h2>\n<p>Starting with a simple <code>database.py</code> we can create a sqlalchemy session with a base model with about 7 lines of code...</p>\n<pre><code class=\"language-python\">\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\n\nSQLALCHEMY_DATABASE_URL = &quot;sqlite:///wishes.sqlite3&quot;\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n</code></pre>\n<h2><a href=\"#model\" aria-hidden=\"true\" class=\"anchor\" id=\"model\"></a>Model</h2>\n<p>For my wish list I needed just a simple table:</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">id</th>\n<th align=\"left\">person</th>\n<th align=\"left\">item</th>\n<th align=\"left\">link</th>\n<th align=\"left\">purchased</th>\n<th align=\"left\">purchased_by</th>\n<th align=\"left\">date_added</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"right\">1</td>\n<td align=\"left\">pypeaday</td>\n<td align=\"left\">A sweet item</td>\n<td align=\"left\"><a href=\"http://www.mystore.store\">www.mystore.store</a></td>\n<td align=\"left\">False</td>\n<td align=\"left\">dad</td>\n<td align=\"left\">2022-05-05 21:55:09</td>\n</tr>\n<tr>\n<td align=\"right\">2</td>\n<td align=\"left\">pypeaday</td>\n<td align=\"left\">A bitter item</td>\n<td align=\"left\"><a href=\"http://www.bitterstore.com\">www.bitterstore.com</a></td>\n<td align=\"left\">True</td>\n<td align=\"left\">Mrs. pypeaday</td>\n<td align=\"left\">2022-05-06 06:55:54</td>\n</tr>\n</tbody>\n</table>\n<p>The table is simple enough... A unique key, the person who the wish belongs to, the item (or wish), a link to the item, whether it's been purchased or not and by whom, and the date it was added.</p>\n<p>To make this model with sqlalchemy we can make a <code>model.py</code> like so:</p>\n<pre><code class=\"language-python\">from database import Base\nfrom sqlalchemy.schema import Column\nfrom sqlalchemy.types import Boolean, Integer, String, Text\n\n\nclass Wishes(Base):\n    __tablename__ = &quot;Wishes&quot;\n    id = Column(Integer, primary_key=True, index=True)\n    person = Column(String(20))\n    item = Column(Text())\n    link = Column(Text())\n    purchased = Column(Boolean())\n    purchased_by = Column(String(90))\n    date_added = Column(String(15))\n</code></pre>\n<h2><a href=\"#schema\" aria-hidden=\"true\" class=\"anchor\" id=\"schema\"></a>Schema</h2>\n<p>One of the best things about FastAPI is trivial integration with pydantic.\nWe can define a schema to ensure any data posted is not missing anything!</p>\n<p>Make a <code>schema.py</code> with the following:</p>\n<pre><code class=\"language-python\">from pydantic import BaseModel\nimport time\nfrom typing import Optional\n\n\nclass wish_schema(BaseModel):\n\n    person: str\n    item: str\n    link: str\n    purchased: bool = False\n    purchased_by: Optional[str] = None\n    date_added: Optional[str] = time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime())\n\n    class Config:\n        orm_mode = True\n\n\nclass patch_schema(BaseModel):\n\n    purchased: bool\n    purchased_by: Optional[str] = None\n\n    class Config:\n        orm_mode = True\n\n</code></pre>\n<p>I have 2 schemas - one for a <code>wish</code> which you'll see down below is used to validate any <code>post</code> requests.</p>\n<p>To simplify things for me I made another schema, <code>patch_schema</code> which I use for the route that updates the table (ie. marking an existing wish as purchased)</p>\n<h2><a href=\"#session\" aria-hidden=\"true\" class=\"anchor\" id=\"session\"></a>Session</h2>\n<p>One of the last things we need is a Session</p>\n<p>So make a <code>session.py</code>...</p>\n<pre><code class=\"language-python\">from database import SessionLocal, engine\nimport model\n\nmodel.Base.metadata.create_all(bind=engine)\n\n\ndef create_get_session():\n    try:\n        db = SessionLocal()\n        yield db\n    finally:\n        db.close()\n</code></pre>\n<p>Our routes will depend on this <code>create_get_session</code> function that will yield a <code>db</code> object through which we'll udpate our database</p>\n<h1><a href=\"#ok-just-do-it-already\" aria-hidden=\"true\" class=\"anchor\" id=\"ok-just-do-it-already\"></a>Ok just do it already!</h1>\n<p>So our <code>main.py</code> will have a few routes in it...</p>\n<p>What do we want to support?</p>\n<ol>\n<li>Getting all wishes</li>\n<li>Getting a specific wish</li>\n<li>Updating a specific wish</li>\n<li>Deleting a wish</li>\n</ol>\n<p>I think the script is fairly self explanatory but here's a few notes...</p>\n<ol>\n<li>We decorate each function with <code>@app.&lt;method&gt;</code> and define <code>response_model</code> as well as <code>status_code</code></li>\n<li>The functions are defined with <code>async</code> (this was my first exposure to this so I can't go in depth on it yet)</li>\n<li>The functions all take a <code>db</code> which is from <code>session.py</code> and that <code>db</code> depends on the <code>create_get_session</code> function</li>\n<li>If the db is being updtes then we type the object used for the update with the appropriate schema (either <code>wish_schema</code> or <code>patch_schema</code>)</li>\n</ol>\n<p>From there we're in true python-land where you can basically guess the methods on <code>db</code> and you'd probably be right... (like <code>query</code>, <code>upddate</code>, <code>delete</code> etc.)</p>\n<pre><code class=\"language-python\">from fastapi import FastAPI, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom typing import List\nfrom model import Wishes\nfrom schema import wish_schema, patch_schema\nfrom session import create_get_session\n\napp = FastAPI()\n\n\n@app.get(&quot;/&quot;)\ndef read_root():\n    return {&quot;message&quot;: &quot;server is up!&quot;}\n\n\n@app.get(&quot;/wishes&quot;, response_model=List[wish_schema], status_code=200)\nasync def read_wishes(db: Session = Depends(create_get_session)):\n    wishes = db.query(Wishes).all()\n    return wishes\n\n\n@app.post(&quot;/wishes&quot;, response_model=wish_schema, status_code=201)\nasync def add_wish(wish: wish_schema, db: Session = Depends(create_get_session)):\n    new_wish = Wishes(\n        person=wish.person,\n        item=wish.item,\n        link=wish.link,\n        purchased=wish.purchased,\n        purchased_by=wish.purchased_by,\n        date_added=wish.date_added,\n    )\n    db.add(new_wish)\n    db.commit()\n\n    return new_wish\n\n\n@app.get(&quot;/wishes/{id}&quot;, response_model=wish_schema, status_code=200)\nasync def get_wish(id: int, db: Session = Depends(create_get_session)):\n    wish = db.query(Wishes).get(id)\n    return wish\n\n\n@app.patch(&quot;/wishes/{id}&quot;, response_model=wish_schema, status_code=200)\nasync def update_wish(\n    id: int, patch: patch_schema, db: Session = Depends(create_get_session)\n):\n    db_wish = db.query(Wishes).get(id)\n    db_wish.purchased = patch.purchased\n    db_wish.purchased_by = patch.purchased_by\n    db.commit()\n    db.refresh(db_wish)\n\n    return db_wish\n\n\n@app.delete(&quot;/wishes/{id}&quot;, status_code=200)\nasync def delete_wish(id: int, db: Session = Depends(create_get_session)):\n    db_wish = db.query(Wishes).get(id)\n    if not db_wish:\n        raise HTTPException(status_code=&quot;404&quot;, detail=&quot;Wish id does not exist&quot;)\n\n    db.delete(db_wish)\n    db.commit()\n\n    return None\n\n</code></pre>\n<h1><a href=\"#my-code\" aria-hidden=\"true\" class=\"anchor\" id=\"my-code\"></a>My Code</h1>\n<p>You can find my repo <a href=\"https://github.com/nicpayne713/wish-lists\">here</a>.</p>\n<p>I'll plan to update and maintain for as long as I use it</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-05-06T00:00:00-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "python",
        "blog",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/pandas-string-contains.html",
      "url": "https://pype.dev/pandas-string-contains.html",
      "title": "Pandas-String-Contains",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<h1><a href=\"#tldr\" aria-hidden=\"true\" class=\"anchor\" id=\"tldr\"></a>TL;DR</h1>\n<p><code>pandas.Series.str.contains</code> accepts regular expressions and this is turned on by <u>default</u>!</p>\n<h1><a href=\"#use-case\" aria-hidden=\"true\" class=\"anchor\" id=\"use-case\"></a>Use case</h1>\n<p>We often need to filter pandas DataFrames based on several string values in a Series.</p>\n<blockquote>\n<p>Notice that sweet pyflyby import 😁!</p>\n</blockquote>\n<pre><code class=\"language-python\">sandbox   main via 3.8.11(sandbox) ipython\n❯ df = pd.DataFrame({&quot;A&quot;: [&quot;string1&quot;, &quot;string2&quot;, &quot;string3&quot;]})\n[PYFLYBY] import pandas as pd\n\nsandbox   main via 3.8.11(sandbox) ipython\n❯ df\n\n         A\n0  string1\n1  string2\n2  string3\n\nsandbox   main via 3.8.11(sandbox) ipython\n❯ df[df.A.str.contains('1') | df.A.str.contains('2')]\n\n         A\n0  string1\n1  string2\n\n</code></pre>\n<p>And this isn't the worst thing in the world, especially for such a tiny example...</p>\n<p>But what if we had dozens or more values to filter on?</p>\n<p>Then it looks so much nicer to create an iterable of the values we want to filter on and join them with an apropriate regex operator (in this case <code>|</code> for <em>inclusive or</em>)</p>\n<pre><code class=\"language-python\">\nsandbox   main via 3.8.11(sandbox) ipython\n❯ vals = [&quot;1&quot;, &quot;2&quot;]  # iterable with whatever is appropriate for your use case\n\nsandbox   main via 3.8.11(sandbox) ipython\n❯ df[df.A.str.contains(&quot;|&quot;.join(vals), regex=True)]\n\n         A\n0  string1\n1  string2\n\n</code></pre>\n<h1><a href=\"#fin\" aria-hidden=\"true\" class=\"anchor\" id=\"fin\"></a>Fin</h1>\n<p>This is a super nice and concise way to do the kind of filtering my team does on a daily basis!</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-05-02T00:00:00-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "python",
        "tech"
      ],
      "language": "en"
    }
  ]
}