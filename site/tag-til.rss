<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Pype.dev</title><link>https://pype.dev</link><description>my mental data-lake</description><pubDate>Sun, 24 Apr 2022 00:00:00 GMT</pubDate><lastBuildDate>Wed, 04 Dec 2024 18:54:42 GMT</lastBuildDate><generator>marmite</generator><item><title>Htop</title><link>https://pype.dev/htop.html</link><author>nicpayne</author><category>til</category><category>tech</category><guid>https://pype.dev/htop.html</guid><pubDate>Sun, 24 Apr 2022 00:00:00 GMT</pubDate><source url="https://pype.dev">tag-til</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p><code>htop</code> is a common command line tool for seeing interactive output of your system resource utilization, running processes, etc.</p>
<p>I've always been super confused about htop showing seemingly the same process several times though...</p>
<h2><a href="#the-fix" aria-hidden="true" class="anchor" id="the-fix"></a>The Fix...</h2>
<p>Just hit <code>H</code>.... makes the view a lot nicer üòÄ</p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Pipx</title><link>https://pype.dev/pipx.html</link><author>nicpayne</author><category>til</category><category>python</category><category>tech</category><guid>https://pype.dev/pipx.html</guid><pubDate>Fri, 22 Apr 2022 00:00:00 GMT</pubDate><source url="https://pype.dev">tag-til</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p><code>pipx</code> is a tool I've been using to solve a few problems of mine...</p>
<ol>
<li>pinning formatting tools like <code>black</code>, <code>flake8</code>, <code>isort</code>, etc. to the same version for all my projects</li>
<li>keeping virtual environments clean of things like <code>cookiecutter</code></li>
<li>python utilities I want system wide but not in the global environment, like <code>visidata</code></li>
</ol>
<h2><a href="#what-is-it" aria-hidden="true" class="anchor" id="what-is-it"></a>What is it?</h2>
<p><code>pip</code> itself is just a package manager like <code>homebrew</code>, <code>apt</code>, etc. But it is tied to a python environment.
If you aren't using a virtual environment then <code>pip</code> will operate inside the global installation of python.</p>
<p>Operating within that environment has burned me several times and now I have a strict virtual environment usage policy.</p>
<p>But there are still things I don't want to have to put in every virtual environment - enter <code>pipx</code></p>
<h2><a href="#whats-it-do" aria-hidden="true" class="anchor" id="whats-it-do"></a>What's it do?</h2>
<p>When you <code>pipx install {package}</code> a stand alone virtual environment gets created (by default in <code>~/.local/pipx/venvs</code>).
THen you can install extra dependencies with <code>pipx inject {package} {dependency}</code></p>
<blockquote>
<p>ex. After <code>pipx install visidata</code> in order to open Excel files you need to <code>pipx inject visidata xlrd</code></p>
</blockquote>
<p>In the example with <code>visidata</code>, I can then use it anywhere, in any project, without re-installing with <code>pip</code> in every env.</p>
<p>Also for the formatting tools - I configure vim to run the <code>pipx</code> versions of them on save - this way I don't have to put them in every project's virtual environment!</p>
<h2><a href="#what-about-pip" aria-hidden="true" class="anchor" id="what-about-pip"></a>What about pip?</h2>
<p>So obviously you can't <code>pipx</code> everything, nor do you want to.
I see it as a safe and better alternative to global package installation.</p>
<p>How can you then be sure that you never <code>pip install</code> into the global env?</p>
<p>Add <code>require-virtualenv = True</code> to your <code>pip.conf</code> and you're good to go!</p>
<p>With that set, if you try to <code>pip install pandas</code> into the global env you'll get a message like this:</p>
<pre><code class="language-bash">
~ on ÓåΩ (us-east-1)  NO PYTHON VENV SET
‚ùØ pip install pandas
ERROR: Could not find an activated virtualenv (required).


</code></pre>
<h2><a href="#end" aria-hidden="true" class="anchor" id="end"></a>End</h2>
<ol>
<li>Disable your system <code>pip</code> to keep your base python safe</li>
<li>Use <code>pipx</code> for tools you want available everywhere or don't have to need in a virtual environment!</li>
</ol>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Fx-Json</title><link>https://pype.dev/fx-json.html</link><author>nicpayne</author><category>til</category><category>tech</category><guid>https://pype.dev/fx-json.html</guid><pubDate>Tue, 19 Apr 2022 00:00:00 GMT</pubDate><source url="https://pype.dev">tag-til</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p><a href="https://github.com/antonmedv/fx">fx</a> is an interactaive JSON viewer for the terminal.</p>
<p>It's a simple tool built with Charmcli's Bubble Tea.</p>
<h2><a href="#installation" aria-hidden="true" class="anchor" id="installation"></a>Installation</h2>
<p>The installation with go was broken for me - both via the link and direct from the repo.
Now I'm not a gopher so I don't really know how to fix that.</p>
<p>Luckily <code>npm install fx</code> also works and got me what I needed!</p>
<h2><a href="#usage" aria-hidden="true" class="anchor" id="usage"></a>Usage</h2>
<p>Usage is simple... <code>fx &lt;json file&gt;</code>.
The Github has a few other ways such as <code>curl ... | fx</code> etc.</p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Typeddict</title><link>https://pype.dev/typeddict.html</link><author>nicpayne</author><category>til</category><category>python</category><category>tech</category><guid>https://pype.dev/typeddict.html</guid><pubDate>Fri, 15 Apr 2022 00:00:00 GMT</pubDate><source url="https://pype.dev">tag-til</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>Type hinting has helped me write code almost as much, if not more, than unit testing.</p>
<p>One thing I love is that with complete type hinting you get a lot more out of your LSP.
Typing dictionaries can be tricky and I recently learned about <code>TypedDict</code> to do exactly what I needed!</p>
<h2><a href="#the-problem" aria-hidden="true" class="anchor" id="the-problem"></a>The Problem</h2>
<p>It might not be straight up obvious what the problem is, especially if you don't utilize tools like <code>mypy</code> or <code>flake8</code> in your development.</p>
<p>My handy-dandy <code>nvim-lsp</code> gives me a lot of feedback when I'm coding and it's immensely helpful.</p>
<p>So with the LSP giving me constant feedback here's the issue:</p>
<pre><code class="language-python">from typing import Dict, List, Union

my_dict: Dict[str, Union[List[str], str]] = {
    &quot;key_1&quot;: &quot;val_1&quot;,
    &quot;key_2&quot;: [&quot;ls_1&quot;, &quot;ls_2&quot;],
}

my_dict[&quot;key_2&quot;].pop()
</code></pre>
<p>With the above script you'll get an annoying warning about using <code>pop</code> on <code>key_2</code>.</p>
<p><figure><img src="/media/typed-dict-warning.png" alt="Alt text" title="dict-warning" /><figcaption>dict-warning</figcaption></figure></p>
<h2><a href="#the-solution" aria-hidden="true" class="anchor" id="the-solution"></a>The Solution</h2>
<p>Maybe you can stomach getting yelled at by your LSP but I like complete silence if at all possible.</p>
<p><code>TypedDict</code>  was the saving grace.</p>
<pre><code class="language-python">from typing import TypedDict

MyDict = TypedDict(&quot;MyDict&quot;, {&quot;key_1&quot;: str, &quot;key_2&quot;: List[str]})

my_typed_dict: MyDict = {
    &quot;key_1&quot;: &quot;val_1&quot;,
    &quot;key_2&quot;: [&quot;ls_1&quot;, &quot;ls_2&quot;],
}


my_typed_dict[&quot;key_2&quot;].pop()
</code></pre>
<p><figure><img src="/media/typed-dict.png" alt="Alt text" title="typeddict" /><figcaption>typeddict</figcaption></figure></p>
<blockquote>
<p>I was able to import TypedDict from typing, mypy_extensions, and typing_extensions</p>
</blockquote>
<p>With <code>TypedDict</code> you define your custom type, match the first argument to <code>TypedDict</code> with the name of the variable (idk why), then type hint each key you expect in the dict!
It's super easy and I think puts you into a position of being extremely explicit with your dictionary variables.
This isn't always desired or appropriate but in most of my use cases it is.</p>
<h2><a href="#rtfm" aria-hidden="true" class="anchor" id="rtfm"></a>RTFM</h2>
<p>There's other implementation of <code>TypedDict</code> and while writing this I saw that most of the docs define a <code>class</code> for the type like this:</p>
<pre><code class="language-python">from typing import TypedDict
class MyDict(TypedDict):
    key_1: str
    key_2: List[str]

my_dict : MyDict = {'key_1': 'val_1', 'key_2': [&quot;ls_1&quot;, &quot;ls_2&quot;]}

</code></pre>
<p><a href="https://peps.python.org/pep-0589/">pep docs</a></p>
<p><a href="https://mypy.readthedocs.io/en/latest/more_types.html#typeddict">mypy docs</a></p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Adblock-Coverage</title><link>https://pype.dev/adblock-coverage.html</link><author>nicpayne</author><category>homelab</category><category>til</category><category>tech</category><guid>https://pype.dev/adblock-coverage.html</guid><pubDate>Mon, 07 Mar 2022 00:00:00 GMT</pubDate><source url="https://pype.dev">tag-til</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>I run pi-hole at home for ad blocking and some internal DNS/DHCP handling.</p>
<p><u>pi hole posts on the way</u></p>
<p>One thing I've never put too much thought in is asking &quot;how well am I doing at blocking?&quot;
There's lots of ways to measure that depending on what you care about but I just learned of <a href="https://d3ward.github.io/toolz/adblock">adblock tester</a>.
It's awesome and gave me a quick glimpse into how my pi-hole is performing on keeping my webpages clean and my DNS history private!</p>
<p>Credits to <a href="https://github.com/d3ward/toolz">d3ward</a> for the awesome tool!</p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item></channel></rss>