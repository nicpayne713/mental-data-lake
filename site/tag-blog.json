{
  "version": "https://jsonfeed.org/version/1",
  "title": "Pype.dev",
  "home_page_url": "https://pype.dev",
  "feed_url": "https://pype.dev/tag-blog.json",
  "description": "my mental data-lake",
  "items": [
    {
      "id": "https://pype.dev/recovering-opnsense.html",
      "url": "https://pype.dev/recovering-opnsense.html",
      "title": "Recovering OPNSense",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>I woke up to faulty internet and after some troubleshooting it turns out the\nroot zfs dataset that OPNSense boots from got corrupted...</p>\n<blockquote>\n<p>PRO-TIP - Auto backup your OPNSense config to Google Drive, git, or\nnextcloud... But if you won't then at least back up your OPNSense config\nsomewhere everytime you update it.</p>\n</blockquote>\n<p>It's too much to recount every issue, so here's a bullet list what worked.</p>\n<ol>\n<li>On a fresh drive install OPNSense</li>\n<li>Plug in the old drive through a USB enclosure - now I'm not sure what would\nhappen if you plugged it in along with the new drive and then booted up.\nBecause both drives will have a zfs pool <code>zroot</code> and the boot dataset is\nautomounted at <code>/zroot/ROOT/default</code>. My old <code>zroot</code> pool was <code>SUSPENDED</code> so it\ndidn't automount</li>\n<li>Because the old <code>zoot/ROOT/default</code> was corrupted I did this to mount it RO:\n<code>zpool import -d &lt;path to zfs partition - /dev/stuff&gt; -N zroot zrootrecovery</code></li>\n</ol>\n<blockquote>\n<p>-d is the zfs flag to import the pool by disk id, -N it to not mount any of\nthe datasets (we need to change mountpoints) and the <code>zroot zrootrecovery</code>\nimports the <code>zroot</code> pool with a new name</p>\n</blockquote>\n<ol start=\"4\">\n<li>Change the mountpoints for all the <code>zrootrecovery</code> datasets to somewhere\nlike <code>/mnt/zrootrecovery</code></li>\n<li>Depending on the mount point you set you'll find a <code>config</code> directory around\n<code>/mnt/zrootrecovery/ROOT/default/config</code> - copy the file you want to another\nmachine via scp or whatever</li>\n<li>Go to OPNSense webui and recover from that config!</li>\n</ol>\n<p>All in all this process took me around 8 hours but I did run into about ever\nissue under the sun (several bad disks in the mix, a laptop that wouldn't live\nboot into a BSD system, etc.)</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2024-11-06T00:00:00-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "blog",
        "homelab"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/wish-list-with-fastapi.html",
      "url": "https://pype.dev/wish-list-with-fastapi.html",
      "title": "Wish-List-With-Fastapi",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>Amazon has crossed the line with me just one too many times now so we are looking to drop them like every other Big Tech provider....</p>\n<p>However, one key feature of Amazon that has been so useful for us is Lists... We can just maintain a list for each of us and then family members can login anytime and check it out...\nThis really alleviates any last minute gift idea stress right before a birthday or something.</p>\n<p>So I need a nice gift list service but I don't want to be locked into one company (like a Target registry or something) and I'd like to host it myself</p>\n<p>The internets had a few options but nothing looked/felt like I wanted to I decided to build my own.</p>\n<h1><a href=\"#the-frontend\" aria-hidden=\"true\" class=\"anchor\" id=\"the-frontend\"></a>The Frontend</h1>\n<p><u>I have no idea how to do front end so stay tuned</u></p>\n<h1><a href=\"#the-backend\" aria-hidden=\"true\" class=\"anchor\" id=\"the-backend\"></a>The Backend</h1>\n<p>FastAPI for the win on this one... I followed a few examples online and what I was able to build in just a few minutes is pretty impressive thanks to the design of FastAPI.</p>\n<p>Some key features are:</p>\n<ol>\n<li>Auto doc generation</li>\n<li>Required typing (which makes #1 possible)</li>\n<li>Built-in api testing in the browser</li>\n<li>Easy integration with sqlalchemy</li>\n<li>Development time so short you won't be done with your coffee before having something up and running!</li>\n</ol>\n<h2><a href=\"#database\" aria-hidden=\"true\" class=\"anchor\" id=\"database\"></a>Database</h2>\n<p>Starting with a simple <code>database.py</code> we can create a sqlalchemy session with a base model with about 7 lines of code...</p>\n<pre><code class=\"language-python\">\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\n\nSQLALCHEMY_DATABASE_URL = &quot;sqlite:///wishes.sqlite3&quot;\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n</code></pre>\n<h2><a href=\"#model\" aria-hidden=\"true\" class=\"anchor\" id=\"model\"></a>Model</h2>\n<p>For my wish list I needed just a simple table:</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">id</th>\n<th align=\"left\">person</th>\n<th align=\"left\">item</th>\n<th align=\"left\">link</th>\n<th align=\"left\">purchased</th>\n<th align=\"left\">purchased_by</th>\n<th align=\"left\">date_added</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"right\">1</td>\n<td align=\"left\">pypeaday</td>\n<td align=\"left\">A sweet item</td>\n<td align=\"left\"><a href=\"http://www.mystore.store\">www.mystore.store</a></td>\n<td align=\"left\">False</td>\n<td align=\"left\">dad</td>\n<td align=\"left\">2022-05-05 21:55:09</td>\n</tr>\n<tr>\n<td align=\"right\">2</td>\n<td align=\"left\">pypeaday</td>\n<td align=\"left\">A bitter item</td>\n<td align=\"left\"><a href=\"http://www.bitterstore.com\">www.bitterstore.com</a></td>\n<td align=\"left\">True</td>\n<td align=\"left\">Mrs. pypeaday</td>\n<td align=\"left\">2022-05-06 06:55:54</td>\n</tr>\n</tbody>\n</table>\n<p>The table is simple enough... A unique key, the person who the wish belongs to, the item (or wish), a link to the item, whether it's been purchased or not and by whom, and the date it was added.</p>\n<p>To make this model with sqlalchemy we can make a <code>model.py</code> like so:</p>\n<pre><code class=\"language-python\">from database import Base\nfrom sqlalchemy.schema import Column\nfrom sqlalchemy.types import Boolean, Integer, String, Text\n\n\nclass Wishes(Base):\n    __tablename__ = &quot;Wishes&quot;\n    id = Column(Integer, primary_key=True, index=True)\n    person = Column(String(20))\n    item = Column(Text())\n    link = Column(Text())\n    purchased = Column(Boolean())\n    purchased_by = Column(String(90))\n    date_added = Column(String(15))\n</code></pre>\n<h2><a href=\"#schema\" aria-hidden=\"true\" class=\"anchor\" id=\"schema\"></a>Schema</h2>\n<p>One of the best things about FastAPI is trivial integration with pydantic.\nWe can define a schema to ensure any data posted is not missing anything!</p>\n<p>Make a <code>schema.py</code> with the following:</p>\n<pre><code class=\"language-python\">from pydantic import BaseModel\nimport time\nfrom typing import Optional\n\n\nclass wish_schema(BaseModel):\n\n    person: str\n    item: str\n    link: str\n    purchased: bool = False\n    purchased_by: Optional[str] = None\n    date_added: Optional[str] = time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime())\n\n    class Config:\n        orm_mode = True\n\n\nclass patch_schema(BaseModel):\n\n    purchased: bool\n    purchased_by: Optional[str] = None\n\n    class Config:\n        orm_mode = True\n\n</code></pre>\n<p>I have 2 schemas - one for a <code>wish</code> which you'll see down below is used to validate any <code>post</code> requests.</p>\n<p>To simplify things for me I made another schema, <code>patch_schema</code> which I use for the route that updates the table (ie. marking an existing wish as purchased)</p>\n<h2><a href=\"#session\" aria-hidden=\"true\" class=\"anchor\" id=\"session\"></a>Session</h2>\n<p>One of the last things we need is a Session</p>\n<p>So make a <code>session.py</code>...</p>\n<pre><code class=\"language-python\">from database import SessionLocal, engine\nimport model\n\nmodel.Base.metadata.create_all(bind=engine)\n\n\ndef create_get_session():\n    try:\n        db = SessionLocal()\n        yield db\n    finally:\n        db.close()\n</code></pre>\n<p>Our routes will depend on this <code>create_get_session</code> function that will yield a <code>db</code> object through which we'll udpate our database</p>\n<h1><a href=\"#ok-just-do-it-already\" aria-hidden=\"true\" class=\"anchor\" id=\"ok-just-do-it-already\"></a>Ok just do it already!</h1>\n<p>So our <code>main.py</code> will have a few routes in it...</p>\n<p>What do we want to support?</p>\n<ol>\n<li>Getting all wishes</li>\n<li>Getting a specific wish</li>\n<li>Updating a specific wish</li>\n<li>Deleting a wish</li>\n</ol>\n<p>I think the script is fairly self explanatory but here's a few notes...</p>\n<ol>\n<li>We decorate each function with <code>@app.&lt;method&gt;</code> and define <code>response_model</code> as well as <code>status_code</code></li>\n<li>The functions are defined with <code>async</code> (this was my first exposure to this so I can't go in depth on it yet)</li>\n<li>The functions all take a <code>db</code> which is from <code>session.py</code> and that <code>db</code> depends on the <code>create_get_session</code> function</li>\n<li>If the db is being updtes then we type the object used for the update with the appropriate schema (either <code>wish_schema</code> or <code>patch_schema</code>)</li>\n</ol>\n<p>From there we're in true python-land where you can basically guess the methods on <code>db</code> and you'd probably be right... (like <code>query</code>, <code>upddate</code>, <code>delete</code> etc.)</p>\n<pre><code class=\"language-python\">from fastapi import FastAPI, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom typing import List\nfrom model import Wishes\nfrom schema import wish_schema, patch_schema\nfrom session import create_get_session\n\napp = FastAPI()\n\n\n@app.get(&quot;/&quot;)\ndef read_root():\n    return {&quot;message&quot;: &quot;server is up!&quot;}\n\n\n@app.get(&quot;/wishes&quot;, response_model=List[wish_schema], status_code=200)\nasync def read_wishes(db: Session = Depends(create_get_session)):\n    wishes = db.query(Wishes).all()\n    return wishes\n\n\n@app.post(&quot;/wishes&quot;, response_model=wish_schema, status_code=201)\nasync def add_wish(wish: wish_schema, db: Session = Depends(create_get_session)):\n    new_wish = Wishes(\n        person=wish.person,\n        item=wish.item,\n        link=wish.link,\n        purchased=wish.purchased,\n        purchased_by=wish.purchased_by,\n        date_added=wish.date_added,\n    )\n    db.add(new_wish)\n    db.commit()\n\n    return new_wish\n\n\n@app.get(&quot;/wishes/{id}&quot;, response_model=wish_schema, status_code=200)\nasync def get_wish(id: int, db: Session = Depends(create_get_session)):\n    wish = db.query(Wishes).get(id)\n    return wish\n\n\n@app.patch(&quot;/wishes/{id}&quot;, response_model=wish_schema, status_code=200)\nasync def update_wish(\n    id: int, patch: patch_schema, db: Session = Depends(create_get_session)\n):\n    db_wish = db.query(Wishes).get(id)\n    db_wish.purchased = patch.purchased\n    db_wish.purchased_by = patch.purchased_by\n    db.commit()\n    db.refresh(db_wish)\n\n    return db_wish\n\n\n@app.delete(&quot;/wishes/{id}&quot;, status_code=200)\nasync def delete_wish(id: int, db: Session = Depends(create_get_session)):\n    db_wish = db.query(Wishes).get(id)\n    if not db_wish:\n        raise HTTPException(status_code=&quot;404&quot;, detail=&quot;Wish id does not exist&quot;)\n\n    db.delete(db_wish)\n    db.commit()\n\n    return None\n\n</code></pre>\n<h1><a href=\"#my-code\" aria-hidden=\"true\" class=\"anchor\" id=\"my-code\"></a>My Code</h1>\n<p>You can find my repo <a href=\"https://github.com/nicpayne713/wish-lists\">here</a>.</p>\n<p>I'll plan to update and maintain for as long as I use it</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-05-06T00:00:00-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "python",
        "blog",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/tdarr.html",
      "url": "https://pype.dev/tdarr.html",
      "title": "Tdarr",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-04-28T00:00:00-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "blog",
        "homelab",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/home-server-refactor.html",
      "url": "https://pype.dev/home-server-refactor.html",
      "title": "Home-Server-Refactor",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>My current homelab setup is not great but it works...</p>\n<h1><a href=\"#proxmox-on-poweredge-r610\" aria-hidden=\"true\" class=\"anchor\" id=\"proxmox-on-poweredge-r610\"></a>Proxmox on PowerEdge R610</h1>\n<p>I boot off an SD card and have 1 SSD and 5 HDDs configured as a JBOD array using a Dell H700 SAS controller.\nI cannot boot from a disk using this controller and I can't get the firmware configured in a way to allow it.\nSo I have 1 SSD as a ZFS array that I've been putting my VM images on, and the 5 HDDs are passed through to a TrueNAS VM where I handle all the ZFS stuff there... kind of meta because I then attached those drives to Proxmox as a CIFS share.</p>\n<h1><a href=\"#truenas-on-dedicated-box\" aria-hidden=\"true\" class=\"anchor\" id=\"truenas-on-dedicated-box\"></a>TrueNAS on dedicated box</h1>\n<p>I have an on-prem backup that is just an old desktop running TrueNAS\nI regularly backup the 5 disk RAIDZ2 array from my Proxmox host (managed by a TrueNAS VM) to this backup box</p>\n<p>Currently there is nothing else running on this machine since it's my &quot;backup&quot;</p>\n<h1><a href=\"#jellyfin\" aria-hidden=\"true\" class=\"anchor\" id=\"jellyfin\"></a>Jellyfin</h1>\n<p>I was HWA for Jellyfin, but hardware passthrough on the R610 is finicky or broken so Jellyfin is running on an Ubuntu host.</p>\n<p>I could put UBuntu on the R610 and give up &quot;true virtualization&quot;. Then I'd manage the SMB share myself.\nIf I do that then I would get rid of &quot;users&quot; I think, ie. basically forgo least-priviledges since I'm not sure how hard that is to manage.</p>\n<p>On the other hand, direct access to the smb config might make it easier?</p>\n<p>I have the media array on Jellyfin box setup as NFS which was really easy with ZFS... I think SMB would be just as easy.</p>\n<h1><a href=\"#plan-of-attack\" aria-hidden=\"true\" class=\"anchor\" id=\"plan-of-attack\"></a>Plan of attack...</h1>\n<ol>\n<li>Move all vm disks to individual datasets on the NAS</li>\n<li>Backup docker data... not sure how well this will work, maybe just start over?</li>\n<li>Clean up Ansible playbooks on the user side of things - stick with neville vs just using my own name?</li>\n<li>Install Ubuntu 20 or 22 on a 2.5&quot; drive that I'll toss in this SSD enclosure (or a usb thumb stick?)</li>\n<li>Re-deploy everything with ansible-playbook and configure...</li>\n</ol>\n<h2><a href=\"#configuration\" aria-hidden=\"true\" class=\"anchor\" id=\"configuration\"></a>Configuration...</h2>\n<ol start=\"0\">\n<li>THE FREAKING NAS -&gt; just import zfs array and configure SMB?</li>\n</ol>\n<p>1.~~ Nextcloud users and connections.. might be able to just copy the data folder? not sure about the database... try spinning it up in the sandbox vm and see if stuff is there ~~\n2.~~ *arr suite, media profiles and connections to transmission... nothing major~~\n3. transmission - should be deploy and go\n4. ombi and jackett should also just work after some config again\n5. <del>traefik should just work</del>\n6. <del>try to bring up pi-hole from the vm that's already running</del>\n7. <del>heimdall will hopefully just be copying the data folder from the existind docker one'</del>\n8.~~ booksonic can be reconfigured easily~~\n9. <del>portainer... hopefully just copying data folder over?</del>\n10. <del>littlelink</del>, small-group-notes, and blog (at home) will need manually re-deployed once Ubuntu is installed bare-metal</p>\n<h2><a href=\"#big-big-big-todos\" aria-hidden=\"true\" class=\"anchor\" id=\"big-big-big-todos\"></a>BIG BIG BIG TODOS</h2>\n<ol>\n<li>\n<p>Sanoid/syncoid! Get snapshots going and backups configured with on prem TrueNAS</p>\n</li>\n<li>\n<p>Wireguard setup on DA.</p>\n</li>\n<li>\n<p>network share on printer for paperless\n<del>4. update peperless in ansible-nas</del></p>\n</li>\n<li>\n<p><del>Just deploy paperless manually... monitor/manage with portainer</del></p>\n</li>\n<li>\n<p>booksonic not seeing audiobooks/podcasts</p>\n</li>\n<li>\n<p>need a smb user to map nas/documents to the printer for paperless</p>\n</li>\n<li>\n<p>wireguard setup now on kps phone, desktop, server (and backup truenas?), and dad's pi</p>\n</li>\n<li>\n<p><del>verify lan services work</del></p>\n</li>\n<li>\n<p><del>Tdar so Jellyfin can work better</del></p>\n</li>\n</ol>\n<p>Snapshot business might be cause of all the docker containers and docker using\nZFS backend... take everything down and try removing</p>\n<ol>\n<li>file browser - currently I just one-clicked in portainer, I want to make a stack with my own config file which I'll rip from techno tip and then add my traefik lables too</li>\n</ol>\n<p>Forget filebrowser - going to just use Nextcloud for how it's supposed to be used.\n3. Need to organize those files in nextcloud</p>\n<h2><a href=\"#check-this----ran-as-cp-utility-in-tmux-window-no-progress-bars-or-anything-its-in-ansible-nas-session---window-3\" aria-hidden=\"true\" class=\"anchor\" id=\"check-this----ran-as-cp-utility-in-tmux-window-no-progress-bars-or-anything-its-in-ansible-nas-session---window-3\"></a>CHECK THIS -&gt;  ran as 'cp' utility in tmux window, no progress bars or anything. it's in ansible-nas session -&gt; window 3</h2>\n<p>Olivet bible stuff going to /tmp/olivet/ -&gt; will move this to nextcloud, ideally by the app via appimage so that the db updates and I don't have to run that occ script\nI wnat to organize &quot;home&quot; still in nextcloud</p>\n<p>setup Sanoid</p>\n<p>clean up bitwarden\nlearn nextcloud sharing -&gt; maybe just give a link to grandma?\nrest of todos -&gt; document db and sanoid + zfs.rent</p>\n<p>Check on mom's will\ndo media thing for church - split vocals on mp3/4</p>\n<p>permission-data playbook changes everything to ansible-nas:ansible-nas but then samba task will re-permission some stuff to root:users... this looks fine\nI had to add <code>group</code> to the samba config in my playbook to get user auth to work with samba\nThis isn't fully working... it works from cli but my python process can't write to a folder in dump after 777.... need to learn more?\nSo I can make a file after adding the ansible-nas group to config, but I still cannot make a directory on the smb mount...</p>\n<p>ADDING <code>inherit permission = yes</code> under <code>[global]</code> in the smb.conf worked!</p>\n<p>still not working from printer...\nI think what I want is to setup 2 scan options - single docs right to paperless, or combined scans to dump, then manually split and send to paperless</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-04-10T00:00:00-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "blog",
        "tech"
      ],
      "language": "en"
    }
  ]
}