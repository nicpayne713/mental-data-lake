{
  "version": "https://jsonfeed.org/version/1",
  "title": "Pype.dev",
  "home_page_url": "https://pype.dev",
  "feed_url": "https://pype.dev/tag-tech.json",
  "description": "my mental data-lake",
  "items": [
    {
      "id": "https://pype.dev/the-importance-of-nostr-according-to-chatgpt.html",
      "url": "https://pype.dev/the-importance-of-nostr-according-to-chatgpt.html",
      "title": "The Importance of Nostr According to ChatGPT",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<h2><a href=\"#disclaimer\" aria-hidden=\"true\" class=\"anchor\" id=\"disclaimer\"></a>Disclaimer</h2>\n<p>This was written by ChatGPT with zero oversight from me. There are a few things that are not 100% accurate, but the main idea is there... I am hoping to actually write about my experience with nostr as I get more involved on the platform.</p>\n<h3><a href=\"#the-power-of-the-decentralized-social-media-platform-nostr-a-guide-for-beginners\" aria-hidden=\"true\" class=\"anchor\" id=\"the-power-of-the-decentralized-social-media-platform-nostr-a-guide-for-beginners\"></a>The Power of the Decentralized Social Media Platform Nostr: A Guide for Beginners</h3>\n<p>Social media has become a cornerstone of modern communication, allowing individuals to connect across borders and share ideas instantly. However, traditional platforms have raised concerns about censorship, data privacy, and the monopolistic control of user-generated content. <strong>Nostr (Notes and Other Stuff Transmitted by Relays)</strong>, a decentralized social media protocol, offers a revolutionary alternative by emphasizing freedom, privacy, and user autonomy. This essay explores the transformative power of Nostr, why it matters, and provides a practical guide for beginners to get started.</p>\n<hr />\n<h3><a href=\"#the-power-of-decentralization-why-nostr-matters\" aria-hidden=\"true\" class=\"anchor\" id=\"the-power-of-decentralization-why-nostr-matters\"></a>The Power of Decentralization: Why Nostr Matters</h3>\n<p>At its core, Nostr is a decentralized protocol designed to enable social media functionality without reliance on centralized servers. Unlike traditional platforms such as Twitter or Facebook, which depend on centralized infrastructure owned by corporations, Nostr operates on a peer-to-peer network facilitated by relays. This structural shift offers several key advantages:</p>\n<ol>\n<li>\n<p><strong>Freedom of Expression</strong><br />\nCentralized platforms often act as gatekeepers of content, enforcing moderation policies that can result in censorship. Nostr, on the other hand, allows users to communicate directly without interference from centralized authorities. This makes it particularly valuable for individuals in regions with restrictive speech laws.</p>\n</li>\n<li>\n<p><strong>Data Ownership</strong><br />\nOn traditional platforms, users sacrifice ownership of their data, which is often monetized by corporations. Nostr empowers users to retain control over their content and personal information by using cryptographic keys to manage identity.</p>\n</li>\n<li>\n<p><strong>Resilience Against Shutdowns</strong><br />\nCentralized platforms are vulnerable to outages, government intervention, or corporate decisions to deplatform users. Nostr’s decentralized nature ensures that no single entity can shut it down, providing a more resilient communication medium.</p>\n</li>\n<li>\n<p><strong>Open and Transparent Ecosystem</strong><br />\nAs an open protocol, Nostr allows developers to create interoperable applications and services. This fosters innovation, enabling users to choose from a variety of client applications while maintaining access to the same network.</p>\n</li>\n</ol>\n<hr />\n<h3><a href=\"#how-nostr-works-the-technical-backbone\" aria-hidden=\"true\" class=\"anchor\" id=\"how-nostr-works-the-technical-backbone\"></a>How Nostr Works: The Technical Backbone</h3>\n<p>Nostr uses a simple yet effective system to transmit messages:</p>\n<ul>\n<li><strong>Public and Private Keys</strong>: Each user generates a pair of cryptographic keys. The private key acts as their identity, while the public key serves as their address on the network.</li>\n<li><strong>Relays</strong>: These are lightweight servers that broadcast messages. Users send notes (messages) to relays, which distribute them to other users.</li>\n<li><strong>Clients</strong>: Users access Nostr through client applications, which function as user interfaces. Examples include Damus (for mobile) and Amethyst.</li>\n</ul>\n<p>This decentralized architecture eliminates single points of failure and gives users the flexibility to connect via multiple clients.</p>\n<hr />\n<h3><a href=\"#a-beginners-guide-to-getting-started-with-nostr\" aria-hidden=\"true\" class=\"anchor\" id=\"a-beginners-guide-to-getting-started-with-nostr\"></a>A Beginner’s Guide to Getting Started with Nostr</h3>\n<p>For those new to Nostr, the decentralized structure might seem intimidating at first. However, with the following step-by-step guide, you’ll be able to join the network and start interacting with others seamlessly.</p>\n<h4><a href=\"#step-1-generate-your-keys\" aria-hidden=\"true\" class=\"anchor\" id=\"step-1-generate-your-keys\"></a>Step 1: Generate Your Keys</h4>\n<p>The first step is to create a pair of cryptographic keys:</p>\n<ul>\n<li><strong>Private Key</strong>: This is your unique identifier and must be kept secret. Treat it like a password.</li>\n<li><strong>Public Key</strong>: This is your &quot;address&quot; on Nostr and can be shared with others.</li>\n</ul>\n<p>Most Nostr client applications automatically generate these keys for you upon sign-up. Ensure you securely back up your private key, as losing it means losing access to your account permanently.</p>\n<h4><a href=\"#step-2-choose-a-nostr-client\" aria-hidden=\"true\" class=\"anchor\" id=\"step-2-choose-a-nostr-client\"></a>Step 2: Choose a Nostr Client</h4>\n<p>Clients are the gateways through which you interact with the Nostr protocol. Popular options include:</p>\n<ul>\n<li><strong>Damus</strong> (iOS/Android): User-friendly and feature-rich.</li>\n<li><strong>Amethyst</strong> (Android): Tailored for Android users with a sleek interface.</li>\n<li><strong>Web Clients</strong>: Platforms like <strong>Nostr.guru</strong> or <strong>Iris</strong> allow you to access Nostr via a browser.</li>\n</ul>\n<p>Install your chosen client and log in using your keys.</p>\n<h4><a href=\"#step-3-connect-to-relays\" aria-hidden=\"true\" class=\"anchor\" id=\"step-3-connect-to-relays\"></a>Step 3: Connect to Relays</h4>\n<p>Relays are the backbone of the Nostr network, enabling message distribution. Most clients come pre-configured with default relays, but you can add more for better connectivity and reliability. Simply search for &quot;Nostr relay services&quot; and paste the relay URLs into your client settings.</p>\n<h4><a href=\"#step-4-explore-and-interact\" aria-hidden=\"true\" class=\"anchor\" id=\"step-4-explore-and-interact\"></a>Step 4: Explore and Interact</h4>\n<p>Once set up, you can start exploring the network:</p>\n<ul>\n<li><strong>Follow Users</strong>: Add public keys of other users to your feed.</li>\n<li><strong>Post Notes</strong>: Share your thoughts or updates by creating a note, similar to a tweet.</li>\n<li><strong>Engage</strong>: Interact with others by replying to or liking their notes.</li>\n</ul>\n<h4><a href=\"#step-5-customize-your-experience\" aria-hidden=\"true\" class=\"anchor\" id=\"step-5-customize-your-experience\"></a>Step 5: Customize Your Experience</h4>\n<ul>\n<li><strong>Choose Relays Carefully</strong>: Some relays may specialize in certain topics or enforce content moderation policies. Tailor your relay list based on your interests and values.</li>\n<li><strong>Backup Your Keys</strong>: Use secure storage solutions like hardware wallets or encrypted cloud storage to protect your private key.</li>\n<li><strong>Experiment with Clients</strong>: Try multiple clients to find the one that suits your preferences.</li>\n</ul>\n<hr />\n<h3><a href=\"#the-broader-implications-of-nostr\" aria-hidden=\"true\" class=\"anchor\" id=\"the-broader-implications-of-nostr\"></a>The Broader Implications of Nostr</h3>\n<p>The emergence of platforms like Nostr signals a broader shift toward decentralization in the digital era. By prioritizing user autonomy and privacy, Nostr challenges the centralized paradigms that have dominated the social media landscape for years. Its open architecture invites developers, activists, and everyday users to co-create a more inclusive and censorship-resistant digital space.</p>\n<p>Moreover, Nostr's impact extends beyond social media. Its decentralized protocol can be adapted for various purposes, such as secure communication, decentralized marketplaces, or even collaborative work environments. This versatility makes it a foundational building block for the next generation of internet technologies.</p>\n<hr />\n<h3><a href=\"#conclusion\" aria-hidden=\"true\" class=\"anchor\" id=\"conclusion\"></a>Conclusion</h3>\n<p>Nostr represents a profound evolution in social media, offering a decentralized, user-centric alternative to traditional platforms. By empowering individuals with control over their identity, data, and content, it paves the way for a freer and more resilient online ecosystem. While its decentralized nature may pose a learning curve for beginners, the benefits far outweigh the challenges. By embracing Nostr, we can collectively take a step toward a more open and equitable digital future.</p>\n<p>For those ready to explore this transformative platform, the journey begins with a simple act: generating your keys and connecting to the network. From there, the power of decentralized communication lies in your hands.</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2025-01-24T06:38:03-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "nostr",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/using-my-own-domain-on-nostr.html",
      "url": "https://pype.dev/using-my-own-domain-on-nostr.html",
      "title": "Using my own domain on nostr",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>After generating a keypair on a nostr app (I started with primal) I copied my\npublic key to <code>/.well-known/nostr.json</code> and put that at the root of my site at\n<code>https://pype.dev</code>.</p>\n<p>The file looks like this:</p>\n<pre><code class=\"language-json\">\n{\n  “names”: {\n    “nic”: “npub1q3fsec2vcv99v80ga72dlv90qwkqmuxqcr6mdyumcmpkgudlhrespyurfj”\n  }\n}\n</code></pre>\n<p>So now I can use <code>nic@pype.dev</code> as on nostr because the client will verify the\npubkey associated with my profile with my domain!</p>\n<blockquote>\n<p>big upgrade from <whatever>@primal.net</p>\n</blockquote>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2025-01-24T06:28:19-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "nostr",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/deployments-are-not-statefulsets.html",
      "url": "https://pype.dev/deployments-are-not-statefulsets.html",
      "title": "Deployments are not StatefulSets",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>I was debugging some ArgoCD stuff earlier today and I love using k9s to explore\nmy k8s resources.</p>\n<p>The TLDR is that I put some bad env vars in the <code>global</code> values for my ArgoCD\npods, this caused the webUI to hang. An easy way to push things through is to\nopen k9s, view the Deployments, and edit the env vars there so the pods can be\nin the right state to restart and pickup the changes (you've obviously fixed\nthe values file already right?)</p>\n<p>Well the Notification Controller was the pod hanging, and I couldn't find it in\nthe Deployments view! This blew my mind... until I realized that it was a\nStateful Set.</p>\n<p>So, this is not a comparison of the 2 - this is just a note to say that all I\nhad to do was find the StatefulSets in k9s and do the same workflow for editing\nwhat I needed to edit to get the pods into workable state while working on the\nvalues file...</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2025-01-15T18:07:57-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "infrastructure",
        "tech",
        "k8s"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/docker-context-and-an-issue-to-question-your-sanity.html",
      "url": "https://pype.dev/docker-context-and-an-issue-to-question-your-sanity.html",
      "title": "docker context (and an issue to question your sanity)",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>docker contexts are great, would recommend putting them in your prompt though (via starship or something else)... here's why</p>\n<p>I like to manage my containers remotely - I have a nice development setup on my desktop and I try to keep my server as bare-bones as possible. For a while I've been using ansible which makes it easy to manage configuration etc on other machines. But I recently learned about docker contexts and I'm planning to scale down my homelab management to just docker-compose stacks rather than a bunch of super complicated ansible playbooks</p>\n<p>So, setting up a context is easy - it's basically an ssh connection to another machine!</p>\n<p><code>docker context create koober --docker &quot;host=ssh://nic@koober&quot;</code></p>\n<p><code>koober</code> is one of my dev machines and my <code>~/.ssh/config</code> is setup such that I can <code>ssh nic@koober</code>, this makes the context work really seamlessly.</p>\n<p>So there's the <code>default</code> context (the machine you're on) and now I have <code>koober</code></p>\n<p>To use it you run <code>docker context use koober</code></p>\n<p>And then to check we can <code>ls</code> the contexts</p>\n<pre><code>docker context ls\nNAME       DESCRIPTION                               DOCKER ENDPOINT               ERROR\ndefault    Current DOCKER_HOST based configuration   unix:///var/run/docker.sock   \nkoober *                                             ssh://nic@koober\n</code></pre>\n<blockquote>\n<p>Notice the * - that indicates that's our current context.</p>\n</blockquote>\n<h2><a href=\"#trouble\" aria-hidden=\"true\" class=\"anchor\" id=\"trouble\"></a>Trouble</h2>\n<p>Now here's where things get hairy... you've gotta be super-aware of what context you're using. I have an indicator in my starship prompt that shows the current context, but since I'm new to using them I kind of didn't notice it until I ran into this issue...</p>\n<p>I'm working on a python application in docker but was not able to execute the entrypoint even though I KNEW the file was there... let's take a look</p>\n<h3><a href=\"#example\" aria-hidden=\"true\" class=\"anchor\" id=\"example\"></a>Example</h3>\n<p>Here's a minimal hello world applycation in docker to illustrate the issue</p>\n<pre><code class=\"language-python\"># main.py\nprint(&quot;hello world&quot;)\n</code></pre>\n<pre><code class=\"language-Dockerfile\"># Use an official Python runtime as a parent image\nFROM python:3.11-slim\n\n# Set the working directory in the container\nWORKDIR /app\n\n# Copy the current directory contents into the container at /app\nCOPY . /app\n\n# Run the main.py script as the container's main process\nCMD [&quot;python&quot;, &quot;main.py&quot;]\n</code></pre>\n<pre><code class=\"language-yaml\">services:\n  hello-world:\n    build: .\n    volumes:\n      - .:/app\n</code></pre>\n<p>Notice volume mounting in my project directory <code>.</code> to <code>/app</code> as a common practice to develop inside the container</p>\n<p>Here's where I started to question my sanity...</p>\n<pre><code class=\"language-bash\">✗ docker compose up                                            \n[+] Running 1/0\n ✔ Container docker-context-example-hello-world-1  Created                                                                                                                                                                                                                                                              0.0s \nAttaching to hello-world-1\nhello-world-1  | python: can't open file '/app/main.py': [Errno 2] No such file or directory\nhello-world-1 exited with code 2\n</code></pre>\n<p><code>python can't open file</code>? hmm... Let's take a look at the image</p>\n<p>First let's make sure we get the image name right</p>\n<pre><code class=\"language-bash\">✗ docker container ls -a              \nCONTAINER ID   IMAGE                                           COMMAND                  CREATED          STATUS                       PORTS                                                                                  NAMES\n3d7285fc39e2   docker-context-example-hello-world              &quot;python main.py&quot;         10 minutes ago   Exited (2) 44 seconds ago                                                                                           docker-context-example-hello-world-1\n</code></pre>\n<p>Now we can <code>docker run --rm -it --entrypoint /bin/bash --name debug docker-context-example-hello-world</code></p>\n<pre><code class=\"language-bash\">❯ docker run --rm -it --entrypoint /bin/bash --name debug docker-context-example-hello-world  \nroot@ee46d0e22de8:/app# python main.py\nHello, World!\nroot@ee46d0e22de8:/app# \n</code></pre>\n<p>WHAT THE HECK??</p>\n<h2><a href=\"#what-happened\" aria-hidden=\"true\" class=\"anchor\" id=\"what-happened\"></a>What happened...</h2>\n<p>What happened turns out to be pretty simple once we realize I'm using contexts...</p>\n<p><code>koboer</code> is a remote context, the <code>docker run</code> and <code>docker compose up</code> commands are interacting with the docker socket on that machine.</p>\n<p>So if I compose up the stack notice that there's a volume bind mount in there - well those do <em>not</em> work with contexts (or at least I'm not aware of hose to make it work) and so the <code>/app</code> directory was getting blown away essentially with an empty overlay...</p>\n<p>But when running with just <code>docker run</code> with no volume mount, the code was copied in during the build and is right where we expect it...</p>\n<h3><a href=\"#lets-prove-it\" aria-hidden=\"true\" class=\"anchor\" id=\"lets-prove-it\"></a>Let's prove it</h3>\n<pre><code class=\"language-bash\">❯ docker run --rm -it --entrypoint /bin/bash --name debug -v .:/app docker-context-example-hello-world\nroot@903f591c0384:/app# python main.py\npython: can't open file '/app/main.py': [Errno 2] No such file or directory\nroot@903f591c0384:/app# \n</code></pre>\n<pre><code>Adding a `-v .:/app` to match the compose file, we get the same error...\n</code></pre>\n<p>If we switch to the default context we are back up and running as expected</p>\n<pre><code class=\"language-bash\">✗ docker context use default\ndefault\nCurrent context is now &quot;default&quot;\n\nnic in /tmp/docker-context-example  via   v3.13.0  (dev) 󰒄 󱔎 NO PYTHON ENVIORNMENT SET \n❯ docker compose up         \n[+] Running 1/0\n ✔ Container docker-context-example-hello-world-1  Created                                                                                                                                                                                                                                                              0.0s \nAttaching to hello-world-1\nhello-world-1  | Hello, World!\nhello-world-1 exited with code 0\n\nnic in /tmp/docker-context-example  via   v3.13.0  (dev) 󰒄 󱔎 NO PYTHON ENVIORNMENT SET \n❯ docker run --rm -it --entrypoint /bin/bash --name debug -v .:/app docker-context-example-hello-world\nroot@4045b6aa8883:/app# python main.py\nHello, World!\nroot@4045b6aa8883:/app# \n</code></pre>\n<p>Successful runs on both accounts with the volume mount</p>\n<h2><a href=\"#tldr\" aria-hidden=\"true\" class=\"anchor\" id=\"tldr\"></a>TLDR</h2>\n<p>Context is king</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2024-12-19T05:59:30-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "python",
        "terminal",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/add-a-healthcheck-to-your-fastapi-app.html",
      "url": "https://pype.dev/add-a-healthcheck-to-your-fastapi-app.html",
      "title": "Add a healthcheck to your FastAPI app",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>I'm building a few FastAPI apps to throw in docker and run on my homelab... I wanted to add healthchecks and here's a simple way to do it</p>\n<p>Make sure to install <code>curl</code> in the dockerfile (near the top for effeciency)</p>\n<pre><code># Install curl with minimal dependencies\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y --no-install-recommends curl &amp;&amp; \\\n    apt-get clean &amp;&amp; \\\n    rm -rf /var/lib/apt/lists/*\n\n</code></pre>\n<p>Then I recommend making compose files even for single image deployments</p>\n<pre><code>services:\n  app:\n    build: .\n    volumes:\n      - type: bind\n        source: .\n        target: /app\n    environment:\n      - PYTHONPATH=/app\n      - DOCKER_ENV=true\n      - UV_VIRTUALENV=/opt/app-env\n    user: &quot;1000:1000&quot;\n    restart: unless-stopped\n    healthcheck:\n      test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:8000/health&quot;]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 10s\n\n</code></pre>\n<p>Then finally you'll need a <code>/health</code> endpoint</p>\n<pre><code class=\"language-python\">\n@app.get(&quot;/health&quot;, response_class=HTMLResponse)\nasync def health_check():\n    &quot;&quot;&quot;\n    A health check endpoint that returns a status message.\n    &quot;&quot;&quot;\n    return &quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Service is healthy&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;\n\n</code></pre>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2024-12-15T15:41:36-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "python",
        "homelab",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/statically-io-to-help-me-out.html",
      "url": "https://pype.dev/statically-io-to-help-me-out.html",
      "title": "statically.io to help me out",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p><a href=\"https://statically.io\">statically.io</a> offers a CDN that I'm going to try to lean into for images in my blog. My hope is that the builds get and stay fast, and that page loads are fast too.</p>\n<p>Example:</p>\n<pre><code class=\"language-html\">\n&lt;img src=&quot;https://cdn.statically.io/gh/pypeaday/images.pype.dev/main/static/skimpy-zsh.png&quot; alt=&quot;Skimpy ZSH&quot; title=&quot;A fancy data summary in the shell&quot; /&gt;\n</code></pre>\n<img src=\"https://cdn.statically.io/gh/pypeaday/images.pype.dev/main/static/skimpy-zsh.png\" alt=\"Skimpy ZSH\" title=\"A fancy data summary in the shell\" />\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2024-12-14T13:35:31-00:00",
      "image": "https://cdn.statically.io/gh/pypeaday/images.pype.dev/main/static/skimpy-zsh.png",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "infrastructure",
        "tech",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/statically-io-to-help-me-out.html",
      "url": "https://pype.dev/statically-io-to-help-me-out.html",
      "title": "statically.io to help me out",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p><a href=\"https://statically.io\">statically.io</a> offers a CDN that I'm going to try to lean into for images in my blog. My hope is that the builds get and stay fast, and that page loads are fast too.</p>\n<p>Example:</p>\n<pre><code class=\"language-html\">\n&lt;img src=&quot;https://cdn.statically.io/gh/pypeaday/images.pype.dev/main/static/skimpy-zsh.png&quot; alt=&quot;Skimpy ZSH&quot; title=&quot;A fancy data summary in the shell&quot; /&gt;\n</code></pre>\n<img src=\"https://cdn.statically.io/gh/pypeaday/images.pype.dev/main/static/skimpy-zsh.png\" alt=\"Skimpy ZSH\" title=\"A fancy data summary in the shell\" />\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2024-12-14T13:35:31-00:00",
      "image": "https://cdn.statically.io/gh/pypeaday/images.pype.dev/main/static/skimpy-zsh.png",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "infrastructure",
        "tech",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/jellyfin-container-updates-for-hwe-amd.html",
      "url": "https://pype.dev/jellyfin-container-updates-for-hwe-amd.html",
      "title": "Jellyfin container updates for HWE + AMD",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>I use LSIO Jelyfin container for the easy addon they provide for AMD GPUs but I couldn't get trickplay to work with HWE...</p>\n<p>There was almost NOTHING on the internet about the error, and all the threads were about BSD systems...</p>\n<p>Thankfully someone posted <a href=\"https://forum.jellyfin.org/t-jellyfin-amd-docker\">on the formum here</a> but the only answer was to literally upgrade stuff in the container...</p>\n<p>Someday maybe I'll build off of LSIO to add this, but until then I shell'd in and homelab'd the hell out of it</p>\n<blockquote>\n<p>THIS IS INSIDE THE CONTAINER - I use Portianer to make it easy</p>\n</blockquote>\n<pre><code>\napt update &amp;&amp; apt install -y curl gpg\n\nmkdir -p /etc/apt/keyrings\n\ncurl -fsSL https://repo.radeon.com/rocm/rocm.gpg.key | gpg --dearmor -o /etc/apt/keyrings/rocm.gpg\n\ncat &lt;&lt;EOF | tee /etc/apt/sources.list.d/rocm.sources\n\nTypes: deb\n\nURIs: https://repo.radeon.com/rocm/apt/latest\n\nSuites: ubuntu\n\nComponents: main\n\nArchitectures: amd64\n\nSigned-By: /etc/apt/keyrings/rocm.gpg\n\nEOF\n\napt update &amp;&amp; apt install -y rocm-opencl-runtime\n</code></pre>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2024-12-14T11:27:15-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "containers",
        "linux",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/rsync-like-a-pro.html",
      "url": "https://pype.dev/rsync-like-a-pro.html",
      "title": "rsync like a pro",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>I am moving a hefty amount of data to a new ZFS pool due to some corruption and I want to avoid using <code>zfs send/recv</code> for this just to make sure I don't propagate any corrupted data to my new pool.</p>\n<p>I've used <code>rsync</code> for simple things before but I needed this to be a little smarter and I wanted to see simple progress without flooding my terminal with a billion filenames.</p>\n<h2><a href=\"#tldr\" aria-hidden=\"true\" class=\"anchor\" id=\"tldr\"></a>TLDR</h2>\n<p>TLDR:\n<code>rsync -aHAX --chmod=Da+s --info=progress2 --inplace --exclude='encrypted/docker/frigate-media' /tank/ /harbor/</code></p>\n<h2><a href=\"#explanation\" aria-hidden=\"true\" class=\"anchor\" id=\"explanation\"></a>Explanation</h2>\n<p>-aHAX: Preserves attributes (archive mode, hard links, ACLs, extended attributes).\n--chmod=Da+s: Ensures the setgid bit is applied to directories.\n--info=progress2: Provides detailed progress information, including overall data transfer stats.\n--inplace: Writes directly to the destination file, avoiding temporary files (useful for large files).\n--exclude='encrypted/docker/frigate-media': Excludes the specified path (relative to the /tank root).\n/tank/ /harbor/: Ensures the contents of /tank are copied directly into /harbor.</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2024-12-11T10:52:23-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "linux",
        "terminal",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/d-and-uninterruptable-sleep.html",
      "url": "https://pype.dev/d-and-uninterruptable-sleep.html",
      "title": "D and uninterruptable sleep",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<h2><a href=\"#htop\" aria-hidden=\"true\" class=\"anchor\" id=\"htop\"></a>Htop</h2>\n<p>I recently have been having significant home server issues, and that's not the point of this - today I learned what <code>D</code> state is when looking at htop.</p>\n<img src=\"https://cdn.statically.io/gh/pypeaday/images.pype.dev/main/blog-media/d-htop.png\" alt=\"htop-d\" title=\"htop with D state\" />\n<p>Apparently this means &quot;uninterruptable sleep&quot; and it's a dev's nightmare...</p>\n<h3><a href=\"#context\" aria-hidden=\"true\" class=\"anchor\" id=\"context\"></a>Context</h3>\n<p>The issue I was having was that some <code>zfs rollback</code> commands were hung - for hours... I wasn't sure what was going on, rollbacks should be instant but I figured it was just an artifact of these issues.</p>\n<p>Turns out I still don't know what locked the disks up but I learned why <code>&lt;C&gt;-c</code> did <u>nothing</u>...\nthe more you know</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2024-12-11T10:48:10-00:00",
      "image": "https://cdn.statically.io/gh/pypeaday/images.pype.dev/main/blog-media/d-htop.png",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "linux",
        "zfs",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/hostnamectl-to-easily-change-hostname.html",
      "url": "https://pype.dev/hostnamectl-to-easily-change-hostname.html",
      "title": "hostnamectl to easily change hostname",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>hostnamectl is apparently a linux utility for easily changing your hostname in a variety of ways</p>\n<pre><code class=\"language-bash\">\n❯ hostnamectl --help\nhostnamectl [OPTIONS...] COMMAND ...\n\nQuery or change system hostname.\n\nCommands:\n  status                 Show current hostname settings\n  hostname [NAME]        Get/set system hostname\n  icon-name [NAME]       Get/set icon name for host\n  chassis [NAME]         Get/set chassis type for host\n  deployment [NAME]      Get/set deployment environment for host\n  location [NAME]        Get/set location for host\n\nOptions:\n  -h --help              Show this help\n     --version           Show package version\n     --no-ask-password   Do not prompt for password\n  -H --host=[USER@]HOST  Operate on remote host\n  -M --machine=CONTAINER Operate on local container\n     --transient         Only set transient hostname\n     --static            Only set static hostname\n     --pretty            Only set pretty hostname\n     --json=pretty|short|off\n                         Generate JSON output\n\nSee the hostnamectl(1) man page for details.\n</code></pre>\n<p>I learned there's transient and static hostnames, so that's cool...</p>\n<p>The thing I needed was <code>hostnamectl --static hostname babyblue-aurora</code></p>\n<p>pretty sweet tool</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2024-12-06T07:25:59-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "linux",
        "terminal",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/stylus-for-custom-webpage-themes.html",
      "url": "https://pype.dev/stylus-for-custom-webpage-themes.html",
      "title": "Stylus for custom webpage themes",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>the Logos web app is DISGUSTINGY bright/white - enough to actually ruin your morning...</p>\n<p>Thankfully there's an extension called <a href=\"https://addons.mozilla.org/en-US/firefox/addon/styl-us/\">stylus</a> and some kind folks in the Logos community created a nice dark theme <a href=\"https://userstyles.world/style/18547/logos-web-app-dark-mode\">here</a>. You simply install the extension, then go to the userstyles link &lt;-- and click <code>install</code>. It only changes themes for the sites configured - in this case <a href=\"app-logos-com.html\">app.logos.com</a></p>\n<h1><a href=\"#todo-image\" aria-hidden=\"true\" class=\"anchor\" id=\"todo-image\"></a>TODO: image</h1>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2024-11-27T06:07:39-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/dns-broke-after-reboot-ubuntu-22-04.html",
      "url": "https://pype.dev/dns-broke-after-reboot-ubuntu-22-04.html",
      "title": "DNS Broke After Reboot - Ubuntu 22.04",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>I rebooted by server and DNS broke randomly. I have no idea if it was from a kernel update or what but that's the issue with Ubuntu I guess...</p>\n<p>After much toil and none of the other options working for me (sorry to not have those documented here) this is what got me the vic from this <a href=\"https://askubuntu.com/questions/1406827/how-to-set-dns-on-ubuntu-22-04-when-you-have-no-netplan-config\">SO Post</a></p>\n<p>sudo mkdir /etc/systemd/resolved.conf.d/\nsudo $EDITOR /etc/systemd/resolved.conf.d/dns_servers.conf</p>\n<p>Most folks probably are good with google (8.8.8.8) and cloudflare (1.1.1.1)</p>\n<pre><code>[Resolve]\nDNS=8.8.8.8 1.1.1.1\n</code></pre>\n<p>But I decided to use tailscale</p>\n<pre><code>[Resolve]\nDNS=100.100.100.100\n</code></pre>\n<p>Then restart systemd-resolved</p>\n<p>sudo systemctl restart systemd-resolved</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2024-11-22T08:08:40-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "homelab",
        "linux",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/restart-kde-plasma.html",
      "url": "https://pype.dev/restart-kde-plasma.html",
      "title": "Restart KDE Plasma",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>Plasma shits the bed a little too often on Fedora for me right now but I finally have a quick fix...</p>\n<pre><code>\nsudo killall plasmashell\n\nkstart plasmashell\n\n</code></pre>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2024-11-08T15:53:52-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "linux",
        "terminal",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/opnsense-bootstrap-recovery.html",
      "url": "https://pype.dev/opnsense-bootstrap-recovery.html",
      "title": "OPNSense Bootstrap Recovery",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>enabling DHCP WAN port (<code>dhclient &lt;iface&gt;</code>)- running the bootstrap script - <code>sh /usr/local/sbin/opnsense-bootstrap</code></p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2024-11-07T08:40:19-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "infrastructure",
        "homelab",
        "tech"
      ],
      "language": "en"
    }
  ]
}