{
  "version": "https://jsonfeed.org/version/1",
  "title": "Pype.dev",
  "home_page_url": "https://pype.dev",
  "feed_url": "https://pype.dev/index.json",
  "description": "my mental data-lake",
  "items": [
    {
      "id": "https://pype.dev/the-importance-of-nostr-according-to-chatgpt.html",
      "url": "https://pype.dev/the-importance-of-nostr-according-to-chatgpt.html",
      "title": "The Importance of Nostr According to ChatGPT",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<h2><a href=\"#disclaimer\" aria-hidden=\"true\" class=\"anchor\" id=\"disclaimer\"></a>Disclaimer</h2>\n<p>This was written by ChatGPT with zero oversight from me. There are a few things that are not 100% accurate, but the main idea is there... I am hoping to actually write about my experience with nostr as I get more involved on the platform.</p>\n<h3><a href=\"#the-power-of-the-decentralized-social-media-platform-nostr-a-guide-for-beginners\" aria-hidden=\"true\" class=\"anchor\" id=\"the-power-of-the-decentralized-social-media-platform-nostr-a-guide-for-beginners\"></a>The Power of the Decentralized Social Media Platform Nostr: A Guide for Beginners</h3>\n<p>Social media has become a cornerstone of modern communication, allowing individuals to connect across borders and share ideas instantly. However, traditional platforms have raised concerns about censorship, data privacy, and the monopolistic control of user-generated content. <strong>Nostr (Notes and Other Stuff Transmitted by Relays)</strong>, a decentralized social media protocol, offers a revolutionary alternative by emphasizing freedom, privacy, and user autonomy. This essay explores the transformative power of Nostr, why it matters, and provides a practical guide for beginners to get started.</p>\n<hr />\n<h3><a href=\"#the-power-of-decentralization-why-nostr-matters\" aria-hidden=\"true\" class=\"anchor\" id=\"the-power-of-decentralization-why-nostr-matters\"></a>The Power of Decentralization: Why Nostr Matters</h3>\n<p>At its core, Nostr is a decentralized protocol designed to enable social media functionality without reliance on centralized servers. Unlike traditional platforms such as Twitter or Facebook, which depend on centralized infrastructure owned by corporations, Nostr operates on a peer-to-peer network facilitated by relays. This structural shift offers several key advantages:</p>\n<ol>\n<li>\n<p><strong>Freedom of Expression</strong><br />\nCentralized platforms often act as gatekeepers of content, enforcing moderation policies that can result in censorship. Nostr, on the other hand, allows users to communicate directly without interference from centralized authorities. This makes it particularly valuable for individuals in regions with restrictive speech laws.</p>\n</li>\n<li>\n<p><strong>Data Ownership</strong><br />\nOn traditional platforms, users sacrifice ownership of their data, which is often monetized by corporations. Nostr empowers users to retain control over their content and personal information by using cryptographic keys to manage identity.</p>\n</li>\n<li>\n<p><strong>Resilience Against Shutdowns</strong><br />\nCentralized platforms are vulnerable to outages, government intervention, or corporate decisions to deplatform users. Nostr’s decentralized nature ensures that no single entity can shut it down, providing a more resilient communication medium.</p>\n</li>\n<li>\n<p><strong>Open and Transparent Ecosystem</strong><br />\nAs an open protocol, Nostr allows developers to create interoperable applications and services. This fosters innovation, enabling users to choose from a variety of client applications while maintaining access to the same network.</p>\n</li>\n</ol>\n<hr />\n<h3><a href=\"#how-nostr-works-the-technical-backbone\" aria-hidden=\"true\" class=\"anchor\" id=\"how-nostr-works-the-technical-backbone\"></a>How Nostr Works: The Technical Backbone</h3>\n<p>Nostr uses a simple yet effective system to transmit messages:</p>\n<ul>\n<li><strong>Public and Private Keys</strong>: Each user generates a pair of cryptographic keys. The private key acts as their identity, while the public key serves as their address on the network.</li>\n<li><strong>Relays</strong>: These are lightweight servers that broadcast messages. Users send notes (messages) to relays, which distribute them to other users.</li>\n<li><strong>Clients</strong>: Users access Nostr through client applications, which function as user interfaces. Examples include Damus (for mobile) and Amethyst.</li>\n</ul>\n<p>This decentralized architecture eliminates single points of failure and gives users the flexibility to connect via multiple clients.</p>\n<hr />\n<h3><a href=\"#a-beginners-guide-to-getting-started-with-nostr\" aria-hidden=\"true\" class=\"anchor\" id=\"a-beginners-guide-to-getting-started-with-nostr\"></a>A Beginner’s Guide to Getting Started with Nostr</h3>\n<p>For those new to Nostr, the decentralized structure might seem intimidating at first. However, with the following step-by-step guide, you’ll be able to join the network and start interacting with others seamlessly.</p>\n<h4><a href=\"#step-1-generate-your-keys\" aria-hidden=\"true\" class=\"anchor\" id=\"step-1-generate-your-keys\"></a>Step 1: Generate Your Keys</h4>\n<p>The first step is to create a pair of cryptographic keys:</p>\n<ul>\n<li><strong>Private Key</strong>: This is your unique identifier and must be kept secret. Treat it like a password.</li>\n<li><strong>Public Key</strong>: This is your &quot;address&quot; on Nostr and can be shared with others.</li>\n</ul>\n<p>Most Nostr client applications automatically generate these keys for you upon sign-up. Ensure you securely back up your private key, as losing it means losing access to your account permanently.</p>\n<h4><a href=\"#step-2-choose-a-nostr-client\" aria-hidden=\"true\" class=\"anchor\" id=\"step-2-choose-a-nostr-client\"></a>Step 2: Choose a Nostr Client</h4>\n<p>Clients are the gateways through which you interact with the Nostr protocol. Popular options include:</p>\n<ul>\n<li><strong>Damus</strong> (iOS/Android): User-friendly and feature-rich.</li>\n<li><strong>Amethyst</strong> (Android): Tailored for Android users with a sleek interface.</li>\n<li><strong>Web Clients</strong>: Platforms like <strong>Nostr.guru</strong> or <strong>Iris</strong> allow you to access Nostr via a browser.</li>\n</ul>\n<p>Install your chosen client and log in using your keys.</p>\n<h4><a href=\"#step-3-connect-to-relays\" aria-hidden=\"true\" class=\"anchor\" id=\"step-3-connect-to-relays\"></a>Step 3: Connect to Relays</h4>\n<p>Relays are the backbone of the Nostr network, enabling message distribution. Most clients come pre-configured with default relays, but you can add more for better connectivity and reliability. Simply search for &quot;Nostr relay services&quot; and paste the relay URLs into your client settings.</p>\n<h4><a href=\"#step-4-explore-and-interact\" aria-hidden=\"true\" class=\"anchor\" id=\"step-4-explore-and-interact\"></a>Step 4: Explore and Interact</h4>\n<p>Once set up, you can start exploring the network:</p>\n<ul>\n<li><strong>Follow Users</strong>: Add public keys of other users to your feed.</li>\n<li><strong>Post Notes</strong>: Share your thoughts or updates by creating a note, similar to a tweet.</li>\n<li><strong>Engage</strong>: Interact with others by replying to or liking their notes.</li>\n</ul>\n<h4><a href=\"#step-5-customize-your-experience\" aria-hidden=\"true\" class=\"anchor\" id=\"step-5-customize-your-experience\"></a>Step 5: Customize Your Experience</h4>\n<ul>\n<li><strong>Choose Relays Carefully</strong>: Some relays may specialize in certain topics or enforce content moderation policies. Tailor your relay list based on your interests and values.</li>\n<li><strong>Backup Your Keys</strong>: Use secure storage solutions like hardware wallets or encrypted cloud storage to protect your private key.</li>\n<li><strong>Experiment with Clients</strong>: Try multiple clients to find the one that suits your preferences.</li>\n</ul>\n<hr />\n<h3><a href=\"#the-broader-implications-of-nostr\" aria-hidden=\"true\" class=\"anchor\" id=\"the-broader-implications-of-nostr\"></a>The Broader Implications of Nostr</h3>\n<p>The emergence of platforms like Nostr signals a broader shift toward decentralization in the digital era. By prioritizing user autonomy and privacy, Nostr challenges the centralized paradigms that have dominated the social media landscape for years. Its open architecture invites developers, activists, and everyday users to co-create a more inclusive and censorship-resistant digital space.</p>\n<p>Moreover, Nostr's impact extends beyond social media. Its decentralized protocol can be adapted for various purposes, such as secure communication, decentralized marketplaces, or even collaborative work environments. This versatility makes it a foundational building block for the next generation of internet technologies.</p>\n<hr />\n<h3><a href=\"#conclusion\" aria-hidden=\"true\" class=\"anchor\" id=\"conclusion\"></a>Conclusion</h3>\n<p>Nostr represents a profound evolution in social media, offering a decentralized, user-centric alternative to traditional platforms. By empowering individuals with control over their identity, data, and content, it paves the way for a freer and more resilient online ecosystem. While its decentralized nature may pose a learning curve for beginners, the benefits far outweigh the challenges. By embracing Nostr, we can collectively take a step toward a more open and equitable digital future.</p>\n<p>For those ready to explore this transformative platform, the journey begins with a simple act: generating your keys and connecting to the network. From there, the power of decentralized communication lies in your hands.</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2025-01-24T06:38:03-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "nostr",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/using-my-own-domain-on-nostr.html",
      "url": "https://pype.dev/using-my-own-domain-on-nostr.html",
      "title": "Using my own domain on nostr",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>After generating a keypair on a nostr app (I started with primal) I copied my\npublic key to <code>/.well-known/nostr.json</code> and put that at the root of my site at\n<code>https://pype.dev</code>.</p>\n<p>The file looks like this:</p>\n<pre><code class=\"language-json\">\n{\n  “names”: {\n    “nic”: “npub1q3fsec2vcv99v80ga72dlv90qwkqmuxqcr6mdyumcmpkgudlhrespyurfj”\n  }\n}\n</code></pre>\n<p>So now I can use <code>nic@pype.dev</code> as on nostr because the client will verify the\npubkey associated with my profile with my domain!</p>\n<blockquote>\n<p>big upgrade from <whatever>@primal.net</p>\n</blockquote>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2025-01-24T06:28:19-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "nostr",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/the-design-of-genesis-1-11-pt-1.html",
      "url": "https://pype.dev/the-design-of-genesis-1-11-pt-1.html",
      "title": "The Design of Genesis 1-11 pt 1",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<h2><a href=\"#genesis-1\" aria-hidden=\"true\" class=\"anchor\" id=\"genesis-1\"></a>Genesis 1</h2>\n<p>There is a cyclical pattern of Genesis 1-11.</p>\n<p>Introduction 1:1 may be a summary heading rather than the first &quot;verse&quot;.</p>\n<h3><a href=\"#chaos\" aria-hidden=\"true\" class=\"anchor\" id=\"chaos\"></a>Chaos</h3>\n<p>The narrative begins in 1:2, and the start of everything is a &quot;non-created\nworld&quot;, which in the ancient mind we should think about as &quot;non-ordered\nreality&quot;.</p>\n<pre><code>\nGenesis 1:2 (LEB): 2 Now the earth was formless and empty, and darkness was\nover the face of the deep. And the Spirit of God was hovering over the surface\nof the waters. \n\nHarris, W. H., III, Ritzema, E., Brannan, R., Mangum, D., Dunham, J., Reimer,\nJ. A., &amp; Wierenga, M., eds. (2012). The Lexham English Bible (Ge 1:2). Lexham\nPress. \n\n</code></pre>\n<p>תֹּ֫הוּ | to-hu | formless בֹּ֫הוּ | ba-hu | empty, void</p>\n<p>The first image is that there is &quot;unordered wild and waste (wasteland)&quot; (we\ntypically see this as formless and void). There is also &quot;darkness&quot; and &quot;deep&quot;,\nwhich is a dark chaotic ocean - and this is the ANE person's conception of\n&quot;nothing&quot;. Westerners think &quot;nothing&quot; means &quot;no atmoic particles, no matter&quot;\nbut the ANE person would've thought about creation as unordered chaos.</p>\n<p>God's spirit is hovering over the dark, formless, wild, chaotic ocean.</p>\n<h3><a href=\"#day-1\" aria-hidden=\"true\" class=\"anchor\" id=\"day-1\"></a>Day 1</h3>\n<pre><code>\n“Let there be light!” And there was light. 4 And God saw the light, that it\nwas good, and God caused there to be a separation between the light and between\nthe darkness. 5 And God called the light Day, and the darkness he called Night.\nAnd there was evening and there was morning, the first day.  \n\n</code></pre>\n<p>Creation starts by separating light from darkness. The darkness is now tamed,\nit is apart of an ordered cycle. The ordering of the days is now established\nand is repeated in every subsequent day of creation</p>\n<h3><a href=\"#day-2\" aria-hidden=\"true\" class=\"anchor\" id=\"day-2\"></a>Day 2</h3>\n<pre><code>\n“Let there be a vaulted dome in the midst of the waters, and let it cause a\nseparation between the waters.” 7 So God made the vaulted dome, and he caused a\nseparation between the waters which were under the vaulted dome and between the\nwaters which were over the vaulted dome. And it was so. 8 And God called the\nvaulted dome “heaven.” \n\n</code></pre>\n<p>Then on day 2 he separates &quot;waters from the waters&quot;. God &quot;splits&quot; (Exodus) the\nwaters, brining order to the chaotic waters.</p>\n<h3><a href=\"#day-3\" aria-hidden=\"true\" class=\"anchor\" id=\"day-3\"></a>Day 3</h3>\n<pre><code>\n“Let the waters under heaven be gathered to one place, and let the dry\nground appear.”\n\n</code></pre>\n<p>The waters below are gathered together - so there is further order being\nbrought to the waters.</p>\n<pre><code>\n“Let the earth produce green plants that will bear seed—fruit trees bearing\nfruit ⌊in which there is seed⌋—according to its kind, on the earth.” And it was\nso. 12 And the earth brought forth green plants bearing seed according to its\nkind, and trees bearing fruit ⌊in which there was seed⌋ according to its kind.\n\n</code></pre>\n<h4><a href=\"#bonus\" aria-hidden=\"true\" class=\"anchor\" id=\"bonus\"></a>Bonus</h4>\n<p>Fruit trees (foreshadowing) are then brought up from the lands</p>\n<blockquote>\n<p>Notice that there are things even in the first 3 days that will be apart of\nthe narrative going forward</p>\n</blockquote>\n<hr />\n<p>So in the first 3 days God has handled the unordered wild and waste</p>\n<p>What this cosmos needs now is inhabitants</p>\n<hr />\n<h3><a href=\"#day-4\" aria-hidden=\"true\" class=\"anchor\" id=\"day-4\"></a>Day 4</h3>\n<pre><code>\n“Let there be lights in the vaulted dome of heaven ⌊to separate day from\nnight⌋, and let them be as signs and for appointed times, and for days and\nyears, \n\n</code></pre>\n<p>The &quot;lights&quot; are clearly the sun, moon, and stars. But they are not called by\nthose names, they are just called &quot;lights&quot;. Which is the descriptive word מָאוֹר\n| ma-or, used to describe the light from the lamp stands in the temple, which\nwas also a symbol of God's presence.</p>\n<blockquote>\n<p>Notice this is <u>not</u> the same word for &quot;light&quot; in the separation of light\nand darkness, that is אוֹר | or, not ma-or</p>\n</blockquote>\n<pre><code>\nPsalm 90:8 (LEB): 8 You have put our iniquities before you,  our hidden\nsins into the light (מָאוֹר | ma-or) of your countenance.  \n\nHarris, W. H., III, Ritzema, E., Brannan, R., Mangum, D., Dunham, J., Reimer,\nJ. A., &amp; Wierenga, M., eds. (2012). The Lexham English Bible (Ps 90:8). Lexham\nPress. \n\n</code></pre>\n<pre><code>\nExodus 35:14 (LEB): 14 and lampstand of the light (מָאוֹר | ma-or) and its\nequipment and its lamps and the oil for the light (מָאוֹר | ma-or); \n\nHarris, W. H., III, Ritzema, E., Brannan, R., Mangum, D., Dunham, J., Reimer,\nJ. A., &amp; Wierenga, M., eds. (2012). The Lexham English Bible (Ex 35:14). Lexham\nPress. \n\n</code></pre>\n<pre><code>\nGenesis 1:16 (LEB): 16 And God made two great lights, the greater light to\nrule the day and the smaller light to rule the night, and the stars. \n\nHarris, W. H., III, Ritzema, E., Brannan, R., Mangum, D., Dunham, J., Reimer,\nJ. A., &amp; Wierenga, M., eds. (2012). The Lexham English Bible (Ge 1:16). Lexham\nPress. \n\n</code></pre>\n<p>These lights have a job to rule</p>\n<blockquote>\n<p>Notice the callback to day 1 - light and darkness were initially separated,\nand now there is further order brought to both the light (sun) and the dark\n(stars and moon)</p>\n</blockquote>\n<h3><a href=\"#day-5\" aria-hidden=\"true\" class=\"anchor\" id=\"day-5\"></a>Day 5</h3>\n<pre><code>\nGenesis 1:20–21 (LEB): 20 And God said, “Let the waters swarm with swarms\nof living creatures, and let birds fly over the earth across the face of the\nvaulted dome of heaven.” 21 So God created the great sea creatures and every\nliving creature that moves, with which the waters swarm, according to their\nkind, and every bird with wings according to its kind. And God saw that it was\ngood. \n\nHarris, W. H., III, Ritzema, E., Brannan, R., Mangum, D., Dunham, J., Reimer,\nJ. A., &amp; Wierenga, M., eds. (2012). The Lexham English Bible (Ge 1:20–21).\nLexham Press. \n\n</code></pre>\n<p>Day 2 was about the waters, they were separated from above and below, and now\nin Day 5, above and below, will be populated, will be ordered.</p>\n<blockquote>\n<p>Great Sea Creatures - תַּנִּין | tan-nin is a rabbit-hole for another time, but\nit's not insignificant</p>\n</blockquote>\n<h3><a href=\"#day-6\" aria-hidden=\"true\" class=\"anchor\" id=\"day-6\"></a>Day 6</h3>\n<pre><code>\n“Let the earth bring forth living creatures according to their kind: cattle\nand moving things, and wild animals according to their kind.” And it was so.\n25 So God made wild animals according to their kind and the cattle according to\ntheir kind, and every creeping thing of the earth according to its kind.\n\nHarris, W. H., III, Ritzema, E., Brannan, R., Mangum, D., Dunham, J., Reimer,\nJ. A., &amp; Wierenga, M., eds. (2012). The Lexham English Bible (Ge 1:24–25).\nLexham Press. \n\n</code></pre>\n<p>On Day 6 the land, which was brought up on Day 3, is now populated with animals\naccording to their kinds, again further order</p>\n<h4><a href=\"#bonus-1\" aria-hidden=\"true\" class=\"anchor\" id=\"bonus-1\"></a>Bonus</h4>\n<p><code>“Let us make humankind in our image and according to our likeness</code></p>\n<p>Just as fruit-trees were brought up, specifically with seed in them, now we\nhave humanity, given a job to rule the earth, subdue it, and multiply</p>\n<p>Humanity are the rulers below (Day 4 with the rulers of the sky)</p>\n<p><code>So God created humankind in his image</code></p>\n<p>Humanity are God's idols... Where do you put idols? In a temple...</p>\n<p>Humans are made to rule - God makes humans kings and queens</p>\n<h3><a href=\"#summary\" aria-hidden=\"true\" class=\"anchor\" id=\"summary\"></a>Summary</h3>\n<p>God has just built for himself a temple of Creation.</p>\n<h3><a href=\"#day-7\" aria-hidden=\"true\" class=\"anchor\" id=\"day-7\"></a>Day 7</h3>\n<p>God is clearly in charge, but he wants to rule the creation with his image\nbearers. So now he rests</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2025-01-18T04:54:03-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "bible-project",
        "faith",
        "design-of-genesis-1-11"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/deployments-are-not-statefulsets.html",
      "url": "https://pype.dev/deployments-are-not-statefulsets.html",
      "title": "Deployments are not StatefulSets",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>I was debugging some ArgoCD stuff earlier today and I love using k9s to explore\nmy k8s resources.</p>\n<p>The TLDR is that I put some bad env vars in the <code>global</code> values for my ArgoCD\npods, this caused the webUI to hang. An easy way to push things through is to\nopen k9s, view the Deployments, and edit the env vars there so the pods can be\nin the right state to restart and pickup the changes (you've obviously fixed\nthe values file already right?)</p>\n<p>Well the Notification Controller was the pod hanging, and I couldn't find it in\nthe Deployments view! This blew my mind... until I realized that it was a\nStateful Set.</p>\n<p>So, this is not a comparison of the 2 - this is just a note to say that all I\nhad to do was find the StatefulSets in k9s and do the same workflow for editing\nwhat I needed to edit to get the pods into workable state while working on the\nvalues file...</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2025-01-15T18:07:57-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "infrastructure",
        "tech",
        "k8s"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/docker-context-and-an-issue-to-question-your-sanity.html",
      "url": "https://pype.dev/docker-context-and-an-issue-to-question-your-sanity.html",
      "title": "docker context (and an issue to question your sanity)",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>docker contexts are great, would recommend putting them in your prompt though (via starship or something else)... here's why</p>\n<p>I like to manage my containers remotely - I have a nice development setup on my desktop and I try to keep my server as bare-bones as possible. For a while I've been using ansible which makes it easy to manage configuration etc on other machines. But I recently learned about docker contexts and I'm planning to scale down my homelab management to just docker-compose stacks rather than a bunch of super complicated ansible playbooks</p>\n<p>So, setting up a context is easy - it's basically an ssh connection to another machine!</p>\n<p><code>docker context create koober --docker &quot;host=ssh://nic@koober&quot;</code></p>\n<p><code>koober</code> is one of my dev machines and my <code>~/.ssh/config</code> is setup such that I can <code>ssh nic@koober</code>, this makes the context work really seamlessly.</p>\n<p>So there's the <code>default</code> context (the machine you're on) and now I have <code>koober</code></p>\n<p>To use it you run <code>docker context use koober</code></p>\n<p>And then to check we can <code>ls</code> the contexts</p>\n<pre><code>docker context ls\nNAME       DESCRIPTION                               DOCKER ENDPOINT               ERROR\ndefault    Current DOCKER_HOST based configuration   unix:///var/run/docker.sock   \nkoober *                                             ssh://nic@koober\n</code></pre>\n<blockquote>\n<p>Notice the * - that indicates that's our current context.</p>\n</blockquote>\n<h2><a href=\"#trouble\" aria-hidden=\"true\" class=\"anchor\" id=\"trouble\"></a>Trouble</h2>\n<p>Now here's where things get hairy... you've gotta be super-aware of what context you're using. I have an indicator in my starship prompt that shows the current context, but since I'm new to using them I kind of didn't notice it until I ran into this issue...</p>\n<p>I'm working on a python application in docker but was not able to execute the entrypoint even though I KNEW the file was there... let's take a look</p>\n<h3><a href=\"#example\" aria-hidden=\"true\" class=\"anchor\" id=\"example\"></a>Example</h3>\n<p>Here's a minimal hello world applycation in docker to illustrate the issue</p>\n<pre><code class=\"language-python\"># main.py\nprint(&quot;hello world&quot;)\n</code></pre>\n<pre><code class=\"language-Dockerfile\"># Use an official Python runtime as a parent image\nFROM python:3.11-slim\n\n# Set the working directory in the container\nWORKDIR /app\n\n# Copy the current directory contents into the container at /app\nCOPY . /app\n\n# Run the main.py script as the container's main process\nCMD [&quot;python&quot;, &quot;main.py&quot;]\n</code></pre>\n<pre><code class=\"language-yaml\">services:\n  hello-world:\n    build: .\n    volumes:\n      - .:/app\n</code></pre>\n<p>Notice volume mounting in my project directory <code>.</code> to <code>/app</code> as a common practice to develop inside the container</p>\n<p>Here's where I started to question my sanity...</p>\n<pre><code class=\"language-bash\">✗ docker compose up                                            \n[+] Running 1/0\n ✔ Container docker-context-example-hello-world-1  Created                                                                                                                                                                                                                                                              0.0s \nAttaching to hello-world-1\nhello-world-1  | python: can't open file '/app/main.py': [Errno 2] No such file or directory\nhello-world-1 exited with code 2\n</code></pre>\n<p><code>python can't open file</code>? hmm... Let's take a look at the image</p>\n<p>First let's make sure we get the image name right</p>\n<pre><code class=\"language-bash\">✗ docker container ls -a              \nCONTAINER ID   IMAGE                                           COMMAND                  CREATED          STATUS                       PORTS                                                                                  NAMES\n3d7285fc39e2   docker-context-example-hello-world              &quot;python main.py&quot;         10 minutes ago   Exited (2) 44 seconds ago                                                                                           docker-context-example-hello-world-1\n</code></pre>\n<p>Now we can <code>docker run --rm -it --entrypoint /bin/bash --name debug docker-context-example-hello-world</code></p>\n<pre><code class=\"language-bash\">❯ docker run --rm -it --entrypoint /bin/bash --name debug docker-context-example-hello-world  \nroot@ee46d0e22de8:/app# python main.py\nHello, World!\nroot@ee46d0e22de8:/app# \n</code></pre>\n<p>WHAT THE HECK??</p>\n<h2><a href=\"#what-happened\" aria-hidden=\"true\" class=\"anchor\" id=\"what-happened\"></a>What happened...</h2>\n<p>What happened turns out to be pretty simple once we realize I'm using contexts...</p>\n<p><code>koboer</code> is a remote context, the <code>docker run</code> and <code>docker compose up</code> commands are interacting with the docker socket on that machine.</p>\n<p>So if I compose up the stack notice that there's a volume bind mount in there - well those do <em>not</em> work with contexts (or at least I'm not aware of hose to make it work) and so the <code>/app</code> directory was getting blown away essentially with an empty overlay...</p>\n<p>But when running with just <code>docker run</code> with no volume mount, the code was copied in during the build and is right where we expect it...</p>\n<h3><a href=\"#lets-prove-it\" aria-hidden=\"true\" class=\"anchor\" id=\"lets-prove-it\"></a>Let's prove it</h3>\n<pre><code class=\"language-bash\">❯ docker run --rm -it --entrypoint /bin/bash --name debug -v .:/app docker-context-example-hello-world\nroot@903f591c0384:/app# python main.py\npython: can't open file '/app/main.py': [Errno 2] No such file or directory\nroot@903f591c0384:/app# \n</code></pre>\n<pre><code>Adding a `-v .:/app` to match the compose file, we get the same error...\n</code></pre>\n<p>If we switch to the default context we are back up and running as expected</p>\n<pre><code class=\"language-bash\">✗ docker context use default\ndefault\nCurrent context is now &quot;default&quot;\n\nnic in /tmp/docker-context-example  via   v3.13.0  (dev) 󰒄 󱔎 NO PYTHON ENVIORNMENT SET \n❯ docker compose up         \n[+] Running 1/0\n ✔ Container docker-context-example-hello-world-1  Created                                                                                                                                                                                                                                                              0.0s \nAttaching to hello-world-1\nhello-world-1  | Hello, World!\nhello-world-1 exited with code 0\n\nnic in /tmp/docker-context-example  via   v3.13.0  (dev) 󰒄 󱔎 NO PYTHON ENVIORNMENT SET \n❯ docker run --rm -it --entrypoint /bin/bash --name debug -v .:/app docker-context-example-hello-world\nroot@4045b6aa8883:/app# python main.py\nHello, World!\nroot@4045b6aa8883:/app# \n</code></pre>\n<p>Successful runs on both accounts with the volume mount</p>\n<h2><a href=\"#tldr\" aria-hidden=\"true\" class=\"anchor\" id=\"tldr\"></a>TLDR</h2>\n<p>Context is king</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2024-12-19T05:59:30-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "python",
        "terminal",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/add-a-healthcheck-to-your-fastapi-app.html",
      "url": "https://pype.dev/add-a-healthcheck-to-your-fastapi-app.html",
      "title": "Add a healthcheck to your FastAPI app",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>I'm building a few FastAPI apps to throw in docker and run on my homelab... I wanted to add healthchecks and here's a simple way to do it</p>\n<p>Make sure to install <code>curl</code> in the dockerfile (near the top for effeciency)</p>\n<pre><code># Install curl with minimal dependencies\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y --no-install-recommends curl &amp;&amp; \\\n    apt-get clean &amp;&amp; \\\n    rm -rf /var/lib/apt/lists/*\n\n</code></pre>\n<p>Then I recommend making compose files even for single image deployments</p>\n<pre><code>services:\n  app:\n    build: .\n    volumes:\n      - type: bind\n        source: .\n        target: /app\n    environment:\n      - PYTHONPATH=/app\n      - DOCKER_ENV=true\n      - UV_VIRTUALENV=/opt/app-env\n    user: &quot;1000:1000&quot;\n    restart: unless-stopped\n    healthcheck:\n      test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:8000/health&quot;]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 10s\n\n</code></pre>\n<p>Then finally you'll need a <code>/health</code> endpoint</p>\n<pre><code class=\"language-python\">\n@app.get(&quot;/health&quot;, response_class=HTMLResponse)\nasync def health_check():\n    &quot;&quot;&quot;\n    A health check endpoint that returns a status message.\n    &quot;&quot;&quot;\n    return &quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Service is healthy&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;\n\n</code></pre>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2024-12-15T15:41:36-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "python",
        "homelab",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/statically-io-to-help-me-out.html",
      "url": "https://pype.dev/statically-io-to-help-me-out.html",
      "title": "statically.io to help me out",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p><a href=\"https://statically.io\">statically.io</a> offers a CDN that I'm going to try to lean into for images in my blog. My hope is that the builds get and stay fast, and that page loads are fast too.</p>\n<p>Example:</p>\n<pre><code class=\"language-html\">\n&lt;img src=&quot;https://cdn.statically.io/gh/pypeaday/images.pype.dev/main/static/skimpy-zsh.png&quot; alt=&quot;Skimpy ZSH&quot; title=&quot;A fancy data summary in the shell&quot; /&gt;\n</code></pre>\n<img src=\"https://cdn.statically.io/gh/pypeaday/images.pype.dev/main/static/skimpy-zsh.png\" alt=\"Skimpy ZSH\" title=\"A fancy data summary in the shell\" />\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2024-12-14T13:35:31-00:00",
      "image": "https://cdn.statically.io/gh/pypeaday/images.pype.dev/main/static/skimpy-zsh.png",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "infrastructure",
        "tech",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/jellyfin-container-updates-for-hwe-amd.html",
      "url": "https://pype.dev/jellyfin-container-updates-for-hwe-amd.html",
      "title": "Jellyfin container updates for HWE + AMD",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>I use LSIO Jelyfin container for the easy addon they provide for AMD GPUs but I couldn't get trickplay to work with HWE...</p>\n<p>There was almost NOTHING on the internet about the error, and all the threads were about BSD systems...</p>\n<p>Thankfully someone posted <a href=\"https://forum.jellyfin.org/t-jellyfin-amd-docker\">on the formum here</a> but the only answer was to literally upgrade stuff in the container...</p>\n<p>Someday maybe I'll build off of LSIO to add this, but until then I shell'd in and homelab'd the hell out of it</p>\n<blockquote>\n<p>THIS IS INSIDE THE CONTAINER - I use Portianer to make it easy</p>\n</blockquote>\n<pre><code>\napt update &amp;&amp; apt install -y curl gpg\n\nmkdir -p /etc/apt/keyrings\n\ncurl -fsSL https://repo.radeon.com/rocm/rocm.gpg.key | gpg --dearmor -o /etc/apt/keyrings/rocm.gpg\n\ncat &lt;&lt;EOF | tee /etc/apt/sources.list.d/rocm.sources\n\nTypes: deb\n\nURIs: https://repo.radeon.com/rocm/apt/latest\n\nSuites: ubuntu\n\nComponents: main\n\nArchitectures: amd64\n\nSigned-By: /etc/apt/keyrings/rocm.gpg\n\nEOF\n\napt update &amp;&amp; apt install -y rocm-opencl-runtime\n</code></pre>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2024-12-14T11:27:15-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "containers",
        "linux",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/the-flood-story-types-and-baptism.html",
      "url": "https://pype.dev/the-flood-story-types-and-baptism.html",
      "title": "The Flood Story - Types and Baptism",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<h1><a href=\"#the-flood-story-and-jesus\" aria-hidden=\"true\" class=\"anchor\" id=\"the-flood-story-and-jesus\"></a>The Flood Story and Jesus</h1>\n<p>Jesus brings up the Flood story from Genesis just one time (in the recorded teachings we have).</p>\n<p>First to set the scene, Jesus and his disciples are visiting the temple, and the disiples are kind of &quot;ooo-ing&quot; and &quot;aaah-ing&quot; when Jesus tells them about about the coming destruction...</p>\n<pre><code>Matthew 24:1–2 (ESV):  24 Jesus left the temple and was going away, when his\ndisciples came to point out to him the buildings of the temple. 2 But he\nanswered them, “You see all these, do you not? Truly, I say to you, there will\nnot be left here one stone upon another that will not be thrown down.”  \n\nThe Holy Bible: English Standard Version (Mt 24:1–2). (2016). Crossway Bibles.\n\n</code></pre>\n<pre><code>Matthew 24:37–39 (ESV): 37 For as were the days of Noah, so will be the coming\nof the Son of Man. 38 For as in those days before the flood they were eating\nand drinking, marrying and giving in marriage, until the day when Noah entered\nthe ark, 39 and they were unaware until the flood came and swept them all away,\nso will be the coming of the Son of Man. \n\nThe Holy Bible: English Standard Version (Mt 24:37–39). (2016). Crossway Bibles.\n</code></pre>\n<p>At one point in Jesus' description of the destruction of the temple in\nJerusalem, he brings up the Son of Man and Noah...</p>\n<p>Jesus says that the &quot;coming of the Son of Man&quot; will be like when Noah built the\nark, and no one understood until the flood (κατακλυσμός | kataklysmos) came and\ntook them away.</p>\n<p>In Jesus' mind the flood narrative gives him imagery and vocabulary to talk\nabout when God allows foreign powers to come and bring judgement... This isn't\nan interpretation of the flood narrative, but it clues us into the idea that\nthe Hebrew bible is full of imagery, like a quilt, that follows a (or several)\npattern(s).</p>\n<pre><code>Jesus understood the flood story as a pattern - a theological category to talk\nabout God overthrowing the corrupt power systems of our world - Tim Mackie\n</code></pre>\n<blockquote>\n<p>I think sometimes we look at the flood and think God is so bad for taking out\nall of humanity, but we miss the point... God is RESTORING humanity by\nremoving corruption... that's eventually the story we're invited into via\nfaith in Jesus</p>\n</blockquote>\n<h2><a href=\"#types\" aria-hidden=\"true\" class=\"anchor\" id=\"types\"></a>Types</h2>\n<p>A <code>type</code> is a category of prophecy, and an <code>antitype</code> is the revelation of the type.</p>\n<p>Essentially - a <code>type</code> is a pattern, and the <code>antytype</code> is the revelation of\nthe meaning of the pattern - and without understanding the preceding types (in\nthis case, the flood) then the antitype cannot be understood (in this case\nbaptism)</p>\n<blockquote>\n<p>a trivial example of how a type, or a pattern, can be noticed and even build\nanticipation is to think 2, 4, 6, 8... what comes next? 10, and we all know\nthat immediately. Types in general, and types in the Bible are no different,\nalbeit not so simple...</p>\n</blockquote>\n<h2><a href=\"#flood-and-baptism\" aria-hidden=\"true\" class=\"anchor\" id=\"flood-and-baptism\"></a>Flood and Baptism</h2>\n<p>Brace yourself...</p>\n<pre><code>1 Peter 3:18–22 (ESV): 18 For Christ also suffered once for sins, the righteous\nfor the unrighteous, that he might bring us to God, being put to death in the\nflesh but made alive in the spirit, 19 in which he went and proclaimed to the\nspirits in prison, 20 because they formerly did not obey, when God’s patience\nwaited in the days of Noah, while the ark was being prepared, in which a few,\nthat is, eight persons, were brought safely through water. 21 Baptism, which\ncorresponds to this, now saves you, not as a removal of dirt from the body but\nas an appeal to God for a good conscience, through the resurrection of Jesus\nChrist, 22 who has gone into heaven and is at the right hand of God, with\nangels, authorities, and powers having been subjected to him.  \n\nThe Holy Bible: English Standard Version (1 Pe 3:18–22). (2016). Crossway\nBibles.\n</code></pre>\n<p>Notice verse 21 - &quot;Baptism, which <u>corresponds</u> to this&quot;</p>\n<p>Corresponds is the word ἀντίτυπος (antitupos) in Greek, which means &quot;anti-type&quot;\nThis means clearly that the <code>type</code>, or <em>a</em> type, for baptism, is the flood\nnarrative... or that baptism is the antitype for the flood</p>\n<p>What does this mean for baptism?</p>\n<pre><code>21 Baptism, which\ncorresponds to this, now saves you, not as a removal of dirt from the body but\nas an appeal to God for a good conscience, through the resurrection of Jesus\nChrist, 22 who has gone into heaven and is at the right hand of God, with\nangels, authorities, and powers having been subjected to him\n</code></pre>\n<p>Through baptism, we experience with Jesus, resurrection and rule of the angels,\nauthorities, and power of the world...</p>\n<h2><a href=\"#take-away\" aria-hidden=\"true\" class=\"anchor\" id=\"take-away\"></a>Take Away</h2>\n<p>For the disciples listening... are they arguing about when the flood happened?\nor if it was a global or local flood?</p>\n<p>No... they are listening to Jesus unpack patterns in the Bible and they hear\nhim invite them, through a story they know very well, into rule and reign with\nhim</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2024-12-14T06:06:38-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "bible-project",
        "faith",
        "flood-story"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/the-flood-story-quilt-analogy.html",
      "url": "https://pype.dev/the-flood-story-quilt-analogy.html",
      "title": "The Flood Story - Quilt Analogy",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<h1><a href=\"#the-flood-story-in-the-hebrew-bible\" aria-hidden=\"true\" class=\"anchor\" id=\"the-flood-story-in-the-hebrew-bible\"></a>The Flood Story in the Hebrew Bible</h1>\n<p>I'm slowly making my way through some Bible Project classes online because Tim\nMackie is a fantastic teacher and BP has done be a <em>great</em> service by opening\nmy eyes to the reality of the Biblical narrative and what it means for my life\nof faith in Jesus.</p>\n<p>The second session is filled with great points and 10 minutes in I had to jot\nthis one down...</p>\n<h2><a href=\"#a-quilt-as-history\" aria-hidden=\"true\" class=\"anchor\" id=\"a-quilt-as-history\"></a>A Quilt as History</h2>\n<p>Imagine your grandmother's grandmother made a quilt, and passed it down the\nfamily tree. In a sense, that quilt contains history that would pre-date you\nbut would absolutely have meaning to you... However, you might look for meaning\nthat was never intended to be present.</p>\n<p>The pieces of the quilt have their own history - there will be material that\nmight've been part of a dress, or curtains, or bedsheets, or anything else\nsomeone in the family tree found interesting and meaningful for the story they\nare telling with their quilt.</p>\n<p>The question of what each of the pieces mean on their own, or in where they\ncome from is interesting perhaps, but it's not the same question as asking what\nthose pieces mean now that they have been curated into the family quilt... The\ncreator(s) of the quilt may repurpose those pieces entirely, and it wouldn't be\n&quot;right&quot; for you or me to be upset that one piece of the quilt came from an\narticle of clothing or cloth associated with something we might not like - the\nauthor (your grandma) <u>repurposed</u> it for that very reason, to change the\nmeaning and communicate something to you, perhaps something totally different\nthan what that cloth might've meant before it was added to the quilt.</p>\n<h2><a href=\"#creation-as-a-quilt\" aria-hidden=\"true\" class=\"anchor\" id=\"creation-as-a-quilt\"></a>Creation as a Quilt</h2>\n<p>The quilt is a curated piece of pieces of fabric - and to bring the metaphor\nhome very abruptly, so is the Hebrew Bible... the authors of the Hebrew\nscripture absolutely repurposed stories and images that were present in their\ntime and before, but not to make something that is a cheap copy, but to\ncommunicate the story of the <em>actual</em> God of gods, ruling over the world.</p>\n<p>For example - the very beginning of the creationa ccount in Genesis 1 has the\nspirit of God hovering over the waters. Without getting into more details than\na short write-up warrants, the waters in ancient thought represent chaos. Not\nonly that, but there is an older creation account called the Enuma Elish where\ntheir savior god, Marduk, fights the chaos waters (Tiamat) and conquers her\neventually... The thing about the Hebrew narrative is that Yahweh doesn't have\nto fight the waters... he subdues with his words because he isn't in tension\nwith creation, or even with chaos, all things obey him and the chaos waters\nthat other gods had to fight and die over are no different. So the meaning of\nthe waters is somewhat consistent across lots of cultures, but Hebrews took the\nstories and in essence made them &quot;more true&quot;, but at the very least made them\nrelevant to the story they are/were communicating about the God of gods and\nLord of love - that he is the creator of all things and invites us to partner\nwith him (as his image-bearers).</p>\n<h2><a href=\"#calm-down\" aria-hidden=\"true\" class=\"anchor\" id=\"calm-down\"></a>Calm Down</h2>\n<p>A lot of Christians get upset or skiddish when other stories and cultures get\nbrought up - as if the Bible had to fall from heaven in their favorite English\ntranslation... but in my opinion that is the silliest and cheapest view of the\nWord of God... he chose people out of foreign lands to make an inheritence for\nhimself, his people, and those people tell his story using images that they\nknow.</p>\n<p>It's important for us to answer interesting questions but not lose sight of\nwhat's important... The Enuma Elish is an interesting piece, and there's\nparallels with the Hebrew bible, but the Hebrew creation account clearly\ncommunicates that Yahweh doesn't have to labor and fight for order, he speaks\norder into chaos. That lesson is wholly different from other creation\nnarratives, but is it derivative of them...</p>\n<p>That used to bother me, but understanding that the authors of the Bible,\ncarried forth by the guidance of God's spirit, curated these stories and\nnarratives for God's people to communicate the truest Truths about him and his\nlove for people help me understand the reality of God partnering with humanity</p>\n<ul>\n<li>which starts in the Garden and is how Revelation ends</li>\n</ul>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2024-12-14T05:43:43-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "bible-project",
        "faith",
        "flood-story"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/rsync-like-a-pro.html",
      "url": "https://pype.dev/rsync-like-a-pro.html",
      "title": "rsync like a pro",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>I am moving a hefty amount of data to a new ZFS pool due to some corruption and I want to avoid using <code>zfs send/recv</code> for this just to make sure I don't propagate any corrupted data to my new pool.</p>\n<p>I've used <code>rsync</code> for simple things before but I needed this to be a little smarter and I wanted to see simple progress without flooding my terminal with a billion filenames.</p>\n<h2><a href=\"#tldr\" aria-hidden=\"true\" class=\"anchor\" id=\"tldr\"></a>TLDR</h2>\n<p>TLDR:\n<code>rsync -aHAX --chmod=Da+s --info=progress2 --inplace --exclude='encrypted/docker/frigate-media' /tank/ /harbor/</code></p>\n<h2><a href=\"#explanation\" aria-hidden=\"true\" class=\"anchor\" id=\"explanation\"></a>Explanation</h2>\n<p>-aHAX: Preserves attributes (archive mode, hard links, ACLs, extended attributes).\n--chmod=Da+s: Ensures the setgid bit is applied to directories.\n--info=progress2: Provides detailed progress information, including overall data transfer stats.\n--inplace: Writes directly to the destination file, avoiding temporary files (useful for large files).\n--exclude='encrypted/docker/frigate-media': Excludes the specified path (relative to the /tank root).\n/tank/ /harbor/: Ensures the contents of /tank are copied directly into /harbor.</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2024-12-11T10:52:23-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "linux",
        "terminal",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/d-and-uninterruptable-sleep.html",
      "url": "https://pype.dev/d-and-uninterruptable-sleep.html",
      "title": "D and uninterruptable sleep",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<h2><a href=\"#htop\" aria-hidden=\"true\" class=\"anchor\" id=\"htop\"></a>Htop</h2>\n<p>I recently have been having significant home server issues, and that's not the point of this - today I learned what <code>D</code> state is when looking at htop.</p>\n<img src=\"https://cdn.statically.io/gh/pypeaday/images.pype.dev/main/blog-media/d-htop.png\" alt=\"htop-d\" title=\"htop with D state\" />\n<p>Apparently this means &quot;uninterruptable sleep&quot; and it's a dev's nightmare...</p>\n<h3><a href=\"#context\" aria-hidden=\"true\" class=\"anchor\" id=\"context\"></a>Context</h3>\n<p>The issue I was having was that some <code>zfs rollback</code> commands were hung - for hours... I wasn't sure what was going on, rollbacks should be instant but I figured it was just an artifact of these issues.</p>\n<p>Turns out I still don't know what locked the disks up but I learned why <code>&lt;C&gt;-c</code> did <u>nothing</u>...\nthe more you know</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2024-12-11T10:48:10-00:00",
      "image": "https://cdn.statically.io/gh/pypeaday/images.pype.dev/main/blog-media/d-htop.png",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "linux",
        "zfs",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/advent-2024-peace.html",
      "url": "https://pype.dev/advent-2024-peace.html",
      "title": "Advent 2024 - Peace",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<h2><a href=\"#scripture\" aria-hidden=\"true\" class=\"anchor\" id=\"scripture\"></a>Scripture</h2>\n<p>Luke 2:14 (ESV): 14 “Glory to God in the highest, and on earth peace among those with whom he is pleased!”</p>\n<h2><a href=\"#edification\" aria-hidden=\"true\" class=\"anchor\" id=\"edification\"></a>Edification</h2>\n<p>There is a word we probably know - Shalom. It's the Hebrew word we translate often as &quot;peace&quot;. But when I hear &quot;peace&quot; I often think about being calm - and that oversimplifies Shalom... I think a more appropriate understanding is &quot;things are as they are supposed to be&quot;.</p>\n<p>In the Garden, we see Shalom - the Lord partnering with humanity to steward the earth, to make things as they were supposed to be...</p>\n<p>You all know we messed that up, Shalom was broken and humanity was exiled.</p>\n<p>But we have a Great Healer.</p>\n<p>Jesus is Lord of all, King of Heaven and Earth, Ruler of your lives and mine, and he is the Prince of Peace</p>\n<p>Things in our lives are probably not often as they are supposed to be... We get sick, worry about bills, experience tragedy, and weather the storms of life. But there is hope - confident expectation - that peace already has been, and will continue to be, restored to those whom Jesus chooses, the ones with whom he is pleased.</p>\n<p>John records a lot before telling us about the cross, and I won't recount that in this short edification. But he recalls a hopeful word from the Lord -</p>\n<p>John 16:33 (LEB): 33 I [Jesus] have said these things to you so that in me you may have peace. In the world you have affliction, but have courage! I have conquered the world.”</p>\n<p>This season, and this week of Advent, I pray God presses the reality, and the hope for, peace, the expectation of Shalom, deeper into my heart. I pray the Spirit guides us all to bring the will of God to earth as it is in Heaven</p>\n<p>Finally I pray we may all be given, and accept, the conviction of Paul -</p>\n<p>Romans 8:18 For I consider that the sufferings of this present time are not worthy to be compared with the glory that is to be revealed to us.” Our present trials are not on an equal scale with the glory of heaven</p>\n<p>May the rest, the peace, the Shalom that Jesus gives to his followers be with you all. Amen.</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2024-12-06T15:26:15-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "faith"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/hostnamectl-to-easily-change-hostname.html",
      "url": "https://pype.dev/hostnamectl-to-easily-change-hostname.html",
      "title": "hostnamectl to easily change hostname",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>hostnamectl is apparently a linux utility for easily changing your hostname in a variety of ways</p>\n<pre><code class=\"language-bash\">\n❯ hostnamectl --help\nhostnamectl [OPTIONS...] COMMAND ...\n\nQuery or change system hostname.\n\nCommands:\n  status                 Show current hostname settings\n  hostname [NAME]        Get/set system hostname\n  icon-name [NAME]       Get/set icon name for host\n  chassis [NAME]         Get/set chassis type for host\n  deployment [NAME]      Get/set deployment environment for host\n  location [NAME]        Get/set location for host\n\nOptions:\n  -h --help              Show this help\n     --version           Show package version\n     --no-ask-password   Do not prompt for password\n  -H --host=[USER@]HOST  Operate on remote host\n  -M --machine=CONTAINER Operate on local container\n     --transient         Only set transient hostname\n     --static            Only set static hostname\n     --pretty            Only set pretty hostname\n     --json=pretty|short|off\n                         Generate JSON output\n\nSee the hostnamectl(1) man page for details.\n</code></pre>\n<p>I learned there's transient and static hostnames, so that's cool...</p>\n<p>The thing I needed was <code>hostnamectl --static hostname babyblue-aurora</code></p>\n<p>pretty sweet tool</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2024-12-06T07:25:59-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "linux",
        "terminal",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/how-to-survive-the-flood.html",
      "url": "https://pype.dev/how-to-survive-the-flood.html",
      "title": "How To Survive The Flood",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>There a lot of flood stories throughout the history of the world, and the Bible\nis no different in this regard. God warns Noah of a de-creation event, whereby\nhe'll start over with humanity via Noah and his family. Noah survives the flood\nby abiding in Yahweh and staying close to the One who loves him.</p>\n<blockquote>\n<p>Note this reflection doesn't address <em>AT ALL</em> if the flood narrative is a\n&quot;real&quot; historical event, whether it's a global or local event, or anything\nlike that - regardless of those points the Biblical authors used this type of\nimagery of chaos waters to communicate themes of judgement and wrath.</p>\n</blockquote>\n<p>Jesus, in the Sermon on the Mount with the 2 houses, calls back to the images\nof the chaos waters (the winds and the rains). His instruction is that the wise\nman who built his house on the rock will survive, but the foolish man builds\nhis house on the sand and the winds and the rains destroyed it.</p>\n<p>Somewhat obviously this is metaphorical for basing your life on wisdom or\nfolly. The wisdom is Jesus' teaching which is all based on Yahweh's love for\nhumanity and his desire to partner with humanity for the good of the whole\nearth.</p>\n<p>The simple take-away is for us to survive the winds and the rain, and to say it\nmore fully - to survive de-creation and destruction, we must live our lives in\na way that revolves around Jesus, the perfect human. He calls us to a greater\nhumanity, an unbroken humanity, which is unachievable apart from him (just look\naround if you doubt this truth).</p>\n<p>It's important to notice though that abiding in the Lord, basing your life on\nthe rock, doesn't spare you from the wind and the rain. Trials come, life gets\nhard, shit hits the fan. The last few weeks for me haven't been my favorite and\nI've certainly experienced turmoil in my life but frankly Jesus makes those\nthings bearable... in a way I can't put enough words to I'll just be reminded of\nPaul in Romans 8...</p>\n<pre><code class=\"language-Romans\">worthy to be compared with the glory that is to be revealed to us.” Our present\ntrials are not on an equal scale with the glory of heaven ```\n\nBy God's grace he's molded my heart to be nearly incapable of separating the\nLove God has for me from any trial I face - it's not a magic answer or silver\nbullet to fixing those problems, and it doesn't make them go away, but I know\nthe sufferings here aren't even worth comparing to the glory of the Lord. Amen.\n\n&lt;!-- Content Injected to every content markdown footer --&gt;\n\n[github]: https://github.com/rochacbruno/marmite\n</code></pre>\n",
      "summary": "",
      "date_published": "2024-12-04T05:52:44-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "bible-project",
        "faith"
      ],
      "language": "en"
    }
  ]
}