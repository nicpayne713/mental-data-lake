<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Pype.dev</title><link>https://pype.dev</link><description>my mental data-lake</description><pubDate>Wed, 21 Dec 2022 09:45:34 GMT</pubDate><lastBuildDate>Sat, 25 Jan 2025 19:52:49 GMT</lastBuildDate><generator>marmite</generator><image><url>https://pype.dev/media/og-02.png</url><title></title><link></link></image><item><title>suda.vim for sudo access to files</title><link>https://pype.dev/suda-vim-for-sudo-access-to-files.html</link><author>nicpayne</author><category>vim</category><category>linux</category><category>tech</category><guid>https://pype.dev/suda-vim-for-sudo-access-to-files.html</guid><pubDate>Wed, 21 Dec 2022 09:45:34 GMT</pubDate><source url="https://pype.dev">tag-vim</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>I regularly need to edit system config files - take /etc/sanoid/sanoid.conf as
an example... I'll want to play with something but if I don't start Neovim as
root then I get in trouble making edits I can't save! So
<a href="https://github.com/lambdalisue/suda.vim">suda.vim</a> gives me
<code>:SudaWrite</code> which let's me write that buffer with sudo privileges even though
I'm Neovim is running with my login user!</p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>New lines in Markdown tables</title><link>https://pype.dev/new-lines-in-markdown-tables.html</link><author>nicpayne</author><category>vim</category><category>webdev</category><category>tech</category><guid>https://pype.dev/new-lines-in-markdown-tables.html</guid><pubDate>Fri, 25 Nov 2022 13:35:05 GMT</pubDate><source url="https://pype.dev">tag-vim</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>I wanted to break down some long lines in a Markdown table cell to make it look
nicer on my blog but \n didn't do anything for me... turns out <br/> is the
magic sauce</p>
<table>
<thead>
<tr>
<th><em>Column 1</em></th>
<th><em>Column 2</em></th>
</tr>
</thead>
<tbody>
<tr>
<td>Key</td>
<td>Doggo ipsum many pats. Borkdrive borking doggo doing me a frighten doggorino, noodle horse heckin. what a nice floof. Pupper borking doggo you are doing me a frighten, much ruin diet.</td>
</tr>
<tr>
<td>---</td>
<td>---</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th><em>Column 1</em></th>
<th><em>Column 2</em></th>
</tr>
</thead>
<tbody>
<tr>
<td>Key</td>
<td>Doggo ipsum many pats. <br/> Borkdrive borking doggo doing me a frighten doggorino, noodle horse heckin. <br/> what a nice floof. <br/> Pupper borking doggo you are doing me a frighten, much ruin diet.</td>
</tr>
<tr>
<td>---</td>
<td>---</td>
</tr>
</tbody>
</table>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Description of my proposed vimconf 2022 talk</title><link>https://pype.dev/description-of-my-proposed-vimconf-2022-talk.html</link><author>nicpayne</author><category>linux</category><category>vim</category><category>tech</category><guid>https://pype.dev/description-of-my-proposed-vimconf-2022-talk.html</guid><pubDate>Sat, 12 Nov 2022 19:39:19 GMT</pubDate><source url="https://pype.dev">tag-vim</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>Switching to Vim opened a whole new world to me for interacting with a computer
and for getting things done. Before I adopted Vim I used GUIs for everything
because I thought that's how it had to be done... Notes in OneNote, code using
a GUI editor, different notes in TiddlyWiki, slides for work in PowerPoint,
slides for church using Logos, etc... Adopting Vim allowed me to disconnect a
specific tool from the problem that tool is solving - because usually I just
need to write text (notes, code, slides, etc.). Now, very nearly everything I
do is from a text-based and git-based workflow... I put all my notes on
basically anything just in my blog, which is all markdown and deployed to GH
with Markata on every push (living dangerously pushing to main) - and that's
all done easily from Vim with nice syntax highlighting, fast response,
integrated git-plugins, etc.. I keep project-specific task lists just in
markdown files and I have Vim/tmux shortcuts to quickly add todos for any
project (todo list is done with markata todoui) and I can get there fast
because my Vim workflow dovetails with Tmux nicely. Also I can pull that list
up right from the terminal, which I'm already in because Vim.... Vim also
pushed me into the cli more - because Vim is so easily extended with cli tools
and I'm already in the terminal... The builtin functionality also made things
make more sense - no more right-click, find &quot;refactor all&quot; or &quot;rename symbol&quot;
(for some stupid reason)... Vim find-replace is so intuitive and if I need it
extended then I learned what sed was because of Vim. Moving quickly in Vim also
enables me to do my job incredibly fast because I hop into several projects a
day in a coaching role - if I was bound by GUIs I'd be waiting forever for
startup, would lose which GUI instance was which project, etc... Being in the
terminal also made Tmux a trivial choice - now I have 90 tmux sessions, all
named appropriately, ready for me to jump back to and all while keeping the
majority of RAM still free for Chrome. Vim as my IDE also forced me to learn
way more about Python (I'm a python developer primarily), how LSP works, how to
configure a development environment, etc... things I took for granted in my GUI
workflows, or never knew, or worse - thought I knew but deeply misunderstood.
Now that I understand them better, I can coach my peers more effectively even
if they are still in a GUI-based ecosystem.</p>
<p>Basically, (Neo)Vim actually did change my life and I'm really thankful for it
(maybe that should be the title?)</p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Case-insensitive search in Vim</title><link>https://pype.dev/case-insensitive-search-in-vim.html</link><author>nicpayne</author><category>vim</category><category>vim</category><category>tech</category><guid>https://pype.dev/case-insensitive-search-in-vim.html</guid><pubDate>Fri, 21 Oct 2022 06:40:21 GMT</pubDate><source url="https://pype.dev">tag-vim</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>/mysearch\c will match mysearch, MYSEARCH, mYSeArCh...</p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Case-insensitive search in Vim</title><link>https://pype.dev/case-insensitive-search-in-vim.html</link><author>nicpayne</author><category>vim</category><category>vim</category><category>tech</category><guid>https://pype.dev/case-insensitive-search-in-vim.html</guid><pubDate>Fri, 21 Oct 2022 06:40:21 GMT</pubDate><source url="https://pype.dev">tag-vim</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>/mysearch\c will match mysearch, MYSEARCH, mYSeArCh...</p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Use the right lspsage, you dope!</title><link>https://pype.dev/use-the-right-lspsage-you-dope.html</link><author>nicpayne</author><category>vim</category><category>cli</category><guid>https://pype.dev/use-the-right-lspsage-you-dope.html</guid><pubDate>Fri, 14 Oct 2022 19:41:44 GMT</pubDate><source url="https://pype.dev">tag-vim</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>If you think glepnir/lspsaga.nvim config will work with tali5/lspsaga.nvim installed... you're in for a rude awakening. Double check your forks folks!</p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Playing with mdformat</title><link>https://pype.dev/playing-with-mdformat.html</link><author>nicpayne</author><category>python</category><category>vim</category><category>tech</category><guid>https://pype.dev/playing-with-mdformat.html</guid><pubDate>Tue, 23 Aug 2022 06:56:15 GMT</pubDate><source url="https://pype.dev">tag-vim</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<pre><code class="language-python">import this; print(this); print(&quot;what is taking so long black!!&quot;)
</code></pre>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>See git history about one file</title><link>https://pype.dev/see-git-history-about-one-file.html</link><author>nicpayne</author><category>cli</category><category>vim</category><category>tech</category><guid>https://pype.dev/see-git-history-about-one-file.html</guid><pubDate>Thu, 19 May 2022 06:43:32 GMT</pubDate><source url="https://pype.dev">tag-vim</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>In vim <code>G clog %</code> does a <code>git clog {current file}</code>. You get every commit that the target file is apart of (so there might be info in those commits unrelated)</p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Plug Snapshot!</title><link>https://pype.dev/plug-snapshot.html</link><author>nicpayne</author><category>vim</category><category>tech</category><guid>https://pype.dev/plug-snapshot.html</guid><pubDate>Tue, 17 May 2022 15:45:49 GMT</pubDate><source url="https://pype.dev">tag-vim</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>:PlugSnapshot, :w ~/dotfiles/nvim/snapshot.vim... keep your config safe with git!</p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Filepath Completion in Neovim</title><link>https://pype.dev/filepath-completion-in-neovim.html</link><author>nicpayne</author><category>vim</category><category>tech</category><guid>https://pype.dev/filepath-completion-in-neovim.html</guid><pubDate>Tue, 17 May 2022 14:03:27 GMT</pubDate><source url="https://pype.dev">tag-vim</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>I've had <code>Plug 'hrsh7th/cmp-path'</code> in my plugins for ever but didn't notice
until recently that I wasn't getting any filepath completion in vim!</p>
<p><u>Fuller setup instructions below the TLDR</u></p>
<h1><a href="#tldr" aria-hidden="true" class="anchor" id="tldr"></a>TL;DR</h1>
<p>Turns out I need to not be a dope and configure nvim-cmp to actually use it...</p>
<pre><code class="language-lua">local cmp = require'cmp'

cmp.setup({
    -- removed rest of setup - see the rest in my dotfiles
  sources = cmp.config.sources({
    { name = 'path' },  -- This needs to be here!
    })
})
</code></pre>
<h1><a href="#my-setup" aria-hidden="true" class="anchor" id="my-setup"></a>My Setup</h1>
<p>For the sake of completeness here is how I currently (May 2022) configure completion in Neovim usin <code>nvim-cmp</code></p>
<h2><a href="#plugins" aria-hidden="true" class="anchor" id="plugins"></a>Plugins</h2>
<p>I keep all my plugins in <code>plugins.vim</code></p>
<pre><code class="language-vim">call plug#begin(s:plug_dir)
Plug 'neovim/nvim-lspconfig'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-path'
Plug 'hrsh7th/cmp-cmdline'
Plug 'hrsh7th/nvim-cmp'

&quot; For ultisnips users.
&lt;!-- &quot; Plug 'SirVer/ultisnips' --&gt;
&lt;!-- &quot; Plug 'quangnguyen30192/cmp-nvim-ultisnips' --&gt;

call plug#end()

</code></pre>
<h2><a href="#vim-settings" aria-hidden="true" class="anchor" id="vim-settings"></a>Vim Settings</h2>
<p>My vim settings are also kept in their own file, <code>settings.vim</code></p>
<pre><code class="language-vim">
set completeopt=menu,menuone,noselect

</code></pre>
<h2><a href="#nvim-cmp-configuration" aria-hidden="true" class="anchor" id="nvim-cmp-configuration"></a>nvim-cmp configuration</h2>
<p>I have a <code>cmp.lua</code> file that gets sourced in <code>init.lua</code> (file structure explained below) for configuring cmp.</p>
<pre><code class="language-lua">
  -- Setup nvim-cmp.
local cmp = require'cmp'

cmp.setup({
  snippet = {
    -- REQUIRED - you must specify a snippet engine
    expand = function(args)
      -- For `ultisnips` user.
      vim.fn[&quot;UltiSnips#Anon&quot;](args.body)
    end,
  },
  window = {
      completion = cmp.config.window.bordered(),
  },
  mapping = {
    ['&lt;Down&gt;'] = cmp.mapping.select_next_item({ behavior = cmp.SelectBehavior.Select }),
    ['&lt;Up&gt;'] = cmp.mapping.select_prev_item({ behavior = cmp.SelectBehavior.Select }),
    ['&lt;C-d&gt;'] = cmp.mapping.scroll_docs(-4),
    ['&lt;C-f&gt;'] = cmp.mapping.scroll_docs(4),
    ['&lt;C-Space&gt;'] = cmp.mapping.complete(),
    ['&lt;C-e&gt;'] = cmp.mapping.close(),
    ['&lt;Tab&gt;'] = cmp.mapping(cmp.mapping.select_next_item(), { 'i', 's' }),
    ['&lt;CR&gt;'] = cmp.mapping.confirm({
      behavior = cmp.ConfirmBehavior.Replace,
      select = true,
    })
  },
  sources = cmp.config.sources({
    { name = 'nvim_lsp' },
    { name = 'ultisnips' },
    { name = 'buffer' },
    { name = 'path' },
    { name = 'tmux' },
    })
})

</code></pre>
<p>The <code>sources</code> section is what was key for this post...</p>
<h1><a href="#piecing-it-together" aria-hidden="true" class="anchor" id="piecing-it-together"></a>Piecing it together!</h1>
<p>My <code>init.vim</code> sources plugins and then settings and then finally calls <code>init.lua</code>.
<code>init.lua</code> sources my <code>cmp.lua</code> file and BANG! auto-completion.</p>
<h2><a href="#more-sources" aria-hidden="true" class="anchor" id="more-sources"></a>More sources</h2>
<p>hrsh7th's wiki for <code>nvim-cmp</code> is <a href="https://github.com/hrsh7th/nvim-cmp/wiki/List-of-sources">here</a> and has example configs as well as a list of sources...</p>
<p><u>Don't forget to configure and not just install!</u></p>
<p><a href="https://github.com/nicpayne713/dotfiles">my dotfiles</a></p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Vim-Spell-Check</title><link>https://pype.dev/vim-spell-check.html</link><author>nicpayne</author><category>vim</category><category>tech</category><guid>https://pype.dev/vim-spell-check.html</guid><pubDate>Fri, 01 Apr 2022 00:00:00 GMT</pubDate><source url="https://pype.dev">tag-vim</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p><u>Did you know you can spell check in Vim?!</u></p>
<!DOCTYPE html>
<html>
   <head>
      <title>Vim Spell check</title>
   </head>
   <body>
      <h3>Without...</h3>
      <p>Here is a missspelled word.</p>
<pre><code>  &lt;h3&gt;With!&lt;/h3&gt;
  &lt;p&gt;Here is a &lt;u&gt;missspelled&lt;/u&gt; word.&lt;/p&gt;
</code></pre>
   </body>
</html>
<h2><a href="#what-is-this-magic" aria-hidden="true" class="anchor" id="what-is-this-magic"></a>What is this magic???</h2>
<p><code>set: spell spelllang=en_us</code></p>
<h2><a href="#custom-words" aria-hidden="true" class="anchor" id="custom-words"></a>Custom words?</h2>
<p>Sometimes there's things that are words to you but not the default spell checker...</p>
<p>Common example: package names!</p>
<p><code>plotly</code>, <code>streamlit</code>, <code>psutil</code>, etc etc...</p>
<p>You can easily add these to your vim config by hitting <code>zw</code> ontop of the word!</p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Vim-Auto-Space</title><link>https://pype.dev/vim-auto-space.html</link><author>nicpayne</author><category>vim</category><category>tech</category><guid>https://pype.dev/vim-auto-space.html</guid><pubDate>Fri, 04 Mar 2022 00:00:00 GMT</pubDate><source url="https://pype.dev">tag-vim</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>I ran into an issue where I had some copy-pasta markdown tables in a docstring but the generator I used to make the table gave me tabs instead of spaces in odd places which caused <code>black</code> to throw a fit.
Instead of manually changing all tabs to spaes, or trying some goofy <code>:%s/&lt;magic tab character&gt;/&lt;%20 maybe?&gt;/g</code> I learned that Vim has my back...</p>
<pre><code>:retab
</code></pre>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item></channel></rss>