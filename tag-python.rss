<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Pype.dev</title><link>https://pype.dev</link><description>my mental data-lake</description><pubDate>Thu, 19 Dec 2024 05:59:30 GMT</pubDate><lastBuildDate>Sat, 25 Jan 2025 19:52:49 GMT</lastBuildDate><generator>marmite</generator><image><url>https://pype.dev/media/og-02.png</url><title></title><link></link></image><item><title>docker context (and an issue to question your sanity)</title><link>https://pype.dev/docker-context-and-an-issue-to-question-your-sanity.html</link><author>nicpayne</author><category>python</category><category>terminal</category><category>tech</category><guid>https://pype.dev/docker-context-and-an-issue-to-question-your-sanity.html</guid><pubDate>Thu, 19 Dec 2024 05:59:30 GMT</pubDate><source url="https://pype.dev">tag-python</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>docker contexts are great, would recommend putting them in your prompt though (via starship or something else)... here's why</p>
<p>I like to manage my containers remotely - I have a nice development setup on my desktop and I try to keep my server as bare-bones as possible. For a while I've been using ansible which makes it easy to manage configuration etc on other machines. But I recently learned about docker contexts and I'm planning to scale down my homelab management to just docker-compose stacks rather than a bunch of super complicated ansible playbooks</p>
<p>So, setting up a context is easy - it's basically an ssh connection to another machine!</p>
<p><code>docker context create koober --docker &quot;host=ssh://nic@koober&quot;</code></p>
<p><code>koober</code> is one of my dev machines and my <code>~/.ssh/config</code> is setup such that I can <code>ssh nic@koober</code>, this makes the context work really seamlessly.</p>
<p>So there's the <code>default</code> context (the machine you're on) and now I have <code>koober</code></p>
<p>To use it you run <code>docker context use koober</code></p>
<p>And then to check we can <code>ls</code> the contexts</p>
<pre><code>docker context ls
NAME       DESCRIPTION                               DOCKER ENDPOINT               ERROR
default    Current DOCKER_HOST based configuration   unix:///var/run/docker.sock   
koober *                                             ssh://nic@koober
</code></pre>
<blockquote>
<p>Notice the * - that indicates that's our current context.</p>
</blockquote>
<h2><a href="#trouble" aria-hidden="true" class="anchor" id="trouble"></a>Trouble</h2>
<p>Now here's where things get hairy... you've gotta be super-aware of what context you're using. I have an indicator in my starship prompt that shows the current context, but since I'm new to using them I kind of didn't notice it until I ran into this issue...</p>
<p>I'm working on a python application in docker but was not able to execute the entrypoint even though I KNEW the file was there... let's take a look</p>
<h3><a href="#example" aria-hidden="true" class="anchor" id="example"></a>Example</h3>
<p>Here's a minimal hello world applycation in docker to illustrate the issue</p>
<pre><code class="language-python"># main.py
print(&quot;hello world&quot;)
</code></pre>
<pre><code class="language-Dockerfile"># Use an official Python runtime as a parent image
FROM python:3.11-slim

# Set the working directory in the container
WORKDIR /app

# Copy the current directory contents into the container at /app
COPY . /app

# Run the main.py script as the container's main process
CMD [&quot;python&quot;, &quot;main.py&quot;]
</code></pre>
<pre><code class="language-yaml">services:
  hello-world:
    build: .
    volumes:
      - .:/app
</code></pre>
<p>Notice volume mounting in my project directory <code>.</code> to <code>/app</code> as a common practice to develop inside the container</p>
<p>Here's where I started to question my sanity...</p>
<pre><code class="language-bash">✗ docker compose up                                            
[+] Running 1/0
 ✔ Container docker-context-example-hello-world-1  Created                                                                                                                                                                                                                                                              0.0s 
Attaching to hello-world-1
hello-world-1  | python: can't open file '/app/main.py': [Errno 2] No such file or directory
hello-world-1 exited with code 2
</code></pre>
<p><code>python can't open file</code>? hmm... Let's take a look at the image</p>
<p>First let's make sure we get the image name right</p>
<pre><code class="language-bash">✗ docker container ls -a              
CONTAINER ID   IMAGE                                           COMMAND                  CREATED          STATUS                       PORTS                                                                                  NAMES
3d7285fc39e2   docker-context-example-hello-world              &quot;python main.py&quot;         10 minutes ago   Exited (2) 44 seconds ago                                                                                           docker-context-example-hello-world-1
</code></pre>
<p>Now we can <code>docker run --rm -it --entrypoint /bin/bash --name debug docker-context-example-hello-world</code></p>
<pre><code class="language-bash">❯ docker run --rm -it --entrypoint /bin/bash --name debug docker-context-example-hello-world  
root@ee46d0e22de8:/app# python main.py
Hello, World!
root@ee46d0e22de8:/app# 
</code></pre>
<p>WHAT THE HECK??</p>
<h2><a href="#what-happened" aria-hidden="true" class="anchor" id="what-happened"></a>What happened...</h2>
<p>What happened turns out to be pretty simple once we realize I'm using contexts...</p>
<p><code>koboer</code> is a remote context, the <code>docker run</code> and <code>docker compose up</code> commands are interacting with the docker socket on that machine.</p>
<p>So if I compose up the stack notice that there's a volume bind mount in there - well those do <em>not</em> work with contexts (or at least I'm not aware of hose to make it work) and so the <code>/app</code> directory was getting blown away essentially with an empty overlay...</p>
<p>But when running with just <code>docker run</code> with no volume mount, the code was copied in during the build and is right where we expect it...</p>
<h3><a href="#lets-prove-it" aria-hidden="true" class="anchor" id="lets-prove-it"></a>Let's prove it</h3>
<pre><code class="language-bash">❯ docker run --rm -it --entrypoint /bin/bash --name debug -v .:/app docker-context-example-hello-world
root@903f591c0384:/app# python main.py
python: can't open file '/app/main.py': [Errno 2] No such file or directory
root@903f591c0384:/app# 
</code></pre>
<pre><code>Adding a `-v .:/app` to match the compose file, we get the same error...
</code></pre>
<p>If we switch to the default context we are back up and running as expected</p>
<pre><code class="language-bash">✗ docker context use default
default
Current context is now &quot;default&quot;

nic in /tmp/docker-context-example  via   v3.13.0  (dev) 󰒄 󱔎 NO PYTHON ENVIORNMENT SET 
❯ docker compose up         
[+] Running 1/0
 ✔ Container docker-context-example-hello-world-1  Created                                                                                                                                                                                                                                                              0.0s 
Attaching to hello-world-1
hello-world-1  | Hello, World!
hello-world-1 exited with code 0

nic in /tmp/docker-context-example  via   v3.13.0  (dev) 󰒄 󱔎 NO PYTHON ENVIORNMENT SET 
❯ docker run --rm -it --entrypoint /bin/bash --name debug -v .:/app docker-context-example-hello-world
root@4045b6aa8883:/app# python main.py
Hello, World!
root@4045b6aa8883:/app# 
</code></pre>
<p>Successful runs on both accounts with the volume mount</p>
<h2><a href="#tldr" aria-hidden="true" class="anchor" id="tldr"></a>TLDR</h2>
<p>Context is king</p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Add a healthcheck to your FastAPI app</title><link>https://pype.dev/add-a-healthcheck-to-your-fastapi-app.html</link><author>nicpayne</author><category>python</category><category>homelab</category><category>tech</category><guid>https://pype.dev/add-a-healthcheck-to-your-fastapi-app.html</guid><pubDate>Sun, 15 Dec 2024 15:41:36 GMT</pubDate><source url="https://pype.dev">tag-python</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>I'm building a few FastAPI apps to throw in docker and run on my homelab... I wanted to add healthchecks and here's a simple way to do it</p>
<p>Make sure to install <code>curl</code> in the dockerfile (near the top for effeciency)</p>
<pre><code># Install curl with minimal dependencies
RUN apt-get update &amp;&amp; \
    apt-get install -y --no-install-recommends curl &amp;&amp; \
    apt-get clean &amp;&amp; \
    rm -rf /var/lib/apt/lists/*

</code></pre>
<p>Then I recommend making compose files even for single image deployments</p>
<pre><code>services:
  app:
    build: .
    volumes:
      - type: bind
        source: .
        target: /app
    environment:
      - PYTHONPATH=/app
      - DOCKER_ENV=true
      - UV_VIRTUALENV=/opt/app-env
    user: &quot;1000:1000&quot;
    restart: unless-stopped
    healthcheck:
      test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:8000/health&quot;]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

</code></pre>
<p>Then finally you'll need a <code>/health</code> endpoint</p>
<pre><code class="language-python">
@app.get(&quot;/health&quot;, response_class=HTMLResponse)
async def health_check():
    &quot;&quot;&quot;
    A health check endpoint that returns a status message.
    &quot;&quot;&quot;
    return &quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Service is healthy&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;

</code></pre>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Switching from AltaCV to RenderCV for my Resume</title><link>https://pype.dev/switching-from-altacv-to-rendercv-for-my-resume.html</link><author>nicpayne</author><category>python</category><category>python</category><category>tech</category><guid>https://pype.dev/switching-from-altacv-to-rendercv-for-my-resume.html</guid><pubDate>Thu, 01 Aug 2024 05:59:46 GMT</pubDate><source url="https://pype.dev">tag-python</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>I was using a fun LaTex-based project for managing my resume called <a href="https://github.com/liantze/AltaCV">AltaCV</a>. I loved the customization and was familiar with Tek from school. However, I update my resume so infrequently that anytime I'd hop back to it I'd have to remember how to work with Tex and that was frustrating as I've lost touch with it over the years.</p>
<p>Scrolling GitHub treding repos I saw <a href="https://github.com/sinaatalay/rendercv">RenderCV</a> which let's me just use YAML to write my resume and then it compiles to Tek through Python. There's a sister project to make your own using this very easly call <a href="https://github.com/sinaatalay/rendercv-pipeline">rendercv-pipeline</a>. I forked that repo and translated my tek resume to the YAML. The included theme is nice enough is YAML is much easier to maintain long-term.</p>
<p>My resume is behind a private GH repo but the example from rendercv-pipeline is <a href="https://github.com/sinaatalay/rendercv-pipeline/blob/main/John_Doe_CV.pdf">here on GitHub</a></p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Switching from AltaCV to RenderCV for my Resume</title><link>https://pype.dev/switching-from-altacv-to-rendercv-for-my-resume.html</link><author>nicpayne</author><category>python</category><category>python</category><category>tech</category><guid>https://pype.dev/switching-from-altacv-to-rendercv-for-my-resume.html</guid><pubDate>Thu, 01 Aug 2024 05:59:46 GMT</pubDate><source url="https://pype.dev">tag-python</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>I was using a fun LaTex-based project for managing my resume called <a href="https://github.com/liantze/AltaCV">AltaCV</a>. I loved the customization and was familiar with Tek from school. However, I update my resume so infrequently that anytime I'd hop back to it I'd have to remember how to work with Tex and that was frustrating as I've lost touch with it over the years.</p>
<p>Scrolling GitHub treding repos I saw <a href="https://github.com/sinaatalay/rendercv">RenderCV</a> which let's me just use YAML to write my resume and then it compiles to Tek through Python. There's a sister project to make your own using this very easly call <a href="https://github.com/sinaatalay/rendercv-pipeline">rendercv-pipeline</a>. I forked that repo and translated my tek resume to the YAML. The included theme is nice enough is YAML is much easier to maintain long-term.</p>
<p>My resume is behind a private GH repo but the example from rendercv-pipeline is <a href="https://github.com/sinaatalay/rendercv-pipeline/blob/main/John_Doe_CV.pdf">here on GitHub</a></p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Modal Labs</title><link>https://pype.dev/modal-labs.html</link><author>nicpayne</author><category>python</category><category>cli</category><category>tech</category><guid>https://pype.dev/modal-labs.html</guid><pubDate>Wed, 28 Dec 2022 21:01:52 GMT</pubDate><source url="https://pype.dev">tag-python</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>Playing around with Modal Labs</p>
<p>One of the first things I tried was a regular cron job...</p>
<pre><code class="language-python">@stub.function(
    schedule=modal.Period(minutes=59), secret=modal.Secret.from_name(&quot;my-dummy-secret&quot;)
)
def say_hi():
    now = time.ctime()
    secret = os.environ.get(&quot;dummy-secret&quot;)
    print(f&quot;Hello {os.environ.get('USER', 'Rodney')} at {now}&quot;)
    print(f&quot;{secret=}&quot;)

</code></pre>
<p>This can get deployed with <code>modal deploy --name &lt;app name&gt; &lt;path to .py file with the stub and function defined in it&gt; </code></p>
<p>This function gets deployed as an app that I conveniently call <code>say_hi</code> (as far
as I can tell the app name can be anything - as I add functions to this same
app and deploy with the same name to get a new version)</p>
<p>Notice that this also is an example of giving access to a secret - defined in the Modal Labs dashboard</p>
<p>We can take a look at the apps running at <a href="https://modal.com/apps">https://modal.com/apps</a></p>
<p>I then added another function to experiment with custom container images and
saw then that Modal will just slap a new version on anything provisioned with
the same name (intuitive enough for sure) so when I add functions to my .py
script and run <code>modal deploy --name say_hi myscript.py</code> over and over, the app
called <code>say_hi</code> in the Modal apps dashboard just gets a new version</p>
<p>This means I can spin up several instances of functionally the same app but with different names/versions etc...
Q: Maybe there's gitops or policy stuff builtin to app names then?</p>
<p>I needed to take down an app I deployed as a duplicate but you don't stop apps
by name, you stop them by an id... see below</p>
<pre><code class="language-console">
modal-sandbox/modal_sandbox   main   ×1  ×9 via   v3.10.6(modal-sandbox)
✗ modal app stop --help

 Usage: modal app stop [OPTIONS] APP_ID

 Stop an app.

╭─ Arguments ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│ *    app_id      TEXT  [default: None] [required]                                                                                                │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
╭─ Options ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│ --help          Show this message and exit.                                                                                                      │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯


modal-sandbox/modal_sandbox   main   ×1  ×9 via   v3.10.6(modal-sandbox)
❯ modal app list
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ App ID                    ┃ Description         ┃ State    ┃ Creation time             ┃ Stop time                 ┃
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
│ ap-lzy1AAuVy7POFkUcDKRxpQ │ print_info          │ deployed │ 2022-12-28 20:59:07-06:00 │                           │
│ ap-qYjE45dciqgT3C3CpNp3RL │ say_hi              │ deployed │ 2022-12-28 19:49:22-06:00 │                           │
│ ap-X7FYneUeYV5IKHcyirSb87 │ link-scraper        │ stopped  │ 2022-12-28 15:39:02-06:00 │ 2022-12-28 15:39:04-06:00 │
│ ap-UOXTUU4uSRx2UZypJOcAsk │ example-get-started │ stopped  │ 2022-12-28 15:17:47-06:00 │ 2022-12-28 15:17:49-06:00 │
└───────────────────────────┴─────────────────────┴──────────┴───────────────────────────┴───────────────────────────┘

modal-sandbox/modal_sandbox   main   ×1  ×9 via   v3.10.6(modal-sandbox)
❯ modal app stop ap-lzy1AAuVy7POFkUcDKRxpQ

</code></pre>
<h1><a href="#git-warning" aria-hidden="true" class="anchor" id="git-warning"></a>Git warning!</h1>
<p>I ran <code>modal deploy ...</code> after comitting some stuff I wanted to try BUT I had
changes in my file I didn't want to deploy... some git safety would be nice for
deployment!</p>
<blockquote>
<p>git stash &amp;&amp; modal deploy .. &amp;&amp; git stash pop</p>
</blockquote>
<p>Question for Modal team - in my modal sandbox repo at commit:</p>
<pre><code>aab6162 (HEAD -&gt; main) HEAD@{1}: commit: print base version of my own image to prove it to me
 1 file changed, 2 insertions(+)

</code></pre>
<p>An environment variable, <code>BASE_VERSION</code> that I expect to be in my base image
was not available to the python function in my Modal app... hopefully the log
is still
<a href="https://modal.com/logs/ap-qYjE45dciqgT3C3CpNp3RL?functionId=fu-rOt31ShRE1W1CQfuf02fsq&amp;taskId=ta-dm8BfiblvFLwVIQyt75YC2&amp;inputId=in-n64klEFrLtbcm2BiykJEvW">here</a></p>
<h2><a href="#github-actions" aria-hidden="true" class="anchor" id="github-actions"></a>GitHub Actions</h2>
<p>I think it'd be easy to deploy from GH actions... just need an API Key...</p>
<h1><a href="#deployment" aria-hidden="true" class="anchor" id="deployment"></a>Deployment</h1>
<p>Without gitops it's already ahrd to manage my versions... need to get that built in either to github or locally sooooon</p>
<p>Nomad?? :D</p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Call basicConfig to get Python log messages in iPython</title><link>https://pype.dev/call-basicconfig-to-get-python-log-messages-in-ipython.html</link><author>nicpayne</author><category>python</category><category>cli</category><category>tech</category><guid>https://pype.dev/call-basicconfig-to-get-python-log-messages-in-ipython.html</guid><pubDate>Sat, 10 Dec 2022 14:04:23 GMT</pubDate><source url="https://pype.dev">tag-python</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<h1><a href="#logging-instead-of-printing" aria-hidden="true" class="anchor" id="logging-instead-of-printing"></a>Logging instead of printing</h1>
<p>I am trying to adopt <code>logger.debug</code> instead of <code>print</code> but ran into a confusing
thing in ipython during Advent of Code... I riddled by script with
<code>logger.debug</code> (yes after setting <code>logging.setLevel('DEBUG')</code>) but in ipython
none of my log messages showed up!</p>
<pre><code class="language-python">import logging

logger = logging.getLogger(__name__)
logger.setLevel(&quot;DEBUG&quot;)

</code></pre>
<p>Turns out what I was missing was a call to <code>basicConfig</code></p>
<pre><code class="language-python">import logging

# forget this and your messages are in the ether! or at least not seen in ipython...
logging.basicConfig()

logger = logging.getLogger(__name__)
logger.setLevel(&quot;DEBUG&quot;)
</code></pre>
<h1><a href="#bonus" aria-hidden="true" class="anchor" id="bonus"></a>Bonus</h1>
<p>Want your new messages to show up while iterating on something without killing
the ipython kernel?</p>
<pre><code class="language-python">from importlib import reload
reload(logging) # to make sure you get new log messages you add while developing!

</code></pre>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Benchmark your disks with fio</title><link>https://pype.dev/benchmark-your-disks-with-fio.html</link><author>nicpayne</author><category>python</category><category>zfs</category><category>tech</category><guid>https://pype.dev/benchmark-your-disks-with-fio.html</guid><pubDate>Sat, 27 Aug 2022 13:43:22 GMT</pubDate><source url="https://pype.dev">tag-python</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<h1><a href="#intro" aria-hidden="true" class="anchor" id="intro"></a>Intro</h1>
<p>I use ZFS at home in my homelab for basically all of my storage... Docker uses
ZFS backend, all my VMs have their <code>.qcow2</code> images in their own zfs datasets,
and all my shares are ZFS datasets. I love ZFS but my home hardware presently
is the opposite of expensive or new... Thankfully I've had a lot of my orginal
homelab simply given to me but the cost of this is that I didn't put my
machines together, I didn't choose the disks, and I definitely didn't do the
research I would've otherwise done had I bankrolled my server personally...</p>
<h2><a href="#the-problem" aria-hidden="true" class="anchor" id="the-problem"></a>The Problem</h2>
<p>I run <code>glances</code> on basically all my machines and for the longest time I have
been seeing big time <code>iowait</code> issues. Now, since everything was free I've
largely been able to ignore that however I'm now after some better performance
which I think means new hardware!</p>
<p>Here is a random screenshot of my glances homepage at time of writing - The
only major load on my server is some <code>ffmpeg</code> transcoding (about 60% CPU
utilization)...</p>
<img src="https://cdn.statically.io/gh/pypeaday/images.pype.dev/main/blog-media/glances-iowait.png" alt="glances" title="glances with iowait" />
<p>As you can see... there's a lot of issues and <em>I don't even know what they mean</em>.</p>
<h1><a href="#fio" aria-hidden="true" class="anchor" id="fio"></a>fio</h1>
<p>I heard about <a href="https://fio.readthedocs.io/en/latest/">fio</a> through a friend and
decided to try it out quick. It installs with <code>apt</code> on ubuntu quick and easy...</p>
<p>Jim Saltar has a good blog post on it <a href="https://arstechnica.com/gadgets/2020/02/how-fast-are-your-disks-find-out-the-open-source-way-with-fio/">here</a></p>
<p>Basically it's a handy tool for benchmarking your disks and the blog dives into
what types of metrics matter - it's not just throughput, but also latency,
iops, etc.</p>
<h2><a href="#tests" aria-hidden="true" class="anchor" id="tests"></a>Tests</h2>
<p>I ran a few basic commands inside a new zfs dataset on my server <code>tank/fio</code></p>
<pre><code class="language-bash">fio --name=random-write --ioengine=posixaio --rw=randwrite --bs=4k --size=4g --numjobs=1 --runtime=60 --time_based --end_fsync=1 &gt; single-4KiB-random-write.txt
fio --name=random-write --ioengine=posixaio --rw=randwrite --bs=64k --size=256m --numjobs=16 --iodepth=16 --runtime=60 --time_based --end_fsync=1 &gt; 16-parallel-64KiB-random-write.txt
fio --name=random-write --ioengine=posixaio --rw=randwrite --bs=1m --size=16g --numjobs=1 --iodepth=1 --runtime=60 --time_based --end_fsync=1 &gt; single-1MiB-random-write.txt
</code></pre>
<h2><a href="#results" aria-hidden="true" class="anchor" id="results"></a>Results</h2>
<p>The single 4 KiB random write:</p>
<p><code>WRITE: bw=7836KiB/s (8024kB/s), 7836KiB/s-7836KiB/s (8024kB/s-8024kB/s), io=523MiB (548MB), run=68317-68317msec</code></p>
<p>The 16 parallel 64KiB random writes:</p>
<p><code>WRITE: bw=93.9MiB/s (98.4MB/s), 5599KiB/s-6303KiB/s (5734kB/s-6454kB/s), io=7642MiB (8013MB), run=81310-81418msec</code></p>
<p>The single 1MiB random write:</p>
<p><code>WRITE: bw=81.2MiB/s (85.1MB/s), 81.2MiB/s-81.2MiB/s (85.1MB/s-85.1MB/s), io=8177MiB (8574MB), run=100699-100699msec</code></p>
<h1><a href="#summary" aria-hidden="true" class="anchor" id="summary"></a>Summary</h1>
<p>So I don't fully understand these numbers yet... 80-100 MiB/s isn't super fast
and that's across a parallelized workload... The single threaded workloads have
awful performance so this tells me something is wrong... I have a few ideas...</p>
<ol>
<li>ZFS dataset config options such as <code>ashift</code> or the blocksize might be way misconfigured</li>
<li>The disks/pool which came from a TrueNAS/FreeBSD machine may have some artifacts that I need to clean up</li>
<li>The SAS controller I am using, which I flashed with IT firmware to get it into JBOD mode might be messed up</li>
<li>The data cables themselves could be a problem...</li>
</ol>
<p>Points 3 and 4 are less likely given that the write speed does increase in the parallelized job but I'm a newbie so it's time to dive in!</p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Playing with mdformat</title><link>https://pype.dev/playing-with-mdformat.html</link><author>nicpayne</author><category>python</category><category>vim</category><category>tech</category><guid>https://pype.dev/playing-with-mdformat.html</guid><pubDate>Tue, 23 Aug 2022 06:56:15 GMT</pubDate><source url="https://pype.dev">tag-python</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<pre><code class="language-python">import this; print(this); print(&quot;what is taking so long black!!&quot;)
</code></pre>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Add colored indicators to your dataframes html representation</title><link>https://pype.dev/add-colored-indicators-to-your-dataframes-html-representation.html</link><author>nicpayne</author><category>python</category><category>data</category><category>tech</category><guid>https://pype.dev/add-colored-indicators-to-your-dataframes-html-representation.html</guid><pubDate>Sat, 04 Jun 2022 06:12:33 GMT</pubDate><source url="https://pype.dev">tag-python</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p><a href="https://twitter.com/driscollis">Mike Driscoll</a> recently tweeted about making
colored out with pandas DataFrames and I just had to try it for myself</p>
<h1><a href="#use-case" aria-hidden="true" class="anchor" id="use-case"></a>Use Case</h1>
<p>First though... why?
My biggest use case is a monitoring pipeline of mine... The details aside, the
output of my pipeline is a dataframe where each row has information about a
failed pipeline that I need to go look into. I dump that result to a simle html
file that's hosted on an internal site and the file is updated every couple of
hours. Adding some colored indicators automatically to the rows to help me
assess severity of each record would be a handy way to quickly get an
understanding the state of our pipelines.</p>
<h1><a href="#how" aria-hidden="true" class="anchor" id="how"></a>How?</h1>
<p>The docs for the <code>applymap</code> method state simply:</p>
<pre><code>Apply a CSS-styling function elementwise.

Updates the HTML representation with the result.

</code></pre>
<p>So we can write a function that returns <code>color: {color}</code> based on the dataframe
values and when we drop that dataframe to html we'll have some simple css
styling applied automagically!</p>
<p>By default the function will be applied to all columns of the dataframe, but
that's not useful if the columns are different types which is usually the case.
Luckily there is a <code>subset</code> keyword to only apply to the columns you need!</p>
<p>Consider my example</p>
<pre><code class="language-python">sandbox   main via 3.8.11(sandbox) ipython
❯ df = pd.read_csv(&quot;cars.csv&quot;)

sandbox   main via 3.8.11(sandbox) ipython
❯ def mpg_color(val: float):
...:     color = &quot;red&quot; if val &lt; 21 else &quot;green&quot;
...:     return f&quot;color: {color}&quot;

sandbox   main via 3.8.11(sandbox) ipython
❯ df.style.applymap(mpg_color, subset=&quot;mpg&quot;).to_html(&quot;color.html&quot;)
</code></pre>
<p>I want to quickly see if the <code>mpg</code> is any good for the cars in the cars dataset
and I'll define &quot;good&quot; as better than 21 mpg (not great I know but just for the
sake of discussion...)</p>
<p>The function returns an appropriate css string and after I <code>style.applymap</code> on just the <code>mpg</code> column we get this!</p>
<style type="text/css">
#T_95e99_row0_col1, #T_95e99_row1_col1, #T_95e99_row2_col1, #T_95e99_row3_col1 {
  color: green;
}
#T_95e99_row4_col1 {
  color: red;
}
</style>
<table id="T_95e99">
  <thead>
    <tr>
      <th class="blank level0" >&nbsp;</th>
      <th id="T_95e99_level0_col0" class="col_heading level0 col0" >Unnamed: 0</th>
      <th id="T_95e99_level0_col1" class="col_heading level0 col1" >mpg</th>
      <th id="T_95e99_level0_col2" class="col_heading level0 col2" >cyl</th>
      <th id="T_95e99_level0_col3" class="col_heading level0 col3" >disp</th>
      <th id="T_95e99_level0_col4" class="col_heading level0 col4" >hp</th>
      <th id="T_95e99_level0_col5" class="col_heading level0 col5" >drat</th>
      <th id="T_95e99_level0_col6" class="col_heading level0 col6" >wt</th>
      <th id="T_95e99_level0_col7" class="col_heading level0 col7" >qsec</th>
      <th id="T_95e99_level0_col8" class="col_heading level0 col8" >vs</th>
      <th id="T_95e99_level0_col9" class="col_heading level0 col9" >am</th>
      <th id="T_95e99_level0_col10" class="col_heading level0 col10" >gear</th>
      <th id="T_95e99_level0_col11" class="col_heading level0 col11" >carb</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th id="T_95e99_level0_row0" class="row_heading level0 row0" >0</th>
      <td id="T_95e99_row0_col0" class="data row0 col0" >Mazda RX4</td>
      <td id="T_95e99_row0_col1" class="data row0 col1" >21.000000</td>
      <td id="T_95e99_row0_col2" class="data row0 col2" >6</td>
      <td id="T_95e99_row0_col3" class="data row0 col3" >160.000000</td>
      <td id="T_95e99_row0_col4" class="data row0 col4" >110</td>
      <td id="T_95e99_row0_col5" class="data row0 col5" >3.900000</td>
      <td id="T_95e99_row0_col6" class="data row0 col6" >2.620000</td>
      <td id="T_95e99_row0_col7" class="data row0 col7" >16.460000</td>
      <td id="T_95e99_row0_col8" class="data row0 col8" >0</td>
      <td id="T_95e99_row0_col9" class="data row0 col9" >1</td>
      <td id="T_95e99_row0_col10" class="data row0 col10" >4</td>
      <td id="T_95e99_row0_col11" class="data row0 col11" >4</td>
    </tr>
    <tr>
      <th id="T_95e99_level0_row1" class="row_heading level0 row1" >1</th>
      <td id="T_95e99_row1_col0" class="data row1 col0" >Mazda RX4 Wag</td>
      <td id="T_95e99_row1_col1" class="data row1 col1" >21.000000</td>
      <td id="T_95e99_row1_col2" class="data row1 col2" >6</td>
      <td id="T_95e99_row1_col3" class="data row1 col3" >160.000000</td>
      <td id="T_95e99_row1_col4" class="data row1 col4" >110</td>
      <td id="T_95e99_row1_col5" class="data row1 col5" >3.900000</td>
      <td id="T_95e99_row1_col6" class="data row1 col6" >2.875000</td>
      <td id="T_95e99_row1_col7" class="data row1 col7" >17.020000</td>
      <td id="T_95e99_row1_col8" class="data row1 col8" >0</td>
      <td id="T_95e99_row1_col9" class="data row1 col9" >1</td>
      <td id="T_95e99_row1_col10" class="data row1 col10" >4</td>
      <td id="T_95e99_row1_col11" class="data row1 col11" >4</td>
    </tr>
    <tr>
      <th id="T_95e99_level0_row2" class="row_heading level0 row2" >2</th>
      <td id="T_95e99_row2_col0" class="data row2 col0" >Datsun 710</td>
      <td id="T_95e99_row2_col1" class="data row2 col1" >22.800000</td>
      <td id="T_95e99_row2_col2" class="data row2 col2" >4</td>
      <td id="T_95e99_row2_col3" class="data row2 col3" >108.000000</td>
      <td id="T_95e99_row2_col4" class="data row2 col4" >93</td>
      <td id="T_95e99_row2_col5" class="data row2 col5" >3.850000</td>
      <td id="T_95e99_row2_col6" class="data row2 col6" >2.320000</td>
      <td id="T_95e99_row2_col7" class="data row2 col7" >18.610000</td>
      <td id="T_95e99_row2_col8" class="data row2 col8" >1</td>
      <td id="T_95e99_row2_col9" class="data row2 col9" >1</td>
      <td id="T_95e99_row2_col10" class="data row2 col10" >4</td>
      <td id="T_95e99_row2_col11" class="data row2 col11" >1</td>
    </tr>
    <tr>
      <th id="T_95e99_level0_row3" class="row_heading level0 row3" >3</th>
      <td id="T_95e99_row3_col0" class="data row3 col0" >Hornet 4 Drive</td>
      <td id="T_95e99_row3_col1" class="data row3 col1" >21.400000</td>
      <td id="T_95e99_row3_col2" class="data row3 col2" >6</td>
      <td id="T_95e99_row3_col3" class="data row3 col3" >258.000000</td>
      <td id="T_95e99_row3_col4" class="data row3 col4" >110</td>
      <td id="T_95e99_row3_col5" class="data row3 col5" >3.080000</td>
      <td id="T_95e99_row3_col6" class="data row3 col6" >3.215000</td>
      <td id="T_95e99_row3_col7" class="data row3 col7" >19.440000</td>
      <td id="T_95e99_row3_col8" class="data row3 col8" >1</td>
      <td id="T_95e99_row3_col9" class="data row3 col9" >0</td>
      <td id="T_95e99_row3_col10" class="data row3 col10" >3</td>
      <td id="T_95e99_row3_col11" class="data row3 col11" >1</td>
    </tr>
    <tr>
      <th id="T_95e99_level0_row4" class="row_heading level0 row4" >4</th>
      <td id="T_95e99_row4_col0" class="data row4 col0" >Hornet Sportabout</td>
      <td id="T_95e99_row4_col1" class="data row4 col1" >18.700000</td>
      <td id="T_95e99_row4_col2" class="data row4 col2" >8</td>
      <td id="T_95e99_row4_col3" class="data row4 col3" >360.000000</td>
      <td id="T_95e99_row4_col4" class="data row4 col4" >175</td>
      <td id="T_95e99_row4_col5" class="data row4 col5" >3.150000</td>
      <td id="T_95e99_row4_col6" class="data row4 col6" >3.440000</td>
      <td id="T_95e99_row4_col7" class="data row4 col7" >17.020000</td>
      <td id="T_95e99_row4_col8" class="data row4 col8" >0</td>
      <td id="T_95e99_row4_col9" class="data row4 col9" >0</td>
      <td id="T_95e99_row4_col10" class="data row4 col10" >3</td>
      <td id="T_95e99_row4_col11" class="data row4 col11" >2</td>
    </tr>
  </tbody>
</table>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Subset a list based on values in another list with itertools.compress</title><link>https://pype.dev/subset-a-list-based-on-values-in-another-list-with-itertools-compress.html</link><author>nicpayne</author><category>python</category><category>tech</category><guid>https://pype.dev/subset-a-list-based-on-values-in-another-list-with-itertools-compress.html</guid><pubDate>Thu, 19 May 2022 14:22:58 GMT</pubDate><source url="https://pype.dev">tag-python</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>I have list [True, False, False, True] and another list [1, 2, 3, 4] and a use case where I want to filter list 2 based on list 1 to remove values that line up with the element False in list 1.... so the outcome will be [1, 4]. list(compress(list2, list1)) will do it. As long as you can create a mask for the filter than itertool.compress will be your friend!</p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Dynamic-Form-Values-With-Jinja-And-Fastapi</title><link>https://pype.dev/dynamic-form-values-with-jinja-and-fastapi.html</link><author>nicpayne</author><category>python</category><category>tech</category><guid>https://pype.dev/dynamic-form-values-with-jinja-and-fastapi.html</guid><pubDate>Sun, 15 May 2022 00:00:00 GMT</pubDate><source url="https://pype.dev">tag-python</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>I'm currently working on a self-hostable wish list app using FastAPI so we can
finally drop Amazon forever. (The lists funcionality has been super handy for
sharing holiday gift ideas with the famj!)</p>
<h1><a href="#fastapi" aria-hidden="true" class="anchor" id="fastapi"></a>FastAPI</h1>
<p>FastAPI is an amazing framework for quickly building APIs with Python. I will have a slightly longer post about my brief experience with it coming later...</p>
<h1><a href="#jinja-forms-and-fastapi" aria-hidden="true" class="anchor" id="jinja-forms-and-fastapi"></a>Jinja, Forms, and FastAPI</h1>
<p>One of the last things I needed to figure out in my app was how to generate a
form in a Jinja template with a dynamic number of inputs and then pass all the
inputs to the backend to perform a database operation (my exact case was
removing rows from a table).</p>
<h2><a href="#explicit-values" aria-hidden="true" class="anchor" id="explicit-values"></a>Explicit Values</h2>
<p>The way to pass back explicit variables is really easy...</p>
<p>Our form would look like this (I'm using bootstrap CSS)</p>
<pre><code class="language-jinja">&lt;form method=&quot;post&quot;&gt;
    &lt;div class=&quot;form-check &quot;&gt;
        &lt;input class=&quot;form-check-input&quot;  name=&quot;item_1&quot; id=&quot;itemOne&quot; value=&quot;1&quot; type=&quot;checkbox&quot;&gt;
        &lt;label class=&quot;form-check-label&quot; for=&quot;itemOne&quot; &gt; A label for this item &lt;/label&gt;
    &lt;/div&gt;
    &lt;div class=&quot;form-check &quot;&gt;
        &lt;input class=&quot;form-check-input&quot;  name=&quot;item_2&quot; id=&quot;itemTwo&quot; value=&quot;2&quot; type=&quot;checkbox&quot;&gt;
        &lt;label class=&quot;form-check-label&quot; for=&quot;itemTwo&quot; &gt; A label for item 2 &lt;/label&gt;
    &lt;/div&gt;

&lt;button type=&quot;submit&quot; class=&quot;submit btn btn-xl&quot; &gt;Submit&lt;/button&gt;
&lt;/form&gt;
</code></pre>
<p>So what is this? This form will have 2 rows with the lables you see in <code>&lt;label&gt; &lt;/label&gt;</code> and checkboxes that when checked would have the value <code>value</code> in each
<code>&lt;input&gt;</code> line.</p>
<p>So our backend might looks something like this...</p>
<p><u>I'm keeping all the imports and stuff here to show where they come from but I won't discuss it all here - that'll be in a future post</u></p>
<pre><code class="language-python">import starlette.status as status
from fastapi import APIRouter, Depends, Form, Request
from fastapi.encoders import jsonable_encoder
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.templating import Jinja2Templates
from sqlalchemy.orm import Session

from app.session.session import create_get_session

router = APIRouter()
templates = Jinja2Templates(directory=&quot;templates/&quot;)

@router.post(&quot;/my_route/do_something_with_form&quot;, response_class=HTMLResponse)
async def delete_rows(
    request: Request,
    item_1: int = Form(...),
    item_2: int = Form(...)
    db: Session = Depends(create_get_session),
):
    print(item_1)  # will just print 1 to the console where fastapi is running if the checkbox was checked
    print(item_2)  # will just print 1 to the console where fastapi is running if the checkbox was checked
    return RedirectResponse(&quot;/&quot;, status_code=status.HTTP_302_FOUND)
</code></pre>
<h2><a href="#dynamic-values" aria-hidden="true" class="anchor" id="dynamic-values"></a>Dynamic values</h2>
<p>That's all pretty simple... pass back values by the name in the form...</p>
<p>What about a form that's generated dynamically? This is my case since I display a row/checkbox for every row in my table so my form looks like this...</p>
<blockquote>
<p>data is the result of a database query, and item is each row, so the dot notation is the value of each column basically in that row</p>
</blockquote>
<pre><code class="language-jinja">&lt;form method=&quot;post&quot;&gt;
  {% for item in data %}
    &lt;div class=&quot;form-check &quot;&gt;
        &lt;input class=&quot;form-check-input&quot;  name=&quot;item_{{ item.id }}&quot; id=&quot;{{ item.name }}&quot; value=&quot;{{ item.id }}&quot; type=&quot;checkbox&quot;&gt;
        &lt;label class=&quot;form-check-label&quot; for=&quot;{{ item.id }}&quot; &gt; Label for: {{ item.name }} &lt;/label&gt;
    &lt;/div&gt;
  {% endfor %}

&lt;button type=&quot;submit&quot; class=&quot;submit btn btn-xl btn-outline-danger&quot; &gt;Remove&lt;/button&gt;
&lt;/form&gt;

</code></pre>
<p>This form generates a row with a checkbox for every <code>item</code> in <code>data</code> (in my
case each <code>item</code> is an existing row in my table). Now I started scratching my
head on how to pass an unknown number of inputs to my backend of FastAPI wants
each input explicitly defined and typed... I can't just pass the form back
becuase that's not a thing so what's the way to do it?</p>
<pre><code class="language-python"># same stuff as above, only showing post method here
@router.post(&quot;/my_route/do_something_with_form&quot;, response_class=HTMLResponse)
async def delete_rows(
    request: Request,
    db: Session = Depends(create_get_session),
):
    form_data = await request.get_form()
    data = jsonable_encoder(form_data)
    # data = {&quot;item_1&quot;: 1, &quot;item_2&quot;: 2, ... &quot;item_N&quot;: N}
    return RedirectResponse(&quot;/&quot;, status_code=status.HTTP_302_FOUND)
</code></pre>
<p>We <code>await request.get_form()</code> and after encoding the data we get a dictionary with key/value pairs of the name/value from the form!</p>
<p>This took me quite a long time to figure out in part because most of the Google-able resources are still on Flask...</p>
<p>I look forward to my wish list app maturing and I hope this helps someone working with FastAPI!</p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Forms with FastAPI and Jinja</title><link>https://pype.dev/forms-with-fastapi-and-jinja.html</link><author>nicpayne</author><category>python</category><category>tech</category><guid>https://pype.dev/forms-with-fastapi-and-jinja.html</guid><pubDate>Sun, 15 May 2022 00:00:00 GMT</pubDate><source url="https://pype.dev">tag-python</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>I just started using FastAPI for a home project and needed to pass back a
dynamic number of values from a form rendered with jinja...</p>
<h1><a href="#dynamic-values" aria-hidden="true" class="anchor" id="dynamic-values"></a>Dynamic Values</h1>
<p>The jinja templating for rendering HTML based on something like a python iterable is nice and easy</p>
<blockquote>
<p>data is the result of a database query, and item is each row, so the dot notation is the value of each column basically in that row</p>
</blockquote>
<pre><code class="language-jinja">&lt;form method=&quot;post&quot;&gt;
  {% for item in data %}
    &lt;div class=&quot;form-check &quot;&gt;
        &lt;input class=&quot;form-check-input&quot;  name=&quot;item_{{ item.id }}&quot; id=&quot;{{ item.name }}&quot; value=&quot;{{ item.id }}&quot; type=&quot;checkbox&quot;&gt;
        &lt;label class=&quot;form-check-label&quot; for=&quot;{{ item.id }}&quot; &gt; Label for: {{ item.name }} &lt;/label&gt;
    &lt;/div&gt;
  {% endfor %}

&lt;button type=&quot;submit&quot; class=&quot;submit btn btn-xl btn-outline-danger&quot; &gt;Remove&lt;/button&gt;
&lt;/form&gt;

</code></pre>
<p>This form generates a row with a checkbox for every <code>item</code> in <code>data</code> (in my
case each <code>item</code> is an existing row in my table). it?</p>
<p>The way to pass back all those values is pretty straight forward (after hours of messing around that is!)</p>
<pre><code class="language-python"># I hate it when tutorials don't show ALL relevant pieces to the blurb
import starlette.status as status
from fastapi import APIRouter, Depends, Form, Request
from fastapi.encoders import jsonable_encoder
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.templating import Jinja2Templates
from sqlalchemy.orm import Session

from app.session.session import create_get_session

router = APIRouter()
templates = Jinja2Templates(directory=&quot;templates/&quot;)

@router.post(&quot;/my_route/do_something_with_form&quot;, response_class=HTMLResponse)
async def delete_rows(
    request: Request,
    db: Session = Depends(create_get_session),
):
    form_data = await request.get_form()
    data = jsonable_encoder(form_data)
    # data = {&quot;item_1&quot;: 1, &quot;item_2&quot;: 2, ... &quot;item_N&quot;: N}
    return RedirectResponse(&quot;/&quot;, status_code=status.HTTP_302_FOUND)
</code></pre>
<p>We <code>await request.get_form()</code> and after encoding the data we get a dictionary with key/value pairs of the name/value from the form!</p>
<p>This took me quite a long time to figure out in part because most of the Google-able resources are still on Flask...</p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Python-Eval</title><link>https://pype.dev/python-eval.html</link><author>nicpayne</author><category>tech</category><category>python</category><guid>https://pype.dev/python-eval.html</guid><pubDate>Thu, 12 May 2022 00:00:00 GMT</pubDate><source url="https://pype.dev">tag-python</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<h1><a href="#todo" aria-hidden="true" class="anchor" id="todo"></a>TODO</h1>
<pre><code class="language-python">title = &quot;my Title&quot;
eval('&quot;my&quot; in title')

&gt;&gt;&gt; True

</code></pre>
<pre><code class="language-python">print(&quot;hello, world&quot;); print(&quot;formatting&quot;)
</code></pre>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Dataframe-To-Markdown</title><link>https://pype.dev/dataframe-to-markdown.html</link><author>nicpayne</author><category>python</category><category>tech</category><guid>https://pype.dev/dataframe-to-markdown.html</guid><pubDate>Sat, 07 May 2022 00:00:00 GMT</pubDate><source url="https://pype.dev">tag-python</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<h1><a href="#pandas" aria-hidden="true" class="anchor" id="pandas"></a>Pandas</h1>
<p><code>pandas.DataFrame</code>s are pretty sweet data structures in Python.</p>
<p>I do a lot of work with tabular data and one thing I have incorporated into some of that work is automatic data summary reports by throwing the first few, or several relevant, rows of a dataframe at a point in a pipeline into a markdown file.</p>
<p>Pandas has a method on DataFrames that makes this 100% trivial!</p>
<h1><a href="#the-method" aria-hidden="true" class="anchor" id="the-method"></a>The Method</h1>
<p>Say we have a dataframe, <code>df</code>... then it's literally just: <code>df.to_markdown()</code></p>
<pre><code class="language-python">❯ df.head()

          Unnamed: 0   mpg  cyl   disp   hp  drat     wt   qsec  vs  am  gear  carb
0          Mazda RX4  21.0    6  160.0  110  3.90  2.620  16.46   0   1     4     4
1      Mazda RX4 Wag  21.0    6  160.0  110  3.90  2.875  17.02   0   1     4     4
2         Datsun 710  22.8    4  108.0   93  3.85  2.320  18.61   1   1     4     1
3     Hornet 4 Drive  21.4    6  258.0  110  3.08  3.215  19.44   1   0     3     1
4  Hornet Sportabout  18.7    8  360.0  175  3.15  3.440  17.02   0   0     3     2

</code></pre>
<p>In ipython I can call the method and get a markdown table back as a string</p>
<pre><code class="language-python">
mental-data-lake   new-posts via 3.8.11(mental-data-lake) ipython
❯ df.head().to_markdown()
'|    | Unnamed: 0        |   mpg |   cyl |   disp |   hp |   drat |    wt |   qsec |   vs |   am |   gear |   carb |\n|---:|:------------------|------:|------:|-------:|-----:|-------:|------:|-------:|-----:|-----:|-------:|-------:|\n|  0 | Mazda RX4         |  21   |     6 |    160 |  110 |   3.9  | 2.62  |  16.46 |    0 |    1 |      4 |      4 |\n|  1 | Mazda RX4 Wag     |  21   |     6 |    160 |  110 |   3.9  | 2.875 |  17.02 |    0 |    1 |      4 |      4 |\n|  2 | Datsun 710        |  22.8 |     4 |    108 |   93 |   3.85 | 2.32  |  18.61 |    1 |    1 |      4 |      1 |\n|  3 | Hornet 4 Drive    |  21.4 |     6 |    258 |  110 |   3.08 | 3.215 |  19.44 |    1 |    0 |      3 |      1 |\n|  4 | Hornet Sportabout |  18.7 |     8 |    360 |  175 |   3.15 | 3.44  |  17.02 |    0 |    0 |      3 |      2 |'

</code></pre>
<p>You can drop that string into a markdown file and using any reader that supports the rendering you'll have a nicely formated table of example data in whatever report you're making!</p>
<h1><a href="#bonus-method" aria-hidden="true" class="anchor" id="bonus-method"></a>Bonus method</h1>
<p>Just like markdown, you can export a dataframe to html with <code>df.to_html()</code> and use that if it's more appropriate for your use case:</p>
<pre><code class="language-text">
'&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;\n  &lt;thead&gt;\n    &lt;tr style=&quot;text-align: right;&quot;&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;th&gt;Unnamed: 0&lt;/th&gt;\n      &lt;th&gt;mpg&lt;/th&gt;\n      &lt;th&gt;cyl&lt;/th&gt;\n      &lt;th&gt;disp&lt;/th&gt;\n      &lt;th&gt;hp&lt;/th&gt;\n      &lt;th&gt;drat&lt;/th&gt;\n      &lt;th&gt;wt&lt;/th&gt;\n      &lt;th&gt;qsec&lt;/th&gt;\n      &lt;th&gt;vs&lt;/th&gt;\n      &lt;th&gt;am&lt;/th&gt;\n      &lt;th&gt;gear&lt;/th&gt;\n      &lt;th&gt;carb&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;0&lt;/th&gt;\n      &lt;td&gt;Mazda RX4&lt;/td&gt;\n      &lt;td&gt;21.0&lt;/td&gt;\n      &lt;td&gt;6&lt;/td&gt;\n      &lt;td&gt;160.0&lt;/td&gt;\n      &lt;td&gt;110&lt;/td&gt;\n      &lt;td&gt;3.90&lt;/td&gt;\n      &lt;td&gt;2.620&lt;/td&gt;\n      &lt;td&gt;16.46&lt;/td&gt;\n      &lt;td&gt;0&lt;/td&gt;\n      &lt;td&gt;1&lt;/td&gt;\n      &lt;td&gt;4&lt;/td&gt;\n      &lt;td&gt;4&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;1&lt;/th&gt;\n      &lt;td&gt;Mazda RX4 Wag&lt;/td&gt;\n      &lt;td&gt;21.0&lt;/td&gt;\n      &lt;td&gt;6&lt;/td&gt;\n      &lt;td&gt;160.0&lt;/td&gt;\n      &lt;td&gt;110&lt;/td&gt;\n      &lt;td&gt;3.90&lt;/td&gt;\n      &lt;td&gt;2.875&lt;/td&gt;\n      &lt;td&gt;17.02&lt;/td&gt;\n      &lt;td&gt;0&lt;/td&gt;\n      &lt;td&gt;1&lt;/td&gt;\n      &lt;td&gt;4&lt;/td&gt;\n      &lt;td&gt;4&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;2&lt;/th&gt;\n      &lt;td&gt;Datsun 710&lt;/td&gt;\n      &lt;td&gt;22.8&lt;/td&gt;\n      &lt;td&gt;4&lt;/td&gt;\n      &lt;td&gt;108.0&lt;/td&gt;\n      &lt;td&gt;93&lt;/td&gt;\n      &lt;td&gt;3.85&lt;/td&gt;\n      &lt;td&gt;2.320&lt;/td&gt;\n      &lt;td&gt;18.61&lt;/td&gt;\n      &lt;td&gt;1&lt;/td&gt;\n      &lt;td&gt;1&lt;/td&gt;\n      &lt;td&gt;4&lt;/td&gt;\n      &lt;td&gt;1&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;3&lt;/th&gt;\n      &lt;td&gt;Hornet 4 Drive&lt;/td&gt;\n      &lt;td&gt;21.4&lt;/td&gt;\n      &lt;td&gt;6&lt;/td&gt;\n      &lt;td&gt;258.0&lt;/td&gt;\n      &lt;td&gt;110&lt;/td&gt;\n      &lt;td&gt;3.08&lt;/td&gt;\n      &lt;td&gt;3.215&lt;/td&gt;\n      &lt;td&gt;19.44&lt;/td&gt;\n      &lt;td&gt;1&lt;/td&gt;\n      &lt;td&gt;0&lt;/td&gt;\n      &lt;td&gt;3&lt;/td&gt;\n      &lt;td&gt;1&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;4&lt;/th&gt;\n      &lt;td&gt;Hornet Sportabout&lt;/td&gt;\n      &lt;td&gt;18.7&lt;/td&gt;\n      &lt;td&gt;8&lt;/td&gt;\n      &lt;td&gt;360.0&lt;/td&gt;\n      &lt;td&gt;175&lt;/td&gt;\n      &lt;td&gt;3.15&lt;/td&gt;\n      &lt;td&gt;3.440&lt;/td&gt;\n      &lt;td&gt;17.02&lt;/td&gt;\n      &lt;td&gt;0&lt;/td&gt;\n      &lt;td&gt;0&lt;/td&gt;\n      &lt;td&gt;3&lt;/td&gt;\n      &lt;td&gt;2&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;'

</code></pre>
<p>My blog will render that html into a nice table! (After removing new line characters)</p>
<table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th>Unnamed: 0</th>      <th>mpg</th>      <th>cyl</th>      <th>disp</th>      <th>hp</th>      <th>drat</th>      <th>wt</th>      <th>qsec</th>      <th>vs</th>      <th>am</th>      <th>gear</th>      <th>carb</th>    </tr>  </thead>  <tbody>    <tr>      <td>Mazda RX4</td>      <td>21.0</td>      <td>6</td>      <td>160.0</td>      <td>110</td>      <td>3.90</td>      <td>2.620</td>      <td>16.46</td>      <td>0</td>      <td>1</td>      <td>4</td>      <td>4</td>    </tr>    <tr>      <td>Mazda RX4 Wag</td>      <td>21.0</td>      <td>6</td>      <td>160.0</td>      <td>110</td>      <td>3.90</td>      <td>2.875</td>      <td>17.02</td>      <td>0</td>      <td>1</td>      <td>4</td>      <td>4</td>    </tr>    <tr>      <td>Datsun 710</td>      <td>22.8</td>      <td>4</td>      <td>108.0</td>      <td>93</td>      <td>3.85</td>      <td>2.320</td>      <td>18.61</td>      <td>1</td>      <td>1</td>      <td>4</td>      <td>1</td>    </tr>    <tr>      <td>Hornet 4 Drive</td>      <td>21.4</td>      <td>6</td>      <td>258.0</td>      <td>110</td>      <td>3.08</td>      <td>3.215</td>      <td>19.44</td>      <td>1</td>      <td>0</td>      <td>3</td>      <td>1</td>    </tr>    <tr>      <td>Hornet Sportabout</td>      <td>18.7</td>      <td>8</td>      <td>360.0</td>      <td>175</td>      <td>3.15</td>      <td>3.440</td>      <td>17.02</td>      <td>0</td>      <td>0</td>      <td>3</td>      <td>2</td>    </tr>  </tbody></table>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Dataframe-To-Styled-Html</title><link>https://pype.dev/dataframe-to-styled-html.html</link><author>nicpayne</author><category>python</category><category>tech</category><guid>https://pype.dev/dataframe-to-styled-html.html</guid><pubDate>Sat, 07 May 2022 00:00:00 GMT</pubDate><source url="https://pype.dev">tag-python</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>I wrote up a little on exporting DataFrames to markdown and html <a href="dataframe-to-markdown.html">here</a></p>
<p>But I've been playing with a web app for with lists and while I'm toying around I learned you can actually give your tables some style with some simple css classes!</p>
<h1><a href="#to-html" aria-hidden="true" class="anchor" id="to-html"></a>To HTML</h1>
<p>Reminder that if you have a dataframe, <code>df</code>, you can <code>df.to_html()</code> to get an HTML table of your dataframe.</p>
<p>Well you can pass some <code>classes</code> to make it look super nice!</p>
<h1><a href="#classes-and-css" aria-hidden="true" class="anchor" id="classes-and-css"></a>Classes and CSS</h1>
<p>I don't know anything really about CSS so I won't pretend otherwise, but as I was learning about bootstrap that's where I stumbled upon this...</p>
<p>There are several classes you can pass but I found really good luck with <code>table-bordered</code> and <code>table-dark</code> for my use case</p>
<p><code>df.to_html(classes=[&quot;table table-bordered table-dark&quot;])</code></p>
<table border="1" class="dataframe table table-bordered table-dark">  <thead>
<tr style="text-align: right;">      <th>Unnamed: 0</th>      <th>mpg</th>
<th>cyl</th>      <th>disp</th>      <th>hp</th>      <th>drat</th>
<th>wt</th>      <th>qsec</th>      <th>vs</th>      <th>am</th>
<th>gear</th>      <th>carb</th>    </tr>  </thead>  <tbody>    <tr>
<td>Mazda RX4</td>      <td>21.0</td>      <td>6</td>      <td>160.0</td>
<td>110</td>      <td>3.90</td>      <td>2.620</td>      <td>16.46</td>
<td>0</td>      <td>1</td>      <td>4</td>      <td>4</td>    </tr>    <tr>
<td>Mazda RX4 Wag</td>      <td>21.0</td>      <td>6</td>      <td>160.0</td>
<td>110</td>      <td>3.90</td>      <td>2.875</td>      <td>17.02</td>
<td>0</td>      <td>1</td>      <td>4</td>      <td>4</td>    </tr>    <tr>
<td>Datsun 710</td>      <td>22.8</td>      <td>4</td>      <td>108.0</td>
<td>93</td>      <td>3.85</td>      <td>2.320</td>      <td>18.61</td>
<td>1</td>      <td>1</td>      <td>4</td>      <td>1</td>    </tr>    <tr>
<td>Hornet 4 Drive</td>      <td>21.4</td>      <td>6</td>      <td>258.0</td>
<td>110</td>      <td>3.08</td>      <td>3.215</td>      <td>19.44</td>
<td>1</td>      <td>0</td>      <td>3</td>      <td>1</td>    </tr>    <tr>
<td>Hornet Sportabout</td>      <td>18.7</td>      <td>8</td>
<td>360.0</td>      <td>175</td>      <td>3.15</td>      <td>3.440</td>
<td>17.02</td>      <td>0</td>      <td>0</td>      <td>3</td>      <td>2</td>
</tr>  </tbody></table>
<h1><a href="#you-try-it" aria-hidden="true" class="anchor" id="you-try-it"></a>You try it!</h1>
<p>Crack open ipython and make a dataframe, then <code>df.to_html(classes=[&quot;table table-bordered table-dark&quot;])</code>, copy the output (minus the quote marks ipython uses to denote the string type) that into <code>my-file.html</code>, open that up in a browser and be amazed!</p>
<blockquote>
<p>For added effeciency try using pyperclip to copy the output right to your clipboard!</p>
</blockquote>
<p><code>pip install pyperclip</code> and then <code>pyperclip.copy(df.to_html(classes=[&quot;table table-bordered table-dark&quot;]))</code></p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item></channel></rss>