{
  "version": "https://jsonfeed.org/version/1",
  "title": "Pype.dev",
  "home_page_url": "https://pype.dev",
  "feed_url": "https://pype.dev/tag-til.json",
  "description": "my mental data-lake",
  "items": [
    {
      "id": "https://pype.dev/htop.html",
      "url": "https://pype.dev/htop.html",
      "title": "Htop",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p><code>htop</code> is a common command line tool for seeing interactive output of your system resource utilization, running processes, etc.</p>\n<p>I've always been super confused about htop showing seemingly the same process several times though...</p>\n<h2><a href=\"#the-fix\" aria-hidden=\"true\" class=\"anchor\" id=\"the-fix\"></a>The Fix...</h2>\n<p>Just hit <code>H</code>.... makes the view a lot nicer üòÄ</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-04-24T00:00:00-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "til",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/pipx.html",
      "url": "https://pype.dev/pipx.html",
      "title": "Pipx",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p><code>pipx</code> is a tool I've been using to solve a few problems of mine...</p>\n<ol>\n<li>pinning formatting tools like <code>black</code>, <code>flake8</code>, <code>isort</code>, etc. to the same version for all my projects</li>\n<li>keeping virtual environments clean of things like <code>cookiecutter</code></li>\n<li>python utilities I want system wide but not in the global environment, like <code>visidata</code></li>\n</ol>\n<h2><a href=\"#what-is-it\" aria-hidden=\"true\" class=\"anchor\" id=\"what-is-it\"></a>What is it?</h2>\n<p><code>pip</code> itself is just a package manager like <code>homebrew</code>, <code>apt</code>, etc. But it is tied to a python environment.\nIf you aren't using a virtual environment then <code>pip</code> will operate inside the global installation of python.</p>\n<p>Operating within that environment has burned me several times and now I have a strict virtual environment usage policy.</p>\n<p>But there are still things I don't want to have to put in every virtual environment - enter <code>pipx</code></p>\n<h2><a href=\"#whats-it-do\" aria-hidden=\"true\" class=\"anchor\" id=\"whats-it-do\"></a>What's it do?</h2>\n<p>When you <code>pipx install {package}</code> a stand alone virtual environment gets created (by default in <code>~/.local/pipx/venvs</code>).\nTHen you can install extra dependencies with <code>pipx inject {package} {dependency}</code></p>\n<blockquote>\n<p>ex. After <code>pipx install visidata</code> in order to open Excel files you need to <code>pipx inject visidata xlrd</code></p>\n</blockquote>\n<p>In the example with <code>visidata</code>, I can then use it anywhere, in any project, without re-installing with <code>pip</code> in every env.</p>\n<p>Also for the formatting tools - I configure vim to run the <code>pipx</code> versions of them on save - this way I don't have to put them in every project's virtual environment!</p>\n<h2><a href=\"#what-about-pip\" aria-hidden=\"true\" class=\"anchor\" id=\"what-about-pip\"></a>What about pip?</h2>\n<p>So obviously you can't <code>pipx</code> everything, nor do you want to.\nI see it as a safe and better alternative to global package installation.</p>\n<p>How can you then be sure that you never <code>pip install</code> into the global env?</p>\n<p>Add <code>require-virtualenv = True</code> to your <code>pip.conf</code> and you're good to go!</p>\n<p>With that set, if you try to <code>pip install pandas</code> into the global env you'll get a message like this:</p>\n<pre><code class=\"language-bash\">\n~ on ÓåΩ (us-east-1)  NO PYTHON VENV SET\n‚ùØ pip install pandas\nERROR: Could not find an activated virtualenv (required).\n\n\n</code></pre>\n<h2><a href=\"#end\" aria-hidden=\"true\" class=\"anchor\" id=\"end\"></a>End</h2>\n<ol>\n<li>Disable your system <code>pip</code> to keep your base python safe</li>\n<li>Use <code>pipx</code> for tools you want available everywhere or don't have to need in a virtual environment!</li>\n</ol>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-04-22T00:00:00-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "til",
        "python",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/fx-json.html",
      "url": "https://pype.dev/fx-json.html",
      "title": "Fx-Json",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p><a href=\"https://github.com/antonmedv/fx\">fx</a> is an interactaive JSON viewer for the terminal.</p>\n<p>It's a simple tool built with Charmcli's Bubble Tea.</p>\n<h2><a href=\"#installation\" aria-hidden=\"true\" class=\"anchor\" id=\"installation\"></a>Installation</h2>\n<p>The installation with go was broken for me - both via the link and direct from the repo.\nNow I'm not a gopher so I don't really know how to fix that.</p>\n<p>Luckily <code>npm install fx</code> also works and got me what I needed!</p>\n<h2><a href=\"#usage\" aria-hidden=\"true\" class=\"anchor\" id=\"usage\"></a>Usage</h2>\n<p>Usage is simple... <code>fx &lt;json file&gt;</code>.\nThe Github has a few other ways such as <code>curl ... | fx</code> etc.</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-04-19T00:00:00-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "til",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/typeddict.html",
      "url": "https://pype.dev/typeddict.html",
      "title": "Typeddict",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>Type hinting has helped me write code almost as much, if not more, than unit testing.</p>\n<p>One thing I love is that with complete type hinting you get a lot more out of your LSP.\nTyping dictionaries can be tricky and I recently learned about <code>TypedDict</code> to do exactly what I needed!</p>\n<h2><a href=\"#the-problem\" aria-hidden=\"true\" class=\"anchor\" id=\"the-problem\"></a>The Problem</h2>\n<p>It might not be straight up obvious what the problem is, especially if you don't utilize tools like <code>mypy</code> or <code>flake8</code> in your development.</p>\n<p>My handy-dandy <code>nvim-lsp</code> gives me a lot of feedback when I'm coding and it's immensely helpful.</p>\n<p>So with the LSP giving me constant feedback here's the issue:</p>\n<pre><code class=\"language-python\">from typing import Dict, List, Union\n\nmy_dict: Dict[str, Union[List[str], str]] = {\n    &quot;key_1&quot;: &quot;val_1&quot;,\n    &quot;key_2&quot;: [&quot;ls_1&quot;, &quot;ls_2&quot;],\n}\n\nmy_dict[&quot;key_2&quot;].pop()\n</code></pre>\n<p>With the above script you'll get an annoying warning about using <code>pop</code> on <code>key_2</code>.</p>\n<img src=\"https://cdn.statically.io/gh/pypeaday/images.pype.dev/main/blog-media/typed-dict-warning.png\" alt=\"typeddict\" title=\"Warning in TypedDict\" />\n<h2><a href=\"#the-solution\" aria-hidden=\"true\" class=\"anchor\" id=\"the-solution\"></a>The Solution</h2>\n<p>Maybe you can stomach getting yelled at by your LSP but I like complete silence if at all possible.</p>\n<p><code>TypedDict</code>  was the saving grace.</p>\n<pre><code class=\"language-python\">from typing import TypedDict\n\nMyDict = TypedDict(&quot;MyDict&quot;, {&quot;key_1&quot;: str, &quot;key_2&quot;: List[str]})\n\nmy_typed_dict: MyDict = {\n    &quot;key_1&quot;: &quot;val_1&quot;,\n    &quot;key_2&quot;: [&quot;ls_1&quot;, &quot;ls_2&quot;],\n}\n\n\nmy_typed_dict[&quot;key_2&quot;].pop()\n</code></pre>\n<img src=\"https://cdn.statically.io/gh/pypeaday/images.pype.dev/main/blog-media/typed-dict.png\" alt=\"typeddict\" title=\"A TypedDict\" />\n<blockquote>\n<p>I was able to import TypedDict from typing, mypy_extensions, and typing_extensions</p>\n</blockquote>\n<p>With <code>TypedDict</code> you define your custom type, match the first argument to <code>TypedDict</code> with the name of the variable (idk why), then type hint each key you expect in the dict!\nIt's super easy and I think puts you into a position of being extremely explicit with your dictionary variables.\nThis isn't always desired or appropriate but in most of my use cases it is.</p>\n<h2><a href=\"#rtfm\" aria-hidden=\"true\" class=\"anchor\" id=\"rtfm\"></a>RTFM</h2>\n<p>There's other implementation of <code>TypedDict</code> and while writing this I saw that most of the docs define a <code>class</code> for the type like this:</p>\n<pre><code class=\"language-python\">from typing import TypedDict\nclass MyDict(TypedDict):\n    key_1: str\n    key_2: List[str]\n\nmy_dict : MyDict = {'key_1': 'val_1', 'key_2': [&quot;ls_1&quot;, &quot;ls_2&quot;]}\n\n</code></pre>\n<p><a href=\"https://peps.python.org/pep-0589/\">pep docs</a></p>\n<p><a href=\"https://mypy.readthedocs.io/en/latest/more_types.html#typeddict\">mypy docs</a></p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-04-15T00:00:00-00:00",
      "image": "https://cdn.statically.io/gh/pypeaday/images.pype.dev/main/blog-media/typed-dict-warning.png",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "til",
        "python",
        "tech"
      ],
      "language": "en"
    },
    {
      "id": "https://pype.dev/adblock-coverage.html",
      "url": "https://pype.dev/adblock-coverage.html",
      "title": "Adblock-Coverage",
      "content_html": "<!-- Content Injected to every content markdown header -->\n<p>I run pi-hole at home for ad blocking and some internal DNS/DHCP handling.</p>\n<p><u>pi hole posts on the way</u></p>\n<p>One thing I've never put too much thought in is asking &quot;how well am I doing at blocking?&quot;\nThere's lots of ways to measure that depending on what you care about but I just learned of <a href=\"https://d3ward.github.io/toolz/adblock\">adblock tester</a>.\nIt's awesome and gave me a quick glimpse into how my pi-hole is performing on keeping my webpages clean and my DNS history private!</p>\n<p>Credits to <a href=\"https://github.com/d3ward/toolz\">d3ward</a> for the awesome tool!</p>\n<!-- Content Injected to every content markdown footer -->\n",
      "summary": "",
      "date_published": "2022-03-07T00:00:00-00:00",
      "image": "",
      "authors": [
        {
          "name": "Nicholas Payne",
          "url": "https://github.com/pypeaday",
          "avatar": "https://github.com/pypeaday.png"
        }
      ],
      "tags": [
        "homelab",
        "til",
        "tech"
      ],
      "language": "en"
    }
  ]
}