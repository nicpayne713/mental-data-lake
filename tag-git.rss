<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Pype.dev</title><link>https://pype.dev</link><description>my mental data-lake</description><pubDate>Tue, 03 May 2022 00:00:00 GMT</pubDate><lastBuildDate>Sat, 25 Jan 2025 19:52:47 GMT</lastBuildDate><generator>marmite</generator><image><url>https://pype.dev/media/og-02.png</url><title></title><link></link></image><item><title>Git-Bisect</title><link>https://pype.dev/git-bisect.html</link><author>nicpayne</author><category>git</category><category>tech</category><guid>https://pype.dev/git-bisect.html</guid><pubDate>Tue, 03 May 2022 00:00:00 GMT</pubDate><source url="https://pype.dev">tag-git</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>I try to commit a lot, and I also try to write useful tests appropriate for the scope of work I'm focusing on, but sometimes I drop the ball...</p>
<p>Whether by laziness, ignorance, or accepted tech debt I don't always code perfectly and recently I was dozens of commits into a new feature before realizing I broke something along the way that none of my tests caught...</p>
<p>Before today I would've manually reviewed every commit to see if something obvious slipped by me (talk about a time suck üò©)</p>
<p><u>There must be a better way</u></p>
<h1><a href="#bisect" aria-hidden="true" class="anchor" id="bisect"></a>Bisect?</h1>
<p><code>git bisect</code> is the magic sauce for this exact problem...</p>
<p>You essentially create a range of commits to consider and let <code>git bisect</code> guide you through them in a manner akin to Newton's method for finding the root of a continuous function.</p>
<h1><a href="#how-to-do-it" aria-hidden="true" class="anchor" id="how-to-do-it"></a>How to do it?</h1>
<p>Start with <code>git bisect start</code> and then choose the first <code>good</code> commit (ie. a commit you know the bug isn't present in)</p>
<pre><code class="language-bash">
sandbox  Óú• bisect-post  Ôàõ √ó1 via Óàµ  v3.8.11(sandbox)  on ÓåΩ (us-east-1)
‚ùØ git bisect start

sandbox  Óú• bisect-post (BISECTING)  Ôàõ √ó1 via Óàµ  v3.8.11(sandbox)  on ÓåΩ (us-east-1)
‚ùØ git bisect good 655332b
bisect-post  HEAD         main         ORIG_HEAD
5b31e1e  -- [HEAD]    add successful print (52 seconds ago)
308247b  -- [HEAD^]   init another loop (77 seconds ago)
4555c59  -- [HEAD^^]  introduce bug (2 minutes ago)
9cf6d55  -- [HEAD~3]  add successful loop (3 minutes ago)
bcb41c3  -- [HEAD~4]  change x to 10 (4 minutes ago)
3c34aac  -- [HEAD~5]  init x to 1 (4 minutes ago)
12e53bd  -- [HEAD~6]  print cwd (4 minutes ago)
655332b  -- [HEAD~7]  add example.py (10 minutes ago)  # &lt;- I want to start at this commit
59e0048  -- [HEAD~8]  gitignore (23 hours ago)
fb9e1fb  -- [HEAD~9]  add reqs (23 hours ago)

</code></pre>
<pre><code class="language-bash">
sandbox  Óú• bisect-post (BISECTING)  Ôàõ √ó1 via Óàµ  v3.8.11(sandbox)  on ÓåΩ (us-east-1)
‚ùØ git bisect bad 5b31e1e
bisect-post                                                ORIG_HEAD
HEAD                                                       refs/bisect/good-655332b6c384934c2c00c3d4aba3011ccc1e5b57
main
5b31e1e  -- [HEAD]    add successful print (5 minutes ago)  # &lt;- I start here with the &quot;bad&quot; commit
308247b  -- [HEAD^]   init another loop (6 minutes ago)
4555c59  -- [HEAD^^]  introduce bug (6 minutes ago)
9cf6d55  -- [HEAD~3]  add successful loop (7 minutes ago)
bcb41c3  -- [HEAD~4]  change x to 10 (8 minutes ago)
3c34aac  -- [HEAD~5]  init x to 1 (9 minutes ago)
12e53bd  -- [HEAD~6]  print cwd (9 minutes ago)
655332b  -- [HEAD~7]  add example.py (14 minutes ago)
59e0048  -- [HEAD~8]  gitignore (23 hours ago)
fb9e1fb  -- [HEAD~9]  add reqs (23 hours ago)

</code></pre>
<p>After starting bisect with a &quot;good&quot; start commit and a &quot;bad&quot; ending commit we can let git to it's thing!</p>
<p>Git checksout a commit somewhere about halfway between the good and bad commit so you can see if your bug is there or not.</p>
<pre><code class="language-bash">
sandbox  Óú• bisect-post (BISECTING)  Ôàõ √ó1 via Óàµ  v3.8.11(sandbox)  on ÓåΩ (us-east-1)
‚ùØ git bisect bad 5b31e1e
Bisecting: 3 revisions left to test after this (roughly 2 steps)
[bcb41c3854e343eade85353683f2c1c4ddde4e04] change x to 10

sandbox  Óú• HEAD (bcb41c38) (BISECTING)  Ôàõ √ó1 via Óàµ  v3.8.11(sandbox)  on ÓåΩ (us-east-1)
‚ùØ
</code></pre>
<p>In my example here I have a python script with some loops and print statements - they aren't really relevant, I just wanted an easy to follow git history.</p>
<p>So I check to see if the bug is present or not either by running/writing tests or replicating the bug somehow.</p>
<p>In this session commit <code>bcb41c38</code> is actually just fine, so I do <code>git bisect good</code></p>
<pre><code class="language-bash">
sandbox  Óú• HEAD (bcb41c38) (BISECTING)  Ôàõ √ó1 via Óàµ  v3.8.11(sandbox)  on ÓåΩ (us-east-1)
‚ùØ git bisect good
Bisecting: 1 revision left to test after this (roughly 1 step)
[4555c5979268dff6c475365fdc5ce1d4a12bd820] introduce bug

</code></pre>
<p>And we see that git moves on to checkout another commit...</p>
<p>In this case the next commit is the one where I introduced a bug</p>
<p><code>git bisect bad</code> then gives me:</p>
<pre><code class="language-bash">
sandbox  Óú• HEAD (4555c597) (BISECTING)  Ôàõ √ó1 via Óàµ  v3.8.11(sandbox)  on ÓåΩ (us-east-1)
‚ùØ git bisect bad
Bisecting: 0 revisions left to test after this (roughly 0 steps)
[9cf6d55301560c51e2f55404d0d80b1f1e22a33d] add successful loop
</code></pre>
<p>At <code>4555c597</code> the script works as expected so one more <code>git bisect good</code> yields...</p>
<pre><code class="language-bash">sandbox  Óú• HEAD (9cf6d553) (BISECTING)  Ôàõ √ó1 via Óàµ  v3.8.11(sandbox)  on ÓåΩ (us-east-1)
‚ùØ git bisect good
4555c5979268dff6c475365fdc5ce1d4a12bd820 is the first bad commit
commit 4555c5979268dff6c475365fdc5ce1d4a12bd820
Author: ########################### 
Date:   Tue May 3 09:00:00 2022 -0500

    introduce bug

 example.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)


</code></pre>
<h1><a href="#what-happened" aria-hidden="true" class="anchor" id="what-happened"></a>What happened?</h1>
<p>Git sliced up a range of commits based on me saying of the next one was good or bad and localized the commit that introduced a bug into my workflow!</p>
<p>I didn't have to manually review commits, click through logs, etc... I just let git checkout relevant commits and I ran whatever was appropriate for reproducing the bug to learn when it was comitted!</p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Mu</title><link>https://pype.dev/mu.html</link><author>nicpayne</author><category>python</category><category>git</category><category>tech</category><guid>https://pype.dev/mu.html</guid><pubDate>Tue, 15 Mar 2022 00:00:00 GMT</pubDate><source url="https://pype.dev">tag-git</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>If you work with a template for several projects then you might sometimes need to do the same action across all repos.
A good example of this is updating a package in <code>requirements.txt</code> in every project, or refactoring a common module.
If you have several repos to do this across then it can be time consuming... enter <code>mu-repo</code></p>
<h2><a href="#mu" aria-hidden="true" class="anchor" id="mu"></a>Mu</h2>
<p><a href="https://fabioz.github.io/mu-repo/">mu-repo</a> is an awesome cli tool for working with multiple git repositories at the same time.
There are several things you can do:</p>
<ol>
<li><code>mu status</code> will give you the <code>git status</code> of every registered repo (see below)</li>
<li><code>mu sh</code> will let you execute system level commands in every repo</li>
<li><code>mu stash</code> will stash all changes across all registered repos</li>
<li>There's literally a ton more but these are some handy ones</li>
</ol>
<h2><a href="#registration" aria-hidden="true" class="anchor" id="registration"></a>Registration</h2>
<p><code>mu</code> tracks its own <code>groups</code>, and there is a default group when no particular one is active.
It's as simple as <code>mu register proj1 prog2 ...</code> to get repos registered</p>
<pre><code class="language-bash">
‚ùØ mu register proj1 proj2
Repository: proj1 registered
Repository: proj2 registered

‚ùØ mu status

  proj1 : git status
    On branch main

    No commits yet

    Untracked files:
    (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)
    requirements.txt

    nothing added to commit but untracked files present (use &quot;git add&quot; to track)

  proj2 : git status
    On branch main

    No commits yet

    Changes to be committed:
    (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)
    new file:   requirements.txt


</code></pre>
<h2><a href="#working-with-mu" aria-hidden="true" class="anchor" id="working-with-mu"></a>Working with mu</h2>
<p>As you can see above I have two projects each with a <code>requirements.txt</code> added but not committed yet.
Using <code>mu</code> I can stage this change across both repos at once.</p>
<pre><code class="language-bash">
‚ùØ mu add requirements.txt

  proj1 : git add requirements.txt

  proj2 : git add requirements.txt
</code></pre>
<p>Then as you might imagine, I can make the commit in each repo</p>
<pre><code class="language-bash">
‚ùØ mu commit -m &quot;Add requirements.txts&quot;

  proj1 : git commit -m Add requirements.txts
    [main (root-commit) 18376d7] Add requirements.txts
    1 file changed, 1 insertion(+)
    create mode 100644 requirements.txt

  proj2 : git commit -m Add requirements.txts
    [main (root-commit) 18376d7] Add requirements.txts
    1 file changed, 1 insertion(+)
    create mode 100644 requirements.txt
</code></pre>
<h2><a href="#mu-groups" aria-hidden="true" class="anchor" id="mu-groups"></a>mu groups</h2>
<p>The other thing I got a lot of use out of recently was <code>mu</code>'s groups.
At work I have about 40 repos cloned that are all based on the same kedro pipeline template.
Some of these projects have been deprecated.
I also have several more repos that are not kedro template - custom libraries or something.
<code>group</code> let me utilize <code>mu</code> across different groups of repos.</p>
<p>Say <code>proj2</code> is a deprecated project that I don't need to worry about making changes to anymore.
I don't just have to unregister it, instead I can make a group called &quot;active&quot; and register <code>proj1</code> in that group</p>
<pre><code class="language-bash">
‚ùØ mu group add active --empty

~/personal
‚ùØ mu group add deprecated --empty

~/personal
‚ùØ mu group
  active
* deprecated

</code></pre>
<p>The <code>*</code> tells me which group is active.
The <code>--empty</code> flag tells <code>mu</code> to not add all registered repos to that group.
If I don't want to use any groups then <code>mu group reset</code> will go back to the default group with all registered repos.</p>
<p>With groups I can register only the repos that I want to be working across in their own group and not worry about affecting other repos with my batch changes!</p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Git-Worktrees-01</title><link>https://pype.dev/git-worktrees-01.html</link><author>nicpayne</author><category>git</category><category>tech</category><guid>https://pype.dev/git-worktrees-01.html</guid><pubDate>Fri, 11 Mar 2022 00:00:00 GMT</pubDate><source url="https://pype.dev">tag-git</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<h2><a href="#git" aria-hidden="true" class="anchor" id="git"></a>Git</h2>
<p>Hopefully if you write code you are using git, if not go learn the basics of <code>commit</code>, <code>pull</code>, <code>push</code>, and <code>pull request</code>/<code>merge request</code> like... right now.</p>
<p>Assuming you are at least familiar with git then you probably work the same way I have since I've been using it.</p>
<ol>
<li>clone or initialize a repo</li>
<li>checkout a branch, <code>git checkout -b my-feature</code></li>
<li>work on <code>my-feature</code> and when ready open a PR into <code>main</code></li>
<li><code>git pull main</code> then <code>git checkout -b another-feature</code></li>
<li>etc...</li>
</ol>
<p>What if you need to switch between branches for some reason? Often I'm jumping into projects with my co-workers left and right, and I'll have changes that I'm either working on or exploring for them.
When it's time to switch branches I think there's more elegant ways than this but I've always done this:</p>
<ol>
<li><code>stash</code> the current changes</li>
<li>checkout out the relevant branch</li>
<li>helped out</li>
<li>re-checkout my original branch</li>
<li><code>pop</code> the <code>stash</code></li>
</ol>
<p>Now, that's not awful but I think <code>worktrees</code> will make this nicer for a few reasons!</p>
<h2><a href="#worktrees" aria-hidden="true" class="anchor" id="worktrees"></a>Worktrees</h2>
<p>Worktrees are linked branches that have their own directories somewhere on your computer.
To checkout a branch you don't have to worry about stashing any changes, you just <code>cd</code> into the directory of that branch.</p>
<blockquote>
<p>The branch can be literally anywhere - it doesn't have to be in the repo folder</p>
</blockquote>
<h2><a href="#use-case" aria-hidden="true" class="anchor" id="use-case"></a>Use Case</h2>
<p>I've seen ThePrimeagean argue for worktrees for several reasons, see a YT video <a href="https://www.youtube.com/watch?v=2uEqYw-N8uE">here</a></p>
<p>I'm entirely in Python at the moment, or working with projects that dont' have that kind of requirement (ie. this website).
My reason for wanting worktrees is 3 fold.</p>
<h3><a href="#files-that-could-have-been-gitignored-but-aint" aria-hidden="true" class="anchor" id="files-that-could-have-been-gitignored-but-aint"></a>Files that could have been gitignored but ain't</h3>
<p>I have a <code>.envrc</code> I put in every project, but it's not gitignored for reasons that aren't relevant right now...
If I switch branches I'll stash everything I have at the time, including my .envrc, but then if I forget to pop the stash and I move on and come back then my environment isn't active and I have to go find the stash, pop it, cd out, and then back in and honestly.... that sucks.
Worktrees will let me have the .envrc in every branch, and if I checkout or switch to a new one, my personal branch is unaffected.</p>
<h3><a href="#symlinks" aria-hidden="true" class="anchor" id="symlinks"></a>Symlinks</h3>
<p>In my team's <a href="https://kedro.readthedocs.io/en/stable/01_introduction/01_introduction.html">Kedro</a> workflow we keep a specific directory, the <code>conf</code> directory at a different spot than the Kedro team has in their templates (the why is outside the scope here).
The way I preserve every kedro utility for my own benefit is to symlink our <code>conf</code> to where the Kedro template expects it to be.
But then everytime I stash changes I lose that symlink so I either just don't have it for the time being or I recreate it which is a hassle
Worktrees will let me have that present and persistent on all my branches at once.</p>
<h3><a href="#foo" aria-hidden="true" class="anchor" id="foo"></a>Foo</h3>
<p>Because why not!? This workflow feels future-proof, and if my toolset changes down the line then having this worktree centric workflow might be helpful and I'm just prepping for that possibility!</p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Git ammend to a commit</title><link>https://pype.dev/git-ammend-to-a-commit.html</link><author>nicpayne</author><category>git</category><category>tech</category><guid>https://pype.dev/git-ammend-to-a-commit.html</guid><pubDate>Fri, 04 Mar 2022 00:00:00 GMT</pubDate><source url="https://pype.dev">tag-git</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>After carefully staging only lines related to a specific change and comitting I suddenly realized I missed one... darn, what do I do?</p>
<p>Old me would have soft reset my branch to the previous commit and redone all my careful staging... what a PIA...</p>
<p>New me (credit: ThePrimeagen)...</p>
<pre><code class="language-bash"># stage other changes I missed
git commit --amend --no-edit
</code></pre>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item></channel></rss>